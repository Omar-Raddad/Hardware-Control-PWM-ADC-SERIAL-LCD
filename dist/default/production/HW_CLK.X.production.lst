

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Dec 28 16:29:47 2023

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           ; Version 1.45
    70                           ; Generated 16/11/2017 GMT
    71                           ; 
    72                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F4620 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     
   104                           	psect	idataCOMRAM
   105  002FE8                     __pidataCOMRAM:
   106                           	opt stack 0
   107                           
   108                           ;initializer for _SetPoint
   109  002FE8  00                 	db	0
   110  002FE9  20                 	db	32
   111  002FEA  42                 	db	66
   112                           
   113                           ;initializer for _MaxCookTime
   114  002FEB  4650               	dw	18000
   115                           
   116                           ;initializer for _MaxHour
   117  002FED  000A               	dw	10
   118                           
   119                           ;initializer for _H
   120  002FEF  0003               	dw	3
   121                           
   122                           ;initializer for _max
   123  002FF1  0007               	dw	7
   124                           
   125                           	psect	idataBANK0
   126  002FF3                     __pidataBANK0:
   127                           	opt stack 0
   128                           
   129                           ;initializer for _LCD_INIT_STRING
   130  002FF3  28                 	db	40
   131  002FF4  0C                 	db	12
   132  002FF5  01                 	db	1
   133  002FF6  06                 	db	6
   134                           
   135                           	psect	idataBANK1
   136  002FBC                     __pidataBANK1:
   137                           	opt stack 0
   138                           
   139                           ;initializer for _IncVal
   140  002FBC  0001               	dw	1
   141  002FBE  003C               	dw	60
   142  002FC0  0E10               	dw	3600
   143                           
   144                           ;initializer for _IncStr
   145  002FC2  F1                 	db	low STR_1
   146  002FC3  FF                 	db	high STR_1
   147  002FC4  F5                 	db	low STR_2
   148  002FC5  FF                 	db	high STR_2
   149  002FC6  FC                 	db	low STR_3
   150  002FC7  FF                 	db	high STR_3
   151                           
   152                           ;initializer for _StateStr
   153  002FC8  E0                 	db	low STR_4
   154  002FC9  FF                 	db	high STR_4
   155  002FCA  99                 	db	low STR_5
   156  002FCB  FF                 	db	high STR_5
   157                           
   158                           	psect	mediumconst
   159  00FE5A                     __pmediumconst:
   160                           	opt stack 0
   161  00FE5A  00                 	db	0
   162  00FE5B                     _dpowers:
   163                           	opt stack 0
   164  00FE5B  0001               	dw	1
   165  00FE5D  0000               	dw	0
   166  00FE5F  000A               	dw	10
   167  00FE61  0000               	dw	0
   168  00FE63  0064               	dw	100
   169  00FE65  0000               	dw	0
   170  00FE67  03E8               	dw	1000
   171  00FE69  0000               	dw	0
   172  00FE6B  2710               	dw	10000
   173  00FE6D  0000               	dw	0
   174  00FE6F  86A0               	dw	34464
   175  00FE71  0001               	dw	1
   176  00FE73  4240               	dw	16960
   177  00FE75  000F               	dw	15
   178  00FE77  9680               	dw	38528
   179  00FE79  0098               	dw	152
   180  00FE7B  E100               	dw	57600
   181  00FE7D  05F5               	dw	1525
   182  00FE7F  CA00               	dw	51712
   183  00FE81  3B9A               	dw	15258
   184  00FE83                     __end_of_dpowers:
   185                           	opt stack 0
   186  00FE83                     __powers_:
   187                           	opt stack 0
   188  00FE83  00                 	db	0
   189  00FE84  80                 	db	128
   190  00FE85  3F                 	db	63
   191  00FE86  00                 	db	0
   192  00FE87  20                 	db	32
   193  00FE88  41                 	db	65
   194  00FE89  00                 	db	0
   195  00FE8A  C8                 	db	200
   196  00FE8B  42                 	db	66
   197  00FE8C  00                 	db	0
   198  00FE8D  7A                 	db	122
   199  00FE8E  44                 	db	68
   200  00FE8F  40                 	db	64
   201  00FE90  1C                 	db	28
   202  00FE91  46                 	db	70
   203  00FE92  50                 	db	80
   204  00FE93  C3                 	db	195
   205  00FE94  47                 	db	71
   206  00FE95  24                 	db	36
   207  00FE96  74                 	db	116
   208  00FE97  49                 	db	73
   209  00FE98  97                 	db	151
   210  00FE99  18                 	db	24
   211  00FE9A  4B                 	db	75
   212  00FE9B  BC                 	db	188
   213  00FE9C  BE                 	db	190
   214  00FE9D  4C                 	db	76
   215  00FE9E  6B                 	db	107
   216  00FE9F  6E                 	db	110
   217  00FEA0  4E                 	db	78
   218  00FEA1  03                 	db	3
   219  00FEA2  15                 	db	21
   220  00FEA3  50                 	db	80
   221  00FEA4  79                 	db	121
   222  00FEA5  AD                 	db	173
   223  00FEA6  60                 	db	96
   224  00FEA7  F3                 	db	243
   225  00FEA8  49                 	db	73
   226  00FEA9  71                 	db	113
   227  00FEAA                     __end_of__powers_:
   228                           	opt stack 0
   229  00FEAA                     __npowers_:
   230                           	opt stack 0
   231  00FEAA  00                 	db	0
   232  00FEAB  80                 	db	128
   233  00FEAC  3F                 	db	63
   234  00FEAD  CD                 	db	205
   235  00FEAE  CC                 	db	204
   236  00FEAF  3D                 	db	61
   237  00FEB0  D7                 	db	215
   238  00FEB1  23                 	db	35
   239  00FEB2  3C                 	db	60
   240  00FEB3  12                 	db	18
   241  00FEB4  83                 	db	131
   242  00FEB5  3A                 	db	58
   243  00FEB6  B7                 	db	183
   244  00FEB7  D1                 	db	209
   245  00FEB8  38                 	db	56
   246  00FEB9  C6                 	db	198
   247  00FEBA  27                 	db	39
   248  00FEBB  37                 	db	55
   249  00FEBC  38                 	db	56
   250  00FEBD  86                 	db	134
   251  00FEBE  35                 	db	53
   252  00FEBF  C0                 	db	192
   253  00FEC0  D6                 	db	214
   254  00FEC1  33                 	db	51
   255  00FEC2  CC                 	db	204
   256  00FEC3  2B                 	db	43
   257  00FEC4  32                 	db	50
   258  00FEC5  70                 	db	112
   259  00FEC6  89                 	db	137
   260  00FEC7  30                 	db	48
   261  00FEC8  E7                 	db	231
   262  00FEC9  DB                 	db	219
   263  00FECA  2E                 	db	46
   264  00FECB  E5                 	db	229
   265  00FECC  3C                 	db	60
   266  00FECD  1E                 	db	30
   267  00FECE  42                 	db	66
   268  00FECF  A2                 	db	162
   269  00FED0  0D                 	db	13
   270  00FED1                     __end_of__npowers_:
   271                           	opt stack 0
   272  0000                     _PORTBbits	set	3969
   273  0000                     _PORTDbits	set	3971
   274  0000                     _PORTCbits	set	3970
   275  0000                     _T3CON	set	4017
   276  0000                     _PIR2	set	4001
   277  0000                     _PIE2	set	4000
   278  0000                     _INTCON3bits	set	4080
   279  0000                     _INTCON2bits	set	4081
   280  0000                     _RCONbits	set	4048
   281  0000                     _RCON	set	4048
   282  0000                     _PIE1bits	set	3997
   283  0000                     _PIE1	set	3997
   284  0000                     _TMR0L	set	4054
   285  0000                     _TMR0H	set	4055
   286  0000                     _T0CONbits	set	4053
   287  0000                     _INTCONbits	set	4082
   288  0000                     _T0CON	set	4053
   289  0000                     _INTCON3	set	4080
   290  0000                     _INTCON2	set	4081
   291  0000                     _INTCON	set	4082
   292  0000                     _TRISE	set	3990
   293  0000                     _TRISD	set	3989
   294  0000                     _TRISA	set	3986
   295  0000                     _TRISC	set	3988
   296  0000                     _TRISB	set	3987
   297  0000                     _ADCON1	set	4033
   298  0000                     _ADRESL	set	4035
   299  0000                     _ADRESH	set	4036
   300  0000                     _ADCON2	set	4032
   301  0000                     _ADCON0bits	set	4034
   302  0000                     _ADCON0	set	4034
   303  0000                     _PORTEbits	set	3972
   304  0000                     _TXREG	set	4013
   305  0000                     _PIR1bits	set	3998
   306  0000                     _RCREG	set	4014
   307  0000                     _RCSTAbits	set	4011
   308  0000                     _RCSTA	set	4011
   309  0000                     _TXSTAbits	set	4012
   310  0000                     _SPBRGH	set	4016
   311  0000                     _SPBRG	set	4015
   312  0000                     _TXSTA	set	4012
   313  0000                     _BAUDCONbits	set	4024
   314  00FED1                     STR_6:
   315                           
   316                           ; BSR set to: 1
   317  00FED1  54                 	db	84	;'T'
   318  00FED2  69                 	db	105	;'i'
   319  00FED3  6D                 	db	109	;'m'
   320  00FED4  65                 	db	101	;'e'
   321  00FED5  3A                 	db	58	;':'
   322  00FED6  25                 	db	37
   323  00FED7  30                 	db	48	;'0'
   324  00FED8  32                 	db	50	;'2'
   325  00FED9  64                 	db	100	;'d'
   326  00FEDA  3A                 	db	58	;':'
   327  00FEDB  25                 	db	37
   328  00FEDC  30                 	db	48	;'0'
   329  00FEDD  32                 	db	50	;'2'
   330  00FEDE  64                 	db	100	;'d'
   331  00FEDF  3A                 	db	58	;':'
   332  00FEE0  25                 	db	37
   333  00FEE1  30                 	db	48	;'0'
   334  00FEE2  32                 	db	50	;'2'
   335  00FEE3  64                 	db	100	;'d'
   336  00FEE4  0A                 	db	10
   337  00FEE5  20                 	db	32
   338  00FEE6  00                 	db	0
   339  00FEE7                     STR_38:
   340                           
   341                           ; BSR set to: 1
   342  00FEE7  41                 	db	65	;'A'
   343  00FEE8  49                 	db	73	;'I'
   344  00FEE9  30                 	db	48	;'0'
   345  00FEEA  3A                 	db	58	;':'
   346  00FEEB  25                 	db	37
   347  00FEEC  33                 	db	51	;'3'
   348  00FEED  2E                 	db	46
   349  00FEEE  31                 	db	49	;'1'
   350  00FEEF  66                 	db	102	;'f'
   351  00FEF0  20                 	db	32
   352  00FEF1  20                 	db	32
   353  00FEF2  41                 	db	65	;'A'
   354  00FEF3  49                 	db	73	;'I'
   355  00FEF4  31                 	db	49	;'1'
   356  00FEF5  3A                 	db	58	;':'
   357  00FEF6  25                 	db	37
   358  00FEF7  33                 	db	51	;'3'
   359  00FEF8  2E                 	db	46
   360  00FEF9  31                 	db	49	;'1'
   361  00FEFA  66                 	db	102	;'f'
   362  00FEFB  20                 	db	32
   363  00FEFC  00                 	db	0
   364  00FEFD                     STR_30:
   365                           
   366                           ; BSR set to: 1
   367  00FEFD  25                 	db	37
   368  00FEFE  30                 	db	48	;'0'
   369  00FEFF  32                 	db	50	;'2'
   370  00FF00  64                 	db	100	;'d'
   371  00FF01  3A                 	db	58	;':'
   372  00FF02  25                 	db	37
   373  00FF03  30                 	db	48	;'0'
   374  00FF04  32                 	db	50	;'2'
   375  00FF05  64                 	db	100	;'d'
   376  00FF06  3A                 	db	58	;':'
   377  00FF07  25                 	db	37
   378  00FF08  30                 	db	48	;'0'
   379  00FF09  32                 	db	50	;'2'
   380  00FF0A  64                 	db	100	;'d'
   381  00FF0B  20                 	db	32
   382  00FF0C  25                 	db	37
   383  00FF0D  34                 	db	52	;'4'
   384  00FF0E  2E                 	db	46
   385  00FF0F  32                 	db	50	;'2'
   386  00FF10  66                 	db	102	;'f'
   387  00FF11  00                 	db	0
   388  00FF12                     STR_36:
   389                           
   390                           ; BSR set to: 1
   391  00FF12  25                 	db	37
   392  00FF13  2D                 	db	45
   393  00FF14  35                 	db	53	;'5'
   394  00FF15  73                 	db	115	;'s'
   395  00FF16  20                 	db	32
   396  00FF17  20                 	db	32
   397  00FF18  20                 	db	32
   398  00FF19  20                 	db	32
   399  00FF1A  20                 	db	32
   400  00FF1B  20                 	db	32
   401  00FF1C  20                 	db	32
   402  00FF1D  20                 	db	32
   403  00FF1E  20                 	db	32
   404  00FF1F  20                 	db	32
   405  00FF20  20                 	db	32
   406  00FF21  00                 	db	0
   407  00FF22                     STR_31:
   408                           
   409                           ; BSR set to: 1
   410  00FF22  48                 	db	72	;'H'
   411  00FF23  3A                 	db	58	;':'
   412  00FF24  25                 	db	37
   413  00FF25  33                 	db	51	;'3'
   414  00FF26  73                 	db	115	;'s'
   415  00FF27  20                 	db	32
   416  00FF28  20                 	db	32
   417  00FF29  20                 	db	32
   418  00FF2A  20                 	db	32
   419  00FF2B  43                 	db	67	;'C'
   420  00FF2C  3A                 	db	58	;':'
   421  00FF2D  25                 	db	37
   422  00FF2E  33                 	db	51	;'3'
   423  00FF2F  73                 	db	115	;'s'
   424  00FF30  00                 	db	0
   425  00FF31                     STR_37:
   426                           
   427                           ; BSR set to: 1
   428  00FF31  25                 	db	37
   429  00FF32  2D                 	db	45
   430  00FF33  35                 	db	53	;'5'
   431  00FF34  73                 	db	115	;'s'
   432  00FF35  20                 	db	32
   433  00FF36  20                 	db	32
   434  00FF37  4D                 	db	77	;'M'
   435  00FF38  44                 	db	68	;'D'
   436  00FF39  3A                 	db	58	;':'
   437  00FF3A  25                 	db	37
   438  00FF3B  2D                 	db	45
   439  00FF3C  37                 	db	55	;'7'
   440  00FF3D  73                 	db	115	;'s'
   441  00FF3E  00                 	db	0
   442  00FF3F                     STR_40:
   443                           
   444                           ; BSR set to: 1
   445  00FF3F  61                 	db	97	;'a'
   446  00FF40  79                 	db	121	;'y'
   447  00FF41  61                 	db	97	;'a'
   448  00FF42  74                 	db	116	;'t'
   449  00FF43  20                 	db	32
   450  00FF44  74                 	db	116	;'t'
   451  00FF45  65                 	db	101	;'e'
   452  00FF46  6D                 	db	109	;'m'
   453  00FF47  61                 	db	97	;'a'
   454  00FF48  00                 	db	0
   455  00FF49                     STR_15:
   456                           
   457                           ; BSR set to: 1
   458  00FF49  44                 	db	68	;'D'
   459  00FF4A  30                 	db	48	;'0'
   460  00FF4B  3A                 	db	58	;':'
   461  00FF4C  4F                 	db	79	;'O'
   462  00FF4D  46                 	db	70	;'F'
   463  00FF4E  46                 	db	70	;'F'
   464  00FF4F  0A                 	db	10
   465  00FF50  00                 	db	0
   466  00FF51                     STR_17:
   467                           
   468                           ; BSR set to: 1
   469  00FF51  44                 	db	68	;'D'
   470  00FF52  31                 	db	49	;'1'
   471  00FF53  3A                 	db	58	;':'
   472  00FF54  4F                 	db	79	;'O'
   473  00FF55  46                 	db	70	;'F'
   474  00FF56  46                 	db	70	;'F'
   475  00FF57  0A                 	db	10
   476  00FF58  00                 	db	0
   477  00FF59                     STR_19:
   478                           
   479                           ; BSR set to: 1
   480  00FF59  44                 	db	68	;'D'
   481  00FF5A  32                 	db	50	;'2'
   482  00FF5B  3A                 	db	58	;':'
   483  00FF5C  4F                 	db	79	;'O'
   484  00FF5D  46                 	db	70	;'F'
   485  00FF5E  46                 	db	70	;'F'
   486  00FF5F  0A                 	db	10
   487  00FF60  00                 	db	0
   488  00FF61                     STR_21:
   489                           
   490                           ; BSR set to: 1
   491  00FF61  44                 	db	68	;'D'
   492  00FF62  33                 	db	51	;'3'
   493  00FF63  3A                 	db	58	;':'
   494  00FF64  4F                 	db	79	;'O'
   495  00FF65  46                 	db	70	;'F'
   496  00FF66  46                 	db	70	;'F'
   497  00FF67  0A                 	db	10
   498  00FF68  00                 	db	0
   499  00FF69                     STR_23:
   500                           
   501                           ; BSR set to: 1
   502  00FF69  44                 	db	68	;'D'
   503  00FF6A  34                 	db	52	;'4'
   504  00FF6B  3A                 	db	58	;':'
   505  00FF6C  4F                 	db	79	;'O'
   506  00FF6D  46                 	db	70	;'F'
   507  00FF6E  46                 	db	70	;'F'
   508  00FF6F  0A                 	db	10
   509  00FF70  00                 	db	0
   510  00FF71                     STR_25:
   511                           
   512                           ; BSR set to: 1
   513  00FF71  44                 	db	68	;'D'
   514  00FF72  35                 	db	53	;'5'
   515  00FF73  3A                 	db	58	;':'
   516  00FF74  4F                 	db	79	;'O'
   517  00FF75  46                 	db	70	;'F'
   518  00FF76  46                 	db	70	;'F'
   519  00FF77  0A                 	db	10
   520  00FF78  00                 	db	0
   521  00FF79                     STR_29:
   522                           
   523                           ; BSR set to: 1
   524  00FF79  44                 	db	68	;'D'
   525  00FF7A  37                 	db	55	;'7'
   526  00FF7B  3A                 	db	58	;':'
   527  00FF7C  4F                 	db	79	;'O'
   528  00FF7D  46                 	db	70	;'F'
   529  00FF7E  46                 	db	70	;'F'
   530  00FF7F  0A                 	db	10
   531  00FF80  00                 	db	0
   532  00FF81                     STR_7:
   533                           
   534                           ; BSR set to: 1
   535  00FF81  61                 	db	97	;'a'
   536  00FF82  6E                 	db	110	;'n'
   537  00FF83  30                 	db	48	;'0'
   538  00FF84  3D                 	db	61	;'='
   539  00FF85  25                 	db	37
   540  00FF86  66                 	db	102	;'f'
   541  00FF87  0A                 	db	10
   542  00FF88  00                 	db	0
   543  00FF89                     STR_8:
   544                           
   545                           ; BSR set to: 1
   546  00FF89  61                 	db	97	;'a'
   547  00FF8A  6E                 	db	110	;'n'
   548  00FF8B  31                 	db	49	;'1'
   549  00FF8C  3D                 	db	61	;'='
   550  00FF8D  25                 	db	37
   551  00FF8E  66                 	db	102	;'f'
   552  00FF8F  0A                 	db	10
   553  00FF90  00                 	db	0
   554  00FF91                     STR_9:
   555                           
   556                           ; BSR set to: 1
   557  00FF91  61                 	db	97	;'a'
   558  00FF92  6E                 	db	110	;'n'
   559  00FF93  32                 	db	50	;'2'
   560  00FF94  3D                 	db	61	;'='
   561  00FF95  25                 	db	37
   562  00FF96  66                 	db	102	;'f'
   563  00FF97  0A                 	db	10
   564  00FF98  00                 	db	0
   565  00FF99                     STR_5:
   566                           
   567                           ; BSR set to: 1
   568  00FF99  53                 	db	83	;'S'
   569  00FF9A  65                 	db	101	;'e'
   570  00FF9B  74                 	db	116	;'t'
   571  00FF9C  43                 	db	67	;'C'
   572  00FF9D  6C                 	db	108	;'l'
   573  00FF9E  6F                 	db	111	;'o'
   574  00FF9F  6B                 	db	107	;'k'
   575  00FFA0  00                 	db	0
   576  00FFA1                     STR_41:
   577                           
   578                           ; BSR set to: 1
   579  00FFA1  28                 	db	40
   580  00FFA2  6E                 	db	110	;'n'
   581  00FFA3  75                 	db	117	;'u'
   582  00FFA4  6C                 	db	108	;'l'
   583  00FFA5  6C                 	db	108	;'l'
   584  00FFA6  29                 	db	41
   585  00FFA7  00                 	db	0
   586  00FFA8                     STR_14:
   587                           
   588                           ; BSR set to: 1
   589  00FFA8  44                 	db	68	;'D'
   590  00FFA9  30                 	db	48	;'0'
   591  00FFAA  3A                 	db	58	;':'
   592  00FFAB  4F                 	db	79	;'O'
   593  00FFAC  4E                 	db	78	;'N'
   594  00FFAD  0A                 	db	10
   595  00FFAE  00                 	db	0
   596  00FFAF                     STR_16:
   597                           
   598                           ; BSR set to: 1
   599  00FFAF  44                 	db	68	;'D'
   600  00FFB0  31                 	db	49	;'1'
   601  00FFB1  3A                 	db	58	;':'
   602  00FFB2  4F                 	db	79	;'O'
   603  00FFB3  4E                 	db	78	;'N'
   604  00FFB4  0A                 	db	10
   605  00FFB5  00                 	db	0
   606  00FFB6                     STR_18:
   607                           
   608                           ; BSR set to: 1
   609  00FFB6  44                 	db	68	;'D'
   610  00FFB7  32                 	db	50	;'2'
   611  00FFB8  3A                 	db	58	;':'
   612  00FFB9  4F                 	db	79	;'O'
   613  00FFBA  4E                 	db	78	;'N'
   614  00FFBB  0A                 	db	10
   615  00FFBC  00                 	db	0
   616  00FFBD                     STR_20:
   617                           
   618                           ; BSR set to: 1
   619  00FFBD  44                 	db	68	;'D'
   620  00FFBE  33                 	db	51	;'3'
   621  00FFBF  3A                 	db	58	;':'
   622  00FFC0  4F                 	db	79	;'O'
   623  00FFC1  4E                 	db	78	;'N'
   624  00FFC2  0A                 	db	10
   625  00FFC3  00                 	db	0
   626  00FFC4                     STR_22:
   627                           
   628                           ; BSR set to: 1
   629  00FFC4  44                 	db	68	;'D'
   630  00FFC5  34                 	db	52	;'4'
   631  00FFC6  3A                 	db	58	;':'
   632  00FFC7  4F                 	db	79	;'O'
   633  00FFC8  4E                 	db	78	;'N'
   634  00FFC9  0A                 	db	10
   635  00FFCA  00                 	db	0
   636  00FFCB                     STR_24:
   637                           
   638                           ; BSR set to: 1
   639  00FFCB  44                 	db	68	;'D'
   640  00FFCC  35                 	db	53	;'5'
   641  00FFCD  3A                 	db	58	;':'
   642  00FFCE  4F                 	db	79	;'O'
   643  00FFCF  4E                 	db	78	;'N'
   644  00FFD0  0A                 	db	10
   645  00FFD1  00                 	db	0
   646  00FFD2                     STR_26:
   647                           
   648                           ; BSR set to: 1
   649  00FFD2  44                 	db	68	;'D'
   650  00FFD3  36                 	db	54	;'6'
   651  00FFD4  3A                 	db	58	;':'
   652  00FFD5  4F                 	db	79	;'O'
   653  00FFD6  4E                 	db	78	;'N'
   654  00FFD7  0A                 	db	10
   655  00FFD8  00                 	db	0
   656  00FFD9                     STR_28:
   657                           
   658                           ; BSR set to: 1
   659  00FFD9  44                 	db	68	;'D'
   660  00FFDA  37                 	db	55	;'7'
   661  00FFDB  3A                 	db	58	;':'
   662  00FFDC  4F                 	db	79	;'O'
   663  00FFDD  4E                 	db	78	;'N'
   664  00FFDE  0A                 	db	10
   665  00FFDF  00                 	db	0
   666  00FFE0                     STR_4:
   667                           
   668                           ; BSR set to: 1
   669  00FFE0  4E                 	db	78	;'N'
   670  00FFE1  6F                 	db	111	;'o'
   671  00FFE2  72                 	db	114	;'r'
   672  00FFE3  6D                 	db	109	;'m'
   673  00FFE4  61                 	db	97	;'a'
   674  00FFE5  6C                 	db	108	;'l'
   675  00FFE6  00                 	db	0
   676  00FFE7                     STR_39:
   677                           
   678                           ; BSR set to: 1
   679  00FFE7  25                 	db	37
   680  00FFE8  2D                 	db	45
   681  00FFE9  31                 	db	49	;'1'
   682  00FFEA  36                 	db	54	;'6'
   683  00FFEB  73                 	db	115	;'s'
   684  00FFEC  00                 	db	0
   685  00FFED                     STR_33:
   686                           
   687                           ; BSR set to: 1
   688  00FFED  4F                 	db	79	;'O'
   689  00FFEE  46                 	db	70	;'F'
   690  00FFEF  46                 	db	70	;'F'
   691  00FFF0  00                 	db	0
   692  00FFF1                     STR_1:
   693                           
   694                           ; BSR set to: 1
   695  00FFF1  53                 	db	83	;'S'
   696  00FFF2  65                 	db	101	;'e'
   697  00FFF3  63                 	db	99	;'c'
   698  00FFF4  00                 	db	0
   699  00FFF5                     STR_2:
   700                           
   701                           ; BSR set to: 1
   702  00FFF5  4D                 	db	77	;'M'
   703  00FFF6  69                 	db	105	;'i'
   704  00FFF7  6E                 	db	110	;'n'
   705  00FFF8  00                 	db	0
   706  00FFF9                     STR_32:
   707                           
   708                           ; BSR set to: 1
   709  00FFF9  4F                 	db	79	;'O'
   710  00FFFA  4E                 	db	78	;'N'
   711  00FFFB  00                 	db	0
   712  00FFFC                     STR_3:
   713                           
   714                           ; BSR set to: 1
   715  00FFFC  48                 	db	72	;'H'
   716  00FFFD  52                 	db	82	;'R'
   717  00FFFE  00                 	db	0
   718  0000                     
   719                           ; #config settings
   720  00FFFF  00                 	db	0	; dummy byte at the end
   721  0000                     
   722                           	psect	cinit
   723  002834                     __pcinit:
   724                           	opt stack 0
   725  002834                     start_initialization:
   726                           	opt stack 0
   727  002834                     __initialization:
   728                           	opt stack 0
   729                           
   730                           ; Initialize objects allocated to BANK1 (16 bytes)
   731                           ; load TBLPTR registers with __pidataBANK1
   732  002834  0EBC               	movlw	low __pidataBANK1
   733  002836  6EF6               	movwf	tblptrl,c
   734  002838  0E2F               	movlw	high __pidataBANK1
   735  00283A  6EF7               	movwf	tblptrh,c
   736  00283C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   737  00283E  6EF8               	movwf	tblptru,c
   738  002840  EE01  F06B         	lfsr	0,__pdataBANK1
   739  002844  EE10 F010          	lfsr	1,16
   740  002848                     copy_data0:
   741  002848  0009               	tblrd		*+
   742  00284A  CFF5 FFEE          	movff	tablat,postinc0
   743  00284E  50E5               	movf	postdec1,w,c
   744  002850  50E1               	movf	fsr1l,w,c
   745  002852  E1FA               	bnz	copy_data0
   746                           
   747                           ; Initialize objects allocated to BANK0 (4 bytes)
   748                           ; load TBLPTR registers with __pidataBANK0
   749  002854  0EF3               	movlw	low __pidataBANK0
   750  002856  6EF6               	movwf	tblptrl,c
   751  002858  0E2F               	movlw	high __pidataBANK0
   752  00285A  6EF7               	movwf	tblptrh,c
   753  00285C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   754  00285E  6EF8               	movwf	tblptru,c
   755  002860  EE00  F0CF         	lfsr	0,__pdataBANK0
   756  002864  EE10 F004          	lfsr	1,4
   757  002868                     copy_data1:
   758  002868  0009               	tblrd		*+
   759  00286A  CFF5 FFEE          	movff	tablat,postinc0
   760  00286E  50E5               	movf	postdec1,w,c
   761  002870  50E1               	movf	fsr1l,w,c
   762  002872  E1FA               	bnz	copy_data1
   763                           
   764                           ; Initialize objects allocated to COMRAM (11 bytes)
   765                           ; load TBLPTR registers with __pidataCOMRAM
   766  002874  0EE8               	movlw	low __pidataCOMRAM
   767  002876  6EF6               	movwf	tblptrl,c
   768  002878  0E2F               	movlw	high __pidataCOMRAM
   769  00287A  6EF7               	movwf	tblptrh,c
   770  00287C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   771  00287E  6EF8               	movwf	tblptru,c
   772  002880  EE00  F056         	lfsr	0,__pdataCOMRAM
   773  002884  EE10 F00B          	lfsr	1,11
   774  002888                     copy_data2:
   775  002888  0009               	tblrd		*+
   776  00288A  CFF5 FFEE          	movff	tablat,postinc0
   777  00288E  50E5               	movf	postdec1,w,c
   778  002890  50E1               	movf	fsr1l,w,c
   779  002892  E1FA               	bnz	copy_data2
   780                           
   781                           ; Clear objects allocated to BANK1 (26 bytes)
   782  002894  EE01  F051         	lfsr	0,__pbssBANK1
   783  002898  0E1A               	movlw	26
   784  00289A                     clear_0:
   785  00289A  6AEE               	clrf	postinc0,c
   786  00289C  06E8               	decf	wreg,f,c
   787  00289E  E1FD               	bnz	clear_0
   788                           
   789                           ; Clear objects allocated to COMRAM (9 bytes)
   790  0028A0  EE00  F061         	lfsr	0,__pbssCOMRAM
   791  0028A4  0E09               	movlw	9
   792  0028A6                     clear_1:
   793  0028A6  6AEE               	clrf	postinc0,c
   794  0028A8  06E8               	decf	wreg,f,c
   795  0028AA  E1FD               	bnz	clear_1
   796  0028AC                     end_of_initialization:
   797                           	opt stack 0
   798  0028AC                     __end_of__initialization:
   799                           	opt stack 0
   800  0028AC  906A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   801  0028AE  926A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   802  0028B0  0100               	movlb	0
   803  0028B2  EF25  F006         	goto	_main	;jump to C main() function
   804                           tblptru	equ	0xFF8
   805                           tblptrh	equ	0xFF7
   806                           tblptrl	equ	0xFF6
   807                           tablat	equ	0xFF5
   808                           postinc0	equ	0xFEE
   809                           wreg	equ	0xFE8
   810                           postdec1	equ	0xFE5
   811                           fsr1l	equ	0xFE1
   812                           
   813                           	psect	bssCOMRAM
   814  000061                     __pbssCOMRAM:
   815                           	opt stack 0
   816  000061                     _CountBeep:
   817                           	opt stack 0
   818  000061                     	ds	2
   819  000063                     _CookingTime:
   820                           	opt stack 0
   821  000063                     	ds	2
   822  000065                     _index:
   823                           	opt stack 0
   824  000065                     	ds	2
   825  000067                     _StopCooking:
   826                           	opt stack 0
   827  000067                     	ds	1
   828  000068                     _HeatON:
   829                           	opt stack 0
   830  000068                     	ds	1
   831  000069                     _ch:
   832                           	opt stack 0
   833  000069                     	ds	1
   834                           tblptru	equ	0xFF8
   835                           tblptrh	equ	0xFF7
   836                           tblptrl	equ	0xFF6
   837                           tablat	equ	0xFF5
   838                           postinc0	equ	0xFEE
   839                           wreg	equ	0xFE8
   840                           postdec1	equ	0xFE5
   841                           fsr1l	equ	0xFE1
   842                           
   843                           	psect	dataCOMRAM
   844  000056                     __pdataCOMRAM:
   845                           	opt stack 0
   846  000056                     _SetPoint:
   847                           	opt stack 0
   848  000056                     	ds	3
   849  000059                     _MaxCookTime:
   850                           	opt stack 0
   851  000059                     	ds	2
   852  00005B                     _MaxHour:
   853                           	opt stack 0
   854  00005B                     	ds	2
   855  00005D                     _H:
   856                           	opt stack 0
   857  00005D                     	ds	2
   858  00005F                     _max:
   859                           	opt stack 0
   860  00005F                     	ds	2
   861                           tblptru	equ	0xFF8
   862                           tblptrh	equ	0xFF7
   863                           tblptrl	equ	0xFF6
   864                           tablat	equ	0xFF5
   865                           postinc0	equ	0xFEE
   866                           wreg	equ	0xFE8
   867                           postdec1	equ	0xFE5
   868                           fsr1l	equ	0xFE1
   869                           
   870                           	psect	dataBANK0
   871  0000CF                     __pdataBANK0:
   872                           	opt stack 0
   873  0000CF                     _LCD_INIT_STRING:
   874                           	opt stack 0
   875  0000CF                     	ds	4
   876                           tblptru	equ	0xFF8
   877                           tblptrh	equ	0xFF7
   878                           tblptrl	equ	0xFF6
   879                           tablat	equ	0xFF5
   880                           postinc0	equ	0xFEE
   881                           wreg	equ	0xFE8
   882                           postdec1	equ	0xFE5
   883                           fsr1l	equ	0xFE1
   884                           
   885                           	psect	bssBANK1
   886  000151                     __pbssBANK1:
   887                           	opt stack 0
   888  000151                     _Clock:
   889                           	opt stack 0
   890  000151                     	ds	4
   891  000155                     _EnableHeat:
   892                           	opt stack 0
   893  000155                     	ds	1
   894  000156                     _ready:
   895                           	opt stack 0
   896  000156                     	ds	1
   897  000157                     _Flags:
   898                           	opt stack 0
   899  000157                     	ds	1
   900  000158                     _state_L4:
   901                           	opt stack 0
   902  000158                     	ds	1
   903  000159                     _IncMode:
   904                           	opt stack 0
   905  000159                     	ds	1
   906  00015A                     _state:
   907                           	opt stack 0
   908  00015A                     	ds	1
   909  00015B                     _array:
   910                           	opt stack 0
   911  00015B                     	ds	16
   912                           tblptru	equ	0xFF8
   913                           tblptrh	equ	0xFF7
   914                           tblptrl	equ	0xFF6
   915                           tablat	equ	0xFF5
   916                           postinc0	equ	0xFEE
   917                           wreg	equ	0xFE8
   918                           postdec1	equ	0xFE5
   919                           fsr1l	equ	0xFE1
   920                           
   921                           	psect	dataBANK1
   922  00016B                     __pdataBANK1:
   923                           	opt stack 0
   924  00016B                     _IncVal:
   925                           	opt stack 0
   926  00016B                     	ds	6
   927  000171                     _IncStr:
   928                           	opt stack 0
   929  000171                     	ds	6
   930  000177                     _StateStr:
   931                           	opt stack 0
   932  000177                     	ds	4
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           postdec1	equ	0xFE5
   940                           fsr1l	equ	0xFE1
   941                           
   942                           	psect	cstackBANK1
   943  000100                     __pcstackBANK1:
   944                           	opt stack 0
   945  000100                     main@Buffer:
   946                           	opt stack 0
   947                           
   948                           ; 32 bytes @ 0x0
   949  000100                     	ds	32
   950  000120                     main@voltage:
   951                           	opt stack 0
   952                           
   953                           ; 3 bytes @ 0x20
   954  000120                     	ds	3
   955  000123                     main@T:
   956                           	opt stack 0
   957                           
   958                           ; 3 bytes @ 0x23
   959  000123                     	ds	3
   960  000126                     main@readh:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x26
   964  000126                     	ds	2
   965  000128                     main@readc:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x28
   969  000128                     	ds	2
   970  00012A                     main@readd0:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x2A
   974  00012A                     	ds	2
   975  00012C                     main@readd1:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x2C
   979  00012C                     	ds	2
   980  00012E                     main@readd2:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x2E
   984  00012E                     	ds	2
   985  000130                     main@readd3:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x30
   989  000130                     	ds	2
   990  000132                     main@readd4:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x32
   994  000132                     	ds	2
   995  000134                     main@readd5:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x34
   999  000134                     	ds	2
  1000  000136                     main@readd6:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x36
  1004  000136                     	ds	2
  1005  000138                     main@readd7:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x38
  1009  000138                     	ds	2
  1010  00013A                     _main$1234:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x3A
  1014  00013A                     	ds	2
  1015  00013C                     _main$1235:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x3C
  1019  00013C                     	ds	2
  1020  00013E                     main@displayClock:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x3E
  1024  00013E                     	ds	1
  1025  00013F                     main@hr:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x3F
  1029  00013F                     	ds	2
  1030  000141                     main@min:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x41
  1034  000141                     	ds	2
  1035  000143                     main@sec:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x43
  1039  000143                     	ds	2
  1040  000145                     main@t:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x45
  1044  000145                     	ds	2
  1045  000147                     main@AN:
  1046                           	opt stack 0
  1047                           
  1048                           ; 9 bytes @ 0x47
  1049  000147                     	ds	9
  1050  000150                     main@channel:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x50
  1054  000150                     	ds	1
  1055                           tblptru	equ	0xFF8
  1056                           tblptrh	equ	0xFF7
  1057                           tblptrl	equ	0xFF6
  1058                           tablat	equ	0xFF5
  1059                           postinc0	equ	0xFEE
  1060                           wreg	equ	0xFE8
  1061                           postdec1	equ	0xFE5
  1062                           fsr1l	equ	0xFE1
  1063                           
  1064                           	psect	cstackBANK0
  1065  000080                     __pcstackBANK0:
  1066                           	opt stack 0
  1067  000080                     _fround$1910:
  1068                           	opt stack 0
  1069  000080                     _scale$1911:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x0
  1073  000080                     	ds	3
  1074  000083                     scale@scl:
  1075                           	opt stack 0
  1076  000083                     _fround$1909:
  1077                           	opt stack 0
  1078                           
  1079                           ; 3 bytes @ 0x3
  1080  000083                     	ds	1
  1081  000084                     ?___fttol:
  1082                           	opt stack 0
  1083  000084                     ___fttol@f1:
  1084                           	opt stack 0
  1085                           
  1086                           ; 3 bytes @ 0x4
  1087  000084                     	ds	2
  1088  000086                     fround@prec:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x6
  1092  000086                     	ds	1
  1093  000087                     ?___ftadd:
  1094                           	opt stack 0
  1095  000087                     ___ftadd@f1:
  1096                           	opt stack 0
  1097                           
  1098                           ; 3 bytes @ 0x7
  1099  000087                     	ds	1
  1100  000088                     ??___fttol:
  1101                           
  1102                           ; 1 bytes @ 0x8
  1103  000088                     	ds	2
  1104  00008A                     ___ftadd@f2:
  1105                           	opt stack 0
  1106                           
  1107                           ; 3 bytes @ 0xA
  1108  00008A                     	ds	3
  1109  00008D                     ??___ftadd:
  1110  00008D                     ___fttol@sign1:
  1111                           	opt stack 0
  1112                           
  1113                           ; 1 bytes @ 0xD
  1114  00008D                     	ds	1
  1115  00008E                     ___fttol@lval:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0xE
  1119  00008E                     	ds	2
  1120  000090                     ___ftadd@sign:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x10
  1124  000090                     	ds	1
  1125  000091                     ___ftadd@exp2:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x11
  1129  000091                     	ds	1
  1130  000092                     ___ftadd@exp1:
  1131                           	opt stack 0
  1132  000092                     ___fttol@exp1:
  1133                           	opt stack 0
  1134                           
  1135                           ; 1 bytes @ 0x12
  1136  000092                     	ds	1
  1137  000093                     ?___ftsub:
  1138                           	opt stack 0
  1139  000093                     ___ftsub@f1:
  1140                           	opt stack 0
  1141                           
  1142                           ; 3 bytes @ 0x13
  1143  000093                     	ds	3
  1144  000096                     ___ftsub@f2:
  1145                           	opt stack 0
  1146                           
  1147                           ; 3 bytes @ 0x16
  1148  000096                     	ds	3
  1149  000099                     ?_sprintf:
  1150                           	opt stack 0
  1151  000099                     sprintf@sp:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x19
  1155  000099                     	ds	2
  1156  00009B                     sprintf@f:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x1B
  1160  00009B                     	ds	11
  1161  0000A6                     ??_sprintf:
  1162                           
  1163                           ; 1 bytes @ 0x26
  1164  0000A6                     	ds	6
  1165  0000AC                     _sprintf$1912:
  1166                           	opt stack 0
  1167                           
  1168                           ; 3 bytes @ 0x2C
  1169  0000AC                     	ds	3
  1170  0000AF                     sprintf@cp:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x2F
  1174  0000AF                     	ds	2
  1175  0000B1                     sprintf@ap:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x31
  1179  0000B1                     	ds	2
  1180  0000B3                     sprintf@len:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x33
  1184  0000B3                     	ds	2
  1185  0000B5                     sprintf@tmpval:
  1186                           	opt stack 0
  1187                           
  1188                           ; 4 bytes @ 0x35
  1189  0000B5                     	ds	4
  1190  0000B9                     sprintf@val:
  1191                           	opt stack 0
  1192                           
  1193                           ; 4 bytes @ 0x39
  1194  0000B9                     	ds	4
  1195  0000BD                     sprintf@exp:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x3D
  1199  0000BD                     	ds	2
  1200  0000BF                     sprintf@fval:
  1201                           	opt stack 0
  1202                           
  1203                           ; 3 bytes @ 0x3F
  1204  0000BF                     	ds	3
  1205  0000C2                     sprintf@flag:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x42
  1209  0000C2                     	ds	2
  1210  0000C4                     sprintf@prec:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x44
  1214  0000C4                     	ds	2
  1215  0000C6                     sprintf@width:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x46
  1219  0000C6                     	ds	2
  1220  0000C8                     sprintf@c:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x48
  1224  0000C8                     	ds	1
  1225  0000C9                     ??_main:
  1226                           
  1227                           ; 1 bytes @ 0x49
  1228  0000C9                     	ds	6
  1229                           tblptru	equ	0xFF8
  1230                           tblptrh	equ	0xFF7
  1231                           tblptrl	equ	0xFF6
  1232                           tablat	equ	0xFF5
  1233                           postinc0	equ	0xFEE
  1234                           wreg	equ	0xFE8
  1235                           postdec1	equ	0xFE5
  1236                           fsr1l	equ	0xFE1
  1237                           
  1238                           	psect	cstackCOMRAM
  1239  000001                     __pcstackCOMRAM:
  1240                           	opt stack 0
  1241  000001                     ??_RX_ISR:
  1242  000001                     
  1243                           ; 1 bytes @ 0x0
  1244  000001                     	ds	1
  1245  000002                     ??_highIsr:
  1246                           
  1247                           ; 1 bytes @ 0x1
  1248  000002                     	ds	18
  1249  000014                     ??_isdigit:
  1250  000014                     ??_delay_cycles:
  1251  000014                     ?_read_adc_raw_no_lib:
  1252                           	opt stack 0
  1253  000014                     ?___awmod:
  1254                           	opt stack 0
  1255  000014                     ?___ftpack:
  1256                           	opt stack 0
  1257  000014                     ?___ftneg:
  1258                           	opt stack 0
  1259  000014                     ?__tdiv_to_l_:
  1260                           	opt stack 0
  1261  000014                     ?__div_to_l_:
  1262                           	opt stack 0
  1263  000014                     ?___aldiv:
  1264                           	opt stack 0
  1265  000014                     ?___almod:
  1266                           	opt stack 0
  1267  000014                     ?___lldiv:
  1268                           	opt stack 0
  1269  000014                     setupSerial@dummy:
  1270                           	opt stack 0
  1271  000014                     send_byte_no_lib@c:
  1272                           	opt stack 0
  1273  000014                     delay_ms@n:
  1274                           	opt stack 0
  1275  000014                     ___awmod@dividend:
  1276                           	opt stack 0
  1277  000014                     __div_to_l_@f1:
  1278                           	opt stack 0
  1279  000014                     ___ftpack@arg:
  1280                           	opt stack 0
  1281  000014                     __tdiv_to_l_@f1:
  1282                           	opt stack 0
  1283  000014                     ___ftge@ff1:
  1284                           	opt stack 0
  1285  000014                     ___ftneg@f1:
  1286                           	opt stack 0
  1287  000014                     ___aldiv@dividend:
  1288                           	opt stack 0
  1289  000014                     ___almod@dividend:
  1290                           	opt stack 0
  1291  000014                     ___lldiv@dividend:
  1292                           	opt stack 0
  1293                           
  1294                           ; 4 bytes @ 0x13
  1295  000014                     	ds	1
  1296  000015                     _isdigit$1523:
  1297                           	opt stack 0
  1298  000015                     send_string_no_lib@p:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x14
  1302  000015                     	ds	1
  1303  000016                     ??_read_adc_raw_no_lib:
  1304  000016                     isdigit@c:
  1305                           	opt stack 0
  1306  000016                     delay_ms@x:
  1307                           	opt stack 0
  1308  000016                     ___awmod@divisor:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x15
  1312  000016                     	ds	1
  1313  000017                     delay_cycles@n:
  1314                           	opt stack 0
  1315  000017                     ___ftpack@exp:
  1316                           	opt stack 0
  1317  000017                     __div_to_l_@f2:
  1318                           	opt stack 0
  1319  000017                     __tdiv_to_l_@f2:
  1320                           	opt stack 0
  1321  000017                     ___ftge@ff2:
  1322                           	opt stack 0
  1323                           
  1324                           ; 3 bytes @ 0x16
  1325  000017                     	ds	1
  1326  000018                     ___awmod@counter:
  1327                           	opt stack 0
  1328  000018                     ___ftpack@sign:
  1329                           	opt stack 0
  1330  000018                     delay_cycles@x:
  1331                           	opt stack 0
  1332  000018                     read_adc_raw_no_lib@raw_value:
  1333                           	opt stack 0
  1334  000018                     ___aldiv@divisor:
  1335                           	opt stack 0
  1336  000018                     ___almod@divisor:
  1337                           	opt stack 0
  1338  000018                     ___lldiv@divisor:
  1339                           	opt stack 0
  1340                           
  1341                           ; 4 bytes @ 0x17
  1342  000018                     	ds	1
  1343  000019                     ??___ftpack:
  1344  000019                     ___awmod@sign:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x18
  1348  000019                     	ds	1
  1349  00001A                     ??__tdiv_to_l_:
  1350  00001A                     ??_lcd_send_nibble:
  1351  00001A                     ??___ftge:
  1352  00001A                     ?___awdiv:
  1353                           	opt stack 0
  1354  00001A                     read_adc_raw_no_lib@channel:
  1355                           	opt stack 0
  1356  00001A                     ___awdiv@dividend:
  1357                           	opt stack 0
  1358  00001A                     __div_to_l_@quot:
  1359                           	opt stack 0
  1360                           
  1361                           ; 4 bytes @ 0x19
  1362  00001A                     	ds	1
  1363  00001B                     lcd_send_nibble@n:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x1A
  1367  00001B                     	ds	1
  1368  00001C                     ?___lltoft:
  1369                           	opt stack 0
  1370  00001C                     lcd_send_byte@n:
  1371                           	opt stack 0
  1372  00001C                     ___aldiv@counter:
  1373                           	opt stack 0
  1374  00001C                     ___almod@counter:
  1375                           	opt stack 0
  1376  00001C                     ___awdiv@divisor:
  1377                           	opt stack 0
  1378  00001C                     ___lldiv@quotient:
  1379                           	opt stack 0
  1380  00001C                     ___lltoft@c:
  1381                           	opt stack 0
  1382                           
  1383                           ; 4 bytes @ 0x1B
  1384  00001C                     	ds	1
  1385  00001D                     lcd_send_byte@cm_data:
  1386                           	opt stack 0
  1387  00001D                     ___aldiv@sign:
  1388                           	opt stack 0
  1389  00001D                     ___almod@sign:
  1390                           	opt stack 0
  1391  00001D                     __tdiv_to_l_@quot:
  1392                           	opt stack 0
  1393                           
  1394                           ; 4 bytes @ 0x1C
  1395  00001D                     	ds	1
  1396  00001E                     lcd_init@i:
  1397                           	opt stack 0
  1398  00001E                     lcd_gotoxy@y:
  1399                           	opt stack 0
  1400  00001E                     ___awdiv@counter:
  1401                           	opt stack 0
  1402  00001E                     __div_to_l_@cntr:
  1403                           	opt stack 0
  1404  00001E                     ___aldiv@quotient:
  1405                           	opt stack 0
  1406                           
  1407                           ; 4 bytes @ 0x1D
  1408  00001E                     	ds	1
  1409  00001F                     lcd_gotoxy@x:
  1410                           	opt stack 0
  1411  00001F                     ___awdiv@sign:
  1412                           	opt stack 0
  1413  00001F                     __div_to_l_@exp1:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0x1E
  1417  00001F                     	ds	1
  1418  000020                     ??___lltoft:
  1419  000020                     lcd_gotoxy@address:
  1420                           	opt stack 0
  1421  000020                     ___lldiv@counter:
  1422                           	opt stack 0
  1423  000020                     ___awdiv@quotient:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x1F
  1427  000020                     	ds	1
  1428  000021                     ?___llmod:
  1429                           	opt stack 0
  1430  000021                     lcd_putc@c:
  1431                           	opt stack 0
  1432  000021                     __tdiv_to_l_@cntr:
  1433                           	opt stack 0
  1434  000021                     ___llmod@dividend:
  1435                           	opt stack 0
  1436                           
  1437                           ; 4 bytes @ 0x20
  1438  000021                     	ds	1
  1439  000022                     ?___wmul:
  1440                           	opt stack 0
  1441  000022                     __tdiv_to_l_@exp1:
  1442                           	opt stack 0
  1443  000022                     lcd_puts@s:
  1444                           	opt stack 0
  1445  000022                     ___wmul@multiplier:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x21
  1449  000022                     	ds	2
  1450  000024                     ___lltoft@exp:
  1451                           	opt stack 0
  1452  000024                     ___wmul@multiplicand:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x23
  1456  000024                     	ds	1
  1457  000025                     ___llmod@divisor:
  1458                           	opt stack 0
  1459                           
  1460                           ; 4 bytes @ 0x24
  1461  000025                     	ds	1
  1462  000026                     ___wmul@product:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x25
  1466  000026                     	ds	2
  1467  000028                     ?___awtoft:
  1468                           	opt stack 0
  1469  000028                     ___awtoft@c:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x27
  1473  000028                     	ds	1
  1474  000029                     ___llmod@counter:
  1475                           	opt stack 0
  1476                           
  1477                           ; 1 bytes @ 0x28
  1478  000029                     	ds	2
  1479  00002B                     ___awtoft@sign:
  1480                           	opt stack 0
  1481                           
  1482                           ; 1 bytes @ 0x2A
  1483  00002B                     	ds	1
  1484  00002C                     ?___ftdiv:
  1485                           	opt stack 0
  1486  00002C                     ___ftdiv@f1:
  1487                           	opt stack 0
  1488                           
  1489                           ; 3 bytes @ 0x2B
  1490  00002C                     	ds	3
  1491  00002F                     ___ftdiv@f2:
  1492                           	opt stack 0
  1493                           
  1494                           ; 3 bytes @ 0x2E
  1495  00002F                     	ds	3
  1496  000032                     ??___ftdiv:
  1497                           
  1498                           ; 1 bytes @ 0x31
  1499  000032                     	ds	3
  1500  000035                     ___ftdiv@cntr:
  1501                           	opt stack 0
  1502                           
  1503                           ; 1 bytes @ 0x34
  1504  000035                     	ds	1
  1505  000036                     ___ftdiv@f3:
  1506                           	opt stack 0
  1507                           
  1508                           ; 3 bytes @ 0x35
  1509  000036                     	ds	3
  1510  000039                     ___ftdiv@exp:
  1511                           	opt stack 0
  1512                           
  1513                           ; 1 bytes @ 0x38
  1514  000039                     	ds	1
  1515  00003A                     ___ftdiv@sign:
  1516                           	opt stack 0
  1517                           
  1518                           ; 1 bytes @ 0x39
  1519  00003A                     	ds	1
  1520  00003B                     ?_read_adc_voltage:
  1521                           	opt stack 0
  1522                           
  1523                           ; 3 bytes @ 0x3A
  1524  00003B                     	ds	3
  1525  00003E                     read_adc_voltage@voltage:
  1526                           	opt stack 0
  1527                           
  1528                           ; 3 bytes @ 0x3D
  1529  00003E                     	ds	3
  1530  000041                     read_adc_voltage@channel:
  1531                           	opt stack 0
  1532                           
  1533                           ; 1 bytes @ 0x40
  1534  000041                     	ds	1
  1535  000042                     read_adc_voltage@raw_value:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0x41
  1539  000042                     	ds	2
  1540  000044                     ?___ftmul:
  1541                           	opt stack 0
  1542  000044                     ___ftmul@f1:
  1543                           	opt stack 0
  1544                           
  1545                           ; 3 bytes @ 0x43
  1546  000044                     	ds	3
  1547  000047                     ___ftmul@f2:
  1548                           	opt stack 0
  1549                           
  1550                           ; 3 bytes @ 0x46
  1551  000047                     	ds	3
  1552  00004A                     ??___ftmul:
  1553                           
  1554                           ; 1 bytes @ 0x49
  1555  00004A                     	ds	3
  1556  00004D                     ___ftmul@exp:
  1557                           	opt stack 0
  1558                           
  1559                           ; 1 bytes @ 0x4C
  1560  00004D                     	ds	1
  1561  00004E                     ___ftmul@f3_as_product:
  1562                           	opt stack 0
  1563                           
  1564                           ; 3 bytes @ 0x4D
  1565  00004E                     	ds	3
  1566  000051                     ___ftmul@cntr:
  1567                           	opt stack 0
  1568                           
  1569                           ; 1 bytes @ 0x50
  1570  000051                     	ds	1
  1571  000052                     ___ftmul@sign:
  1572                           	opt stack 0
  1573                           
  1574                           ; 1 bytes @ 0x51
  1575  000052                     	ds	1
  1576  000053                     ?_fround:
  1577                           	opt stack 0
  1578  000053                     ?_scale:
  1579                           	opt stack 0
  1580                           
  1581                           ; 3 bytes @ 0x52
  1582  000053                     	ds	3
  1583  000056                     tblptru	equ	0xFF8
  1584                           tblptrh	equ	0xFF7
  1585                           tblptrl	equ	0xFF6
  1586                           tablat	equ	0xFF5
  1587                           postinc0	equ	0xFEE
  1588                           wreg	equ	0xFE8
  1589                           postdec1	equ	0xFE5
  1590                           fsr1l	equ	0xFE1
  1591                           
  1592                           ; 1 bytes @ 0x55
  1593 ;;
  1594 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1595 ;;
  1596 ;; *************** function _main *****************
  1597 ;; Defined at:
  1598 ;;		line 307 in file "HW_CLK.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;		None
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  Buffer         32    0[BANK1 ] unsigned char [32]
  1603 ;;  AN              9   71[BANK1 ] float [3]
  1604 ;;  T               3   35[BANK1 ] float 
  1605 ;;  voltage         3   32[BANK1 ] float 
  1606 ;;  t               2   69[BANK1 ] int 
  1607 ;;  sec             2   67[BANK1 ] int 
  1608 ;;  min             2   65[BANK1 ] int 
  1609 ;;  hr              2   63[BANK1 ] int 
  1610 ;;  readd7          2   56[BANK1 ] int 
  1611 ;;  readd6          2   54[BANK1 ] int 
  1612 ;;  readd5          2   52[BANK1 ] int 
  1613 ;;  readd4          2   50[BANK1 ] int 
  1614 ;;  readd3          2   48[BANK1 ] int 
  1615 ;;  readd2          2   46[BANK1 ] int 
  1616 ;;  readd1          2   44[BANK1 ] int 
  1617 ;;  readd0          2   42[BANK1 ] int 
  1618 ;;  readc           2   40[BANK1 ] int 
  1619 ;;  readh           2   38[BANK1 ] int 
  1620 ;;  raw_val         2    0        int 
  1621 ;;  m               2    0        int 
  1622 ;;  channel         1   80[BANK1 ] unsigned char 
  1623 ;;  displayClock    1   62[BANK1 ] unsigned char 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      void 
  1626 ;; Registers used:
  1627 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1634 ;;      Locals:         0       0      81       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1635 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1636 ;;      Totals:         0       6      81       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1637 ;;Total ram usage:       87 bytes
  1638 ;; Hardware stack levels required when called:    8
  1639 ;; This function calls:
  1640 ;;		___aldiv
  1641 ;;		___almod
  1642 ;;		___awdiv
  1643 ;;		___awmod
  1644 ;;		___ftmul
  1645 ;;		_delay_ms
  1646 ;;		_initTimers01
  1647 ;;		_init_adc_no_lib
  1648 ;;		_lcd_gotoxy
  1649 ;;		_lcd_init
  1650 ;;		_lcd_putc
  1651 ;;		_lcd_puts
  1652 ;;		_read_adc_voltage
  1653 ;;		_send_string_no_lib
  1654 ;;		_setupPorts
  1655 ;;		_setupSerial
  1656 ;;		_sprintf
  1657 ;; This function is called by:
  1658 ;;		Startup code after reset
  1659 ;; This function uses a non-reentrant model
  1660 ;;
  1661                           
  1662                           	psect	text0
  1663  000C4A                     __ptext0:
  1664                           	opt stack 0
  1665  000C4A                     _main:
  1666                           	opt stack 23
  1667                           
  1668                           ;HW_CLK.c: 308: int m;
  1669                           ;HW_CLK.c: 309: char Buffer[32];
  1670                           ;HW_CLK.c: 310: float AN[3];
  1671                           ;HW_CLK.c: 311: int raw_val;
  1672                           ;HW_CLK.c: 312: unsigned char channel;
  1673                           ;HW_CLK.c: 313: float voltage;
  1674                           ;HW_CLK.c: 314: setupPorts();
  1675                           
  1676                           ;incstack = 0
  1677  000C4A  ECAD  F017         	call	_setupPorts	;wreg free
  1678                           
  1679                           ;HW_CLK.c: 315: setupSerial();
  1680  000C4E  EC69  F017         	call	_setupSerial	;wreg free
  1681                           
  1682                           ;HW_CLK.c: 316: lcd_init();
  1683  000C52  EC7A  F015         	call	_lcd_init	;wreg free
  1684                           
  1685                           ;HW_CLK.c: 317: init_adc_no_lib();
  1686  000C56  ECEE  F017         	call	_init_adc_no_lib	;wreg free
  1687                           
  1688                           ;HW_CLK.c: 318: int readh =PORTCbits.RC5;
  1689  000C5A  AA82               	btfss	3970,5,c	;volatile
  1690  000C5C  D004               	goto	u7430
  1691  000C5E  0100               	movlb	0	; () banked
  1692  000C60  6BC9               	clrf	??_main& (0+255),b
  1693  000C62  2BC9               	incf	??_main& (0+255),f,b
  1694  000C64  D002               	goto	u7438
  1695  000C66                     u7430:
  1696  000C66  0100               	movlb	0	; () banked
  1697  000C68  6BC9               	clrf	??_main& (0+255),b
  1698  000C6A                     u7438:
  1699  000C6A  51C9               	movf	??_main& (0+255),w,b
  1700  000C6C  0101               	movlb	1	; () banked
  1701  000C6E  6F26               	movwf	main@readh& (0+255),b
  1702  000C70  6B27               	clrf	(main@readh+1)& (0+255),b
  1703                           
  1704                           ; BSR set to: 1
  1705                           ;HW_CLK.c: 321: int readc =PORTCbits.RC2;
  1706  000C72  A482               	btfss	3970,2,c	;volatile
  1707  000C74  D004               	goto	u7440
  1708  000C76  0100               	movlb	0	; () banked
  1709  000C78  6BC9               	clrf	??_main& (0+255),b
  1710  000C7A  2BC9               	incf	??_main& (0+255),f,b
  1711  000C7C  D002               	goto	u7448
  1712  000C7E                     u7440:
  1713  000C7E  0100               	movlb	0	; () banked
  1714  000C80  6BC9               	clrf	??_main& (0+255),b
  1715  000C82                     u7448:
  1716  000C82  51C9               	movf	??_main& (0+255),w,b
  1717  000C84  0101               	movlb	1	; () banked
  1718  000C86  6F28               	movwf	main@readc& (0+255),b
  1719  000C88  6B29               	clrf	(main@readc+1)& (0+255),b
  1720                           
  1721                           ; BSR set to: 1
  1722                           ;HW_CLK.c: 322: int readd0 =0;
  1723  000C8A  0E00               	movlw	0
  1724  000C8C  6F2B               	movwf	(main@readd0+1)& (0+255),b
  1725  000C8E  0E00               	movlw	0
  1726  000C90  6F2A               	movwf	main@readd0& (0+255),b
  1727                           
  1728                           ; BSR set to: 1
  1729                           ;HW_CLK.c: 323: int readd1=0;
  1730  000C92  0E00               	movlw	0
  1731  000C94  6F2D               	movwf	(main@readd1+1)& (0+255),b
  1732  000C96  0E00               	movlw	0
  1733  000C98  6F2C               	movwf	main@readd1& (0+255),b
  1734                           
  1735                           ; BSR set to: 1
  1736                           ;HW_CLK.c: 324: int readd2=0 ;
  1737  000C9A  0E00               	movlw	0
  1738  000C9C  6F2F               	movwf	(main@readd2+1)& (0+255),b
  1739  000C9E  0E00               	movlw	0
  1740  000CA0  6F2E               	movwf	main@readd2& (0+255),b
  1741                           
  1742                           ; BSR set to: 1
  1743                           ;HW_CLK.c: 325: int readd3=0 ;
  1744  000CA2  0E00               	movlw	0
  1745  000CA4  6F31               	movwf	(main@readd3+1)& (0+255),b
  1746  000CA6  0E00               	movlw	0
  1747  000CA8  6F30               	movwf	main@readd3& (0+255),b
  1748                           
  1749                           ; BSR set to: 1
  1750                           ;HW_CLK.c: 326: int readd4 =0;
  1751  000CAA  0E00               	movlw	0
  1752  000CAC  6F33               	movwf	(main@readd4+1)& (0+255),b
  1753  000CAE  0E00               	movlw	0
  1754  000CB0  6F32               	movwf	main@readd4& (0+255),b
  1755                           
  1756                           ; BSR set to: 1
  1757                           ;HW_CLK.c: 327: int readd5 =0;
  1758  000CB2  0E00               	movlw	0
  1759  000CB4  6F35               	movwf	(main@readd5+1)& (0+255),b
  1760  000CB6  0E00               	movlw	0
  1761  000CB8  6F34               	movwf	main@readd5& (0+255),b
  1762                           
  1763                           ; BSR set to: 1
  1764                           ;HW_CLK.c: 328: int readd6 =0;
  1765  000CBA  0E00               	movlw	0
  1766  000CBC  6F37               	movwf	(main@readd6+1)& (0+255),b
  1767  000CBE  0E00               	movlw	0
  1768  000CC0  6F36               	movwf	main@readd6& (0+255),b
  1769                           
  1770                           ; BSR set to: 1
  1771                           ;HW_CLK.c: 329: int readd7 =0;
  1772  000CC2  0E00               	movlw	0
  1773  000CC4  6F39               	movwf	(main@readd7+1)& (0+255),b
  1774  000CC6  0E00               	movlw	0
  1775  000CC8  6F38               	movwf	main@readd7& (0+255),b
  1776                           
  1777                           ; BSR set to: 1
  1778                           ;HW_CLK.c: 335: lcd_putc('\f');
  1779  000CCA  0E0C               	movlw	12
  1780  000CCC  EC04  F016         	call	_lcd_putc
  1781                           
  1782                           ;HW_CLK.c: 336: initTimers01();
  1783  000CD0  EC2F  F016         	call	_initTimers01	;wreg free
  1784                           
  1785                           ;HW_CLK.c: 337: EnableHeat = 0;
  1786  000CD4  0E00               	movlw	0
  1787  000CD6  0101               	movlb	1	; () banked
  1788  000CD8  6F55               	movwf	_EnableHeat& (0+255),b
  1789                           
  1790                           ; BSR set to: 1
  1791                           ;HW_CLK.c: 338: Flags.byt =0;
  1792  000CDA  0E00               	movlw	0
  1793  000CDC  6F57               	movwf	_Flags& (0+255),b
  1794                           
  1795                           ; BSR set to: 1
  1796                           ;HW_CLK.c: 339: float T = read_adc_voltage(2)*100;
  1797  000CDE  0E02               	movlw	2
  1798  000CE0  EC47  F015         	call	_read_adc_voltage
  1799  000CE4  C03B  F044         	movff	?_read_adc_voltage,___ftmul@f1
  1800  000CE8  C03C  F045         	movff	?_read_adc_voltage+1,___ftmul@f1+1
  1801  000CEC  C03D  F046         	movff	?_read_adc_voltage+2,___ftmul@f1+2
  1802  000CF0  0E00               	movlw	0
  1803  000CF2  6E47               	movwf	___ftmul@f2,c
  1804  000CF4  0EC8               	movlw	200
  1805  000CF6  6E48               	movwf	___ftmul@f2+1,c
  1806  000CF8  0E42               	movlw	66
  1807  000CFA  6E49               	movwf	___ftmul@f2+2,c
  1808  000CFC  EC2E  F011         	call	___ftmul	;wreg free
  1809  000D00  C044  F123         	movff	?___ftmul,main@T
  1810  000D04  C045  F124         	movff	?___ftmul+1,main@T+1
  1811  000D08  C046  F125         	movff	?___ftmul+2,main@T+2
  1812                           
  1813                           ;HW_CLK.c: 340: int hr, min, sec, t;
  1814                           ;HW_CLK.c: 341: char displayClock = 0;
  1815  000D0C  0E00               	movlw	0
  1816  000D0E  0101               	movlb	1	; () banked
  1817  000D10  6F3E               	movwf	main@displayClock& (0+255),b
  1818  000D12                     l311:
  1819                           
  1820                           ; BSR set to: 1
  1821  000D12  0004               	clrwdt		;# 
  1822                           
  1823                           ;HW_CLK.c: 348: if (ready) {
  1824  000D14  0101               	movlb	1	; () banked
  1825  000D16  5156               	movf	_ready& (0+255),w,b
  1826  000D18  B4D8               	btfsc	status,2,c
  1827  000D1A  D7FB               	goto	l311
  1828                           
  1829                           ; BSR set to: 1
  1830                           ;HW_CLK.c: 349: lcd_gotoxy(1, 4);
  1831  000D1C  0E04               	movlw	4
  1832  000D1E  6E1E               	movwf	lcd_gotoxy@y,c
  1833  000D20  0E01               	movlw	1
  1834  000D22  ECC0  F016         	call	_lcd_gotoxy
  1835                           
  1836                           ;HW_CLK.c: 351: lcd_puts(array);
  1837  000D26  0E5B               	movlw	low _array
  1838  000D28  6E22               	movwf	lcd_puts@s,c
  1839  000D2A  0E01               	movlw	high _array
  1840  000D2C  6E23               	movwf	lcd_puts@s+1,c
  1841  000D2E  EC7B  F017         	call	_lcd_puts	;wreg free
  1842                           
  1843                           ;HW_CLK.c: 352: if ((array[1] == 'R') && (array[2] == 't') && (array[3] == '>')) {
  1844  000D32  0E52               	movlw	82
  1845  000D34  0101               	movlb	1	; () banked
  1846  000D36  195C               	xorwf	(_array+1)& (0+255),w,b
  1847  000D38  A4D8               	btfss	status,2,c
  1848  000D3A  D026               	goto	l313
  1849                           
  1850                           ; BSR set to: 1
  1851  000D3C  0E74               	movlw	116
  1852  000D3E  195D               	xorwf	(_array+2)& (0+255),w,b
  1853  000D40  A4D8               	btfss	status,2,c
  1854  000D42  D022               	goto	l313
  1855                           
  1856                           ; BSR set to: 1
  1857  000D44  0E3E               	movlw	62
  1858  000D46  195E               	xorwf	(_array+3)& (0+255),w,b
  1859  000D48  A4D8               	btfss	status,2,c
  1860  000D4A  D01E               	goto	l313
  1861                           
  1862                           ; BSR set to: 1
  1863                           ;HW_CLK.c: 353: sprintf(Buffer, "Time:%02d:%02d:%02d\n ", hr, min, sec);
  1864  000D4C  0E00               	movlw	low main@Buffer
  1865  000D4E  0100               	movlb	0	; () banked
  1866  000D50  6F99               	movwf	sprintf@sp& (0+255),b
  1867  000D52  0E01               	movlw	high main@Buffer
  1868  000D54  6F9A               	movwf	(sprintf@sp+1)& (0+255),b
  1869  000D56  0ED1               	movlw	low STR_6
  1870  000D58  6F9B               	movwf	sprintf@f& (0+255),b
  1871  000D5A  0EFE               	movlw	high STR_6
  1872  000D5C  6F9C               	movwf	(sprintf@f+1)& (0+255),b
  1873  000D5E  C13F  F09D         	movff	main@hr,?_sprintf+4
  1874  000D62  C140  F09E         	movff	main@hr+1,?_sprintf+5
  1875  000D66  C141  F09F         	movff	main@min,?_sprintf+6
  1876  000D6A  C142  F0A0         	movff	main@min+1,?_sprintf+7
  1877  000D6E  C143  F0A1         	movff	main@sec,?_sprintf+8
  1878  000D72  C144  F0A2         	movff	main@sec+1,?_sprintf+9
  1879  000D76  EC09  F000         	call	_sprintf	;wreg free
  1880                           
  1881                           ;HW_CLK.c: 357: send_string_no_lib(Buffer);
  1882  000D7A  0E00               	movlw	low main@Buffer
  1883  000D7C  6E15               	movwf	send_string_no_lib@p,c
  1884  000D7E  0E01               	movlw	high main@Buffer
  1885  000D80  6E16               	movwf	send_string_no_lib@p+1,c
  1886  000D82  ECD9  F015         	call	_send_string_no_lib	;wreg free
  1887                           
  1888                           ;HW_CLK.c: 358: }
  1889  000D86  D276               	goto	l394
  1890  000D88                     l313:
  1891                           
  1892                           ;HW_CLK.c: 359: else if ((array[1] == 'R') && (array[2] == 'A') && (array[4] == '>')) {
  1893  000D88  0E52               	movlw	82
  1894  000D8A  0101               	movlb	1	; () banked
  1895  000D8C  195C               	xorwf	(_array+1)& (0+255),w,b
  1896  000D8E  A4D8               	btfss	status,2,c
  1897  000D90  D05D               	goto	l315
  1898                           
  1899                           ; BSR set to: 1
  1900  000D92  0E41               	movlw	65
  1901  000D94  195D               	xorwf	(_array+2)& (0+255),w,b
  1902  000D96  A4D8               	btfss	status,2,c
  1903  000D98  D059               	goto	l315
  1904                           
  1905                           ; BSR set to: 1
  1906  000D9A  0E3E               	movlw	62
  1907  000D9C  195F               	xorwf	(_array+4)& (0+255),w,b
  1908  000D9E  B4D8               	btfsc	status,2,c
  1909  000DA0  D049               	goto	l316
  1910  000DA2  D054               	goto	l315
  1911  000DA4                     
  1912                           ; BSR set to: 1
  1913                           ;HW_CLK.c: 363: sprintf(Buffer, "an0=%f\n", AN[0]);
  1914                           
  1915                           ; BSR set to: 1
  1916  000DA4  0E00               	movlw	low main@Buffer
  1917  000DA6  0100               	movlb	0	; () banked
  1918  000DA8  6F99               	movwf	sprintf@sp& (0+255),b
  1919  000DAA  0E01               	movlw	high main@Buffer
  1920  000DAC  6F9A               	movwf	(sprintf@sp+1)& (0+255),b
  1921  000DAE  0E81               	movlw	low STR_7
  1922  000DB0  6F9B               	movwf	sprintf@f& (0+255),b
  1923  000DB2  0EFF               	movlw	high STR_7
  1924  000DB4  6F9C               	movwf	(sprintf@f+1)& (0+255),b
  1925  000DB6  C147  F09D         	movff	main@AN,?_sprintf+4
  1926  000DBA  C148  F09E         	movff	main@AN+1,?_sprintf+5
  1927  000DBE  C149  F09F         	movff	main@AN+2,?_sprintf+6
  1928  000DC2  EC09  F000         	call	_sprintf	;wreg free
  1929                           
  1930                           ;HW_CLK.c: 364: send_string_no_lib(Buffer);
  1931  000DC6  0E00               	movlw	low main@Buffer
  1932  000DC8  6E15               	movwf	send_string_no_lib@p,c
  1933  000DCA  0E01               	movlw	high main@Buffer
  1934  000DCC  6E16               	movwf	send_string_no_lib@p+1,c
  1935  000DCE  ECD9  F015         	call	_send_string_no_lib	;wreg free
  1936                           
  1937                           ;HW_CLK.c: 365: break;
  1938  000DD2  D250               	goto	l394
  1939  000DD4                     
  1940                           ;HW_CLK.c: 367: sprintf(Buffer, "an1=%f\n", AN[1]);
  1941  000DD4  0E00               	movlw	low main@Buffer
  1942  000DD6  0100               	movlb	0	; () banked
  1943  000DD8  6F99               	movwf	sprintf@sp& (0+255),b
  1944  000DDA  0E01               	movlw	high main@Buffer
  1945  000DDC  6F9A               	movwf	(sprintf@sp+1)& (0+255),b
  1946  000DDE  0E89               	movlw	low STR_8
  1947  000DE0  6F9B               	movwf	sprintf@f& (0+255),b
  1948  000DE2  0EFF               	movlw	high STR_8
  1949  000DE4  6F9C               	movwf	(sprintf@f+1)& (0+255),b
  1950  000DE6  C14A  F09D         	movff	main@AN+3,?_sprintf+4
  1951  000DEA  C14B  F09E         	movff	main@AN+4,?_sprintf+5
  1952  000DEE  C14C  F09F         	movff	main@AN+5,?_sprintf+6
  1953  000DF2  EC09  F000         	call	_sprintf	;wreg free
  1954                           
  1955                           ;HW_CLK.c: 368: send_string_no_lib(Buffer);
  1956  000DF6  0E00               	movlw	low main@Buffer
  1957  000DF8  6E15               	movwf	send_string_no_lib@p,c
  1958  000DFA  0E01               	movlw	high main@Buffer
  1959  000DFC  6E16               	movwf	send_string_no_lib@p+1,c
  1960  000DFE  ECD9  F015         	call	_send_string_no_lib	;wreg free
  1961                           
  1962                           ;HW_CLK.c: 369: break;
  1963  000E02  D238               	goto	l394
  1964  000E04                     
  1965                           ;HW_CLK.c: 371: sprintf(Buffer, "an2=%f\n", AN[2]);
  1966  000E04  0E00               	movlw	low main@Buffer
  1967  000E06  0100               	movlb	0	; () banked
  1968  000E08  6F99               	movwf	sprintf@sp& (0+255),b
  1969  000E0A  0E01               	movlw	high main@Buffer
  1970  000E0C  6F9A               	movwf	(sprintf@sp+1)& (0+255),b
  1971  000E0E  0E91               	movlw	low STR_9
  1972  000E10  6F9B               	movwf	sprintf@f& (0+255),b
  1973  000E12  0EFF               	movlw	high STR_9
  1974  000E14  6F9C               	movwf	(sprintf@f+1)& (0+255),b
  1975  000E16  C14D  F09D         	movff	main@AN+6,?_sprintf+4
  1976  000E1A  C14E  F09E         	movff	main@AN+7,?_sprintf+5
  1977  000E1E  C14F  F09F         	movff	main@AN+8,?_sprintf+6
  1978  000E22  EC09  F000         	call	_sprintf	;wreg free
  1979                           
  1980                           ;HW_CLK.c: 372: send_string_no_lib(Buffer);
  1981  000E26  0E00               	movlw	low main@Buffer
  1982  000E28  6E15               	movwf	send_string_no_lib@p,c
  1983  000E2A  0E01               	movlw	high main@Buffer
  1984  000E2C  6E16               	movwf	send_string_no_lib@p+1,c
  1985  000E2E  ECD9  F015         	call	_send_string_no_lib	;wreg free
  1986                           
  1987                           ;HW_CLK.c: 374: }
  1988                           
  1989                           ;HW_CLK.c: 373: break;
  1990  000E32  D220               	goto	l394
  1991  000E34                     l316:
  1992  000E34  0101               	movlb	1	; () banked
  1993  000E36  515E               	movf	(_array+3)& (0+255),w,b
  1994                           
  1995                           ; Switch size 1, requested type "space"
  1996                           ; Number of cases is 3, Range of values is 48 to 50
  1997                           ; switch strategies available:
  1998                           ; Name         Instructions Cycles
  1999                           ; simple_byte           10     6 (average)
  2000                           ;	Chosen strategy is simple_byte
  2001  000E38  0A30               	xorlw	48	; case 48
  2002  000E3A  B4D8               	btfsc	status,2,c
  2003  000E3C  D7B3               	goto	l317
  2004  000E3E  0A01               	xorlw	1	; case 49
  2005  000E40  B4D8               	btfsc	status,2,c
  2006  000E42  D7C8               	goto	l319
  2007  000E44  0A03               	xorlw	3	; case 50
  2008  000E46  B4D8               	btfsc	status,2,c
  2009  000E48  D7DD               	goto	l320
  2010                           
  2011                           ; BSR set to: 1
  2012                           ;HW_CLK.c: 375: }
  2013  000E4A  D214               	goto	l394
  2014  000E4C                     l315:
  2015                           
  2016                           ; BSR set to: 1
  2017                           ;HW_CLK.c: 376: else if ((array[1] == 'R' && (array[3] == '>'))) {
  2018                           
  2019                           ; BSR set to: 1
  2020  000E4C  0E52               	movlw	82
  2021  000E4E  195C               	xorwf	(_array+1)& (0+255),w,b
  2022  000E50  A4D8               	btfss	status,2,c
  2023  000E52  D136               	goto	l322
  2024                           
  2025                           ; BSR set to: 1
  2026  000E54  0E3E               	movlw	62
  2027  000E56  195E               	xorwf	(_array+3)& (0+255),w,b
  2028  000E58  B4D8               	btfsc	status,2,c
  2029  000E5A  D126               	goto	l323
  2030  000E5C  D131               	goto	l322
  2031  000E5E                     
  2032                           ; BSR set to: 1
  2033                           ;HW_CLK.c: 379: readh = PORTCbits.RC5;
  2034                           
  2035                           ; BSR set to: 1
  2036  000E5E  AA82               	btfss	3970,5,c	;volatile
  2037  000E60  D004               	goto	u7540
  2038  000E62  0100               	movlb	0	; () banked
  2039  000E64  6BC9               	clrf	??_main& (0+255),b
  2040  000E66  2BC9               	incf	??_main& (0+255),f,b
  2041  000E68  D002               	goto	u7548
  2042  000E6A                     u7540:
  2043  000E6A  0100               	movlb	0	; () banked
  2044  000E6C  6BC9               	clrf	??_main& (0+255),b
  2045  000E6E                     u7548:
  2046  000E6E  51C9               	movf	??_main& (0+255),w,b
  2047  000E70  0101               	movlb	1	; () banked
  2048  000E72  6F26               	movwf	main@readh& (0+255),b
  2049  000E74  6B27               	clrf	(main@readh+1)& (0+255),b
  2050                           
  2051                           ; BSR set to: 1
  2052                           ;HW_CLK.c: 380: if (readh == 1)
  2053  000E76  0526               	decf	main@readh& (0+255),w,b
  2054  000E78  1127               	iorwf	(main@readh+1)& (0+255),w,b
  2055  000E7A  A4D8               	btfss	status,2,c
  2056  000E7C  D007               	goto	l325
  2057                           
  2058                           ; BSR set to: 1
  2059                           ;HW_CLK.c: 381: send_string_no_lib("ON\n");
  2060  000E7E  0EAB               	movlw	low (STR_14+3)
  2061  000E80  6E15               	movwf	send_string_no_lib@p,c
  2062  000E82  0EFF               	movlw	high (STR_14+3)
  2063  000E84  6E16               	movwf	send_string_no_lib@p+1,c
  2064  000E86  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2065  000E8A  D1F4               	goto	l394
  2066  000E8C                     l325:
  2067                           
  2068                           ;HW_CLK.c: 382: else
  2069                           ;HW_CLK.c: 383: send_string_no_lib("OFF\n");
  2070  000E8C  0E4C               	movlw	low (STR_15+3)
  2071  000E8E  6E15               	movwf	send_string_no_lib@p,c
  2072  000E90  0EFF               	movlw	high (STR_15+3)
  2073  000E92  6E16               	movwf	send_string_no_lib@p+1,c
  2074  000E94  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2075                           
  2076                           ;HW_CLK.c: 384: break;
  2077  000E98  D1ED               	goto	l394
  2078  000E9A                     
  2079                           ;HW_CLK.c: 386: readc = PORTCbits.RC2;
  2080  000E9A  A482               	btfss	3970,2,c	;volatile
  2081  000E9C  D004               	goto	u7560
  2082  000E9E  0100               	movlb	0	; () banked
  2083  000EA0  6BC9               	clrf	??_main& (0+255),b
  2084  000EA2  2BC9               	incf	??_main& (0+255),f,b
  2085  000EA4  D002               	goto	u7568
  2086  000EA6                     u7560:
  2087  000EA6  0100               	movlb	0	; () banked
  2088  000EA8  6BC9               	clrf	??_main& (0+255),b
  2089  000EAA                     u7568:
  2090  000EAA  51C9               	movf	??_main& (0+255),w,b
  2091  000EAC  0101               	movlb	1	; () banked
  2092  000EAE  6F28               	movwf	main@readc& (0+255),b
  2093  000EB0  6B29               	clrf	(main@readc+1)& (0+255),b
  2094                           
  2095                           ; BSR set to: 1
  2096                           ;HW_CLK.c: 387: if (readc == 1)
  2097  000EB2  0528               	decf	main@readc& (0+255),w,b
  2098  000EB4  1129               	iorwf	(main@readc+1)& (0+255),w,b
  2099  000EB6  A4D8               	btfss	status,2,c
  2100  000EB8  D007               	goto	l329
  2101                           
  2102                           ; BSR set to: 1
  2103                           ;HW_CLK.c: 388: send_string_no_lib("ON\n");
  2104  000EBA  0EAB               	movlw	low (STR_14+3)
  2105  000EBC  6E15               	movwf	send_string_no_lib@p,c
  2106  000EBE  0EFF               	movlw	high (STR_14+3)
  2107  000EC0  6E16               	movwf	send_string_no_lib@p+1,c
  2108  000EC2  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2109  000EC6  D1D6               	goto	l394
  2110  000EC8                     l329:
  2111                           
  2112                           ;HW_CLK.c: 389: else
  2113                           ;HW_CLK.c: 390: send_string_no_lib("OFF\n");
  2114  000EC8  0E4C               	movlw	low (STR_15+3)
  2115  000ECA  6E15               	movwf	send_string_no_lib@p,c
  2116  000ECC  0EFF               	movlw	high (STR_15+3)
  2117  000ECE  6E16               	movwf	send_string_no_lib@p+1,c
  2118  000ED0  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2119                           
  2120                           ;HW_CLK.c: 391: break;
  2121  000ED4  D1CF               	goto	l394
  2122  000ED6                     
  2123                           ;HW_CLK.c: 393: readd0 = PORTDbits.RD0;
  2124  000ED6  A083               	btfss	3971,0,c	;volatile
  2125  000ED8  D004               	goto	u7580
  2126  000EDA  0100               	movlb	0	; () banked
  2127  000EDC  6BC9               	clrf	??_main& (0+255),b
  2128  000EDE  2BC9               	incf	??_main& (0+255),f,b
  2129  000EE0  D002               	goto	u7588
  2130  000EE2                     u7580:
  2131  000EE2  0100               	movlb	0	; () banked
  2132  000EE4  6BC9               	clrf	??_main& (0+255),b
  2133  000EE6                     u7588:
  2134  000EE6  51C9               	movf	??_main& (0+255),w,b
  2135  000EE8  0101               	movlb	1	; () banked
  2136  000EEA  6F2A               	movwf	main@readd0& (0+255),b
  2137  000EEC  6B2B               	clrf	(main@readd0+1)& (0+255),b
  2138                           
  2139                           ; BSR set to: 1
  2140                           ;HW_CLK.c: 394: if (readd0 == 1)
  2141  000EEE  052A               	decf	main@readd0& (0+255),w,b
  2142  000EF0  112B               	iorwf	(main@readd0+1)& (0+255),w,b
  2143  000EF2  A4D8               	btfss	status,2,c
  2144  000EF4  D007               	goto	l332
  2145                           
  2146                           ; BSR set to: 1
  2147                           ;HW_CLK.c: 395: send_string_no_lib("D0:ON\n");
  2148  000EF6  0EA8               	movlw	low STR_14
  2149  000EF8  6E15               	movwf	send_string_no_lib@p,c
  2150  000EFA  0EFF               	movlw	high STR_14
  2151  000EFC  6E16               	movwf	send_string_no_lib@p+1,c
  2152  000EFE  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2153  000F02  D006               	goto	l333
  2154  000F04                     l332:
  2155                           
  2156                           ;HW_CLK.c: 396: else
  2157                           ;HW_CLK.c: 397: send_string_no_lib("D0:OFF\n");
  2158  000F04  0E49               	movlw	low STR_15
  2159  000F06  6E15               	movwf	send_string_no_lib@p,c
  2160  000F08  0EFF               	movlw	high STR_15
  2161  000F0A  6E16               	movwf	send_string_no_lib@p+1,c
  2162  000F0C  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2163  000F10                     l333:
  2164                           
  2165                           ;HW_CLK.c: 399: readd1 = PORTDbits.RD1;
  2166  000F10  A283               	btfss	3971,1,c	;volatile
  2167  000F12  D004               	goto	u7600
  2168  000F14  0100               	movlb	0	; () banked
  2169  000F16  6BC9               	clrf	??_main& (0+255),b
  2170  000F18  2BC9               	incf	??_main& (0+255),f,b
  2171  000F1A  D002               	goto	u7608
  2172  000F1C                     u7600:
  2173  000F1C  0100               	movlb	0	; () banked
  2174  000F1E  6BC9               	clrf	??_main& (0+255),b
  2175  000F20                     u7608:
  2176  000F20  51C9               	movf	??_main& (0+255),w,b
  2177  000F22  0101               	movlb	1	; () banked
  2178  000F24  6F2C               	movwf	main@readd1& (0+255),b
  2179  000F26  6B2D               	clrf	(main@readd1+1)& (0+255),b
  2180                           
  2181                           ; BSR set to: 1
  2182                           ;HW_CLK.c: 400: if (readd1 == 1)
  2183  000F28  052C               	decf	main@readd1& (0+255),w,b
  2184  000F2A  112D               	iorwf	(main@readd1+1)& (0+255),w,b
  2185  000F2C  A4D8               	btfss	status,2,c
  2186  000F2E  D007               	goto	l334
  2187                           
  2188                           ; BSR set to: 1
  2189                           ;HW_CLK.c: 401: send_string_no_lib("D1:ON\n");
  2190  000F30  0EAF               	movlw	low STR_16
  2191  000F32  6E15               	movwf	send_string_no_lib@p,c
  2192  000F34  0EFF               	movlw	high STR_16
  2193  000F36  6E16               	movwf	send_string_no_lib@p+1,c
  2194  000F38  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2195  000F3C  D006               	goto	l335
  2196  000F3E                     l334:
  2197                           
  2198                           ;HW_CLK.c: 402: else
  2199                           ;HW_CLK.c: 403: send_string_no_lib("D1:OFF\n");
  2200  000F3E  0E51               	movlw	low STR_17
  2201  000F40  6E15               	movwf	send_string_no_lib@p,c
  2202  000F42  0EFF               	movlw	high STR_17
  2203  000F44  6E16               	movwf	send_string_no_lib@p+1,c
  2204  000F46  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2205  000F4A                     l335:
  2206                           
  2207                           ;HW_CLK.c: 405: readd2 = PORTDbits.RD2;
  2208  000F4A  A483               	btfss	3971,2,c	;volatile
  2209  000F4C  D004               	goto	u7620
  2210  000F4E  0100               	movlb	0	; () banked
  2211  000F50  6BC9               	clrf	??_main& (0+255),b
  2212  000F52  2BC9               	incf	??_main& (0+255),f,b
  2213  000F54  D002               	goto	u7628
  2214  000F56                     u7620:
  2215  000F56  0100               	movlb	0	; () banked
  2216  000F58  6BC9               	clrf	??_main& (0+255),b
  2217  000F5A                     u7628:
  2218  000F5A  51C9               	movf	??_main& (0+255),w,b
  2219  000F5C  0101               	movlb	1	; () banked
  2220  000F5E  6F2E               	movwf	main@readd2& (0+255),b
  2221  000F60  6B2F               	clrf	(main@readd2+1)& (0+255),b
  2222                           
  2223                           ; BSR set to: 1
  2224                           ;HW_CLK.c: 406: if (readd2 == 1)
  2225  000F62  052E               	decf	main@readd2& (0+255),w,b
  2226  000F64  112F               	iorwf	(main@readd2+1)& (0+255),w,b
  2227  000F66  A4D8               	btfss	status,2,c
  2228  000F68  D007               	goto	l336
  2229                           
  2230                           ; BSR set to: 1
  2231                           ;HW_CLK.c: 407: send_string_no_lib("D2:ON\n");
  2232  000F6A  0EB6               	movlw	low STR_18
  2233  000F6C  6E15               	movwf	send_string_no_lib@p,c
  2234  000F6E  0EFF               	movlw	high STR_18
  2235  000F70  6E16               	movwf	send_string_no_lib@p+1,c
  2236  000F72  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2237  000F76  D006               	goto	l337
  2238  000F78                     l336:
  2239                           
  2240                           ;HW_CLK.c: 408: else
  2241                           ;HW_CLK.c: 409: send_string_no_lib("D2:OFF\n");
  2242  000F78  0E59               	movlw	low STR_19
  2243  000F7A  6E15               	movwf	send_string_no_lib@p,c
  2244  000F7C  0EFF               	movlw	high STR_19
  2245  000F7E  6E16               	movwf	send_string_no_lib@p+1,c
  2246  000F80  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2247  000F84                     l337:
  2248                           
  2249                           ;HW_CLK.c: 411: readd3 = PORTCbits.RC3;
  2250  000F84  A682               	btfss	3970,3,c	;volatile
  2251  000F86  D004               	goto	u7640
  2252  000F88  0100               	movlb	0	; () banked
  2253  000F8A  6BC9               	clrf	??_main& (0+255),b
  2254  000F8C  2BC9               	incf	??_main& (0+255),f,b
  2255  000F8E  D002               	goto	u7648
  2256  000F90                     u7640:
  2257  000F90  0100               	movlb	0	; () banked
  2258  000F92  6BC9               	clrf	??_main& (0+255),b
  2259  000F94                     u7648:
  2260  000F94  51C9               	movf	??_main& (0+255),w,b
  2261  000F96  0101               	movlb	1	; () banked
  2262  000F98  6F30               	movwf	main@readd3& (0+255),b
  2263  000F9A  6B31               	clrf	(main@readd3+1)& (0+255),b
  2264                           
  2265                           ; BSR set to: 1
  2266                           ;HW_CLK.c: 412: if (readd3 == 1)
  2267  000F9C  0530               	decf	main@readd3& (0+255),w,b
  2268  000F9E  1131               	iorwf	(main@readd3+1)& (0+255),w,b
  2269  000FA0  A4D8               	btfss	status,2,c
  2270  000FA2  D007               	goto	l338
  2271                           
  2272                           ; BSR set to: 1
  2273                           ;HW_CLK.c: 413: send_string_no_lib("D3:ON\n");
  2274  000FA4  0EBD               	movlw	low STR_20
  2275  000FA6  6E15               	movwf	send_string_no_lib@p,c
  2276  000FA8  0EFF               	movlw	high STR_20
  2277  000FAA  6E16               	movwf	send_string_no_lib@p+1,c
  2278  000FAC  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2279  000FB0  D006               	goto	l339
  2280  000FB2                     l338:
  2281                           
  2282                           ;HW_CLK.c: 414: else
  2283                           ;HW_CLK.c: 415: send_string_no_lib("D3:OFF\n");
  2284  000FB2  0E61               	movlw	low STR_21
  2285  000FB4  6E15               	movwf	send_string_no_lib@p,c
  2286  000FB6  0EFF               	movlw	high STR_21
  2287  000FB8  6E16               	movwf	send_string_no_lib@p+1,c
  2288  000FBA  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2289  000FBE                     l339:
  2290                           
  2291                           ;HW_CLK.c: 417: readd4 = PORTDbits.RD4;
  2292  000FBE  A883               	btfss	3971,4,c	;volatile
  2293  000FC0  D004               	goto	u7660
  2294  000FC2  0100               	movlb	0	; () banked
  2295  000FC4  6BC9               	clrf	??_main& (0+255),b
  2296  000FC6  2BC9               	incf	??_main& (0+255),f,b
  2297  000FC8  D002               	goto	u7668
  2298  000FCA                     u7660:
  2299  000FCA  0100               	movlb	0	; () banked
  2300  000FCC  6BC9               	clrf	??_main& (0+255),b
  2301  000FCE                     u7668:
  2302  000FCE  51C9               	movf	??_main& (0+255),w,b
  2303  000FD0  0101               	movlb	1	; () banked
  2304  000FD2  6F32               	movwf	main@readd4& (0+255),b
  2305  000FD4  6B33               	clrf	(main@readd4+1)& (0+255),b
  2306                           
  2307                           ; BSR set to: 1
  2308                           ;HW_CLK.c: 418: if (readd4 == 1)
  2309  000FD6  0532               	decf	main@readd4& (0+255),w,b
  2310  000FD8  1133               	iorwf	(main@readd4+1)& (0+255),w,b
  2311  000FDA  A4D8               	btfss	status,2,c
  2312  000FDC  D007               	goto	l340
  2313                           
  2314                           ; BSR set to: 1
  2315                           ;HW_CLK.c: 419: send_string_no_lib("D4:ON\n");
  2316  000FDE  0EC4               	movlw	low STR_22
  2317  000FE0  6E15               	movwf	send_string_no_lib@p,c
  2318  000FE2  0EFF               	movlw	high STR_22
  2319  000FE4  6E16               	movwf	send_string_no_lib@p+1,c
  2320  000FE6  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2321  000FEA  D006               	goto	l341
  2322  000FEC                     l340:
  2323                           
  2324                           ;HW_CLK.c: 420: else
  2325                           ;HW_CLK.c: 421: send_string_no_lib("D4:OFF\n");
  2326  000FEC  0E69               	movlw	low STR_23
  2327  000FEE  6E15               	movwf	send_string_no_lib@p,c
  2328  000FF0  0EFF               	movlw	high STR_23
  2329  000FF2  6E16               	movwf	send_string_no_lib@p+1,c
  2330  000FF4  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2331  000FF8                     l341:
  2332                           
  2333                           ;HW_CLK.c: 423: readd5 = PORTDbits.RD5;
  2334  000FF8  AA83               	btfss	3971,5,c	;volatile
  2335  000FFA  D004               	goto	u7680
  2336  000FFC  0100               	movlb	0	; () banked
  2337  000FFE  6BC9               	clrf	??_main& (0+255),b
  2338  001000  2BC9               	incf	??_main& (0+255),f,b
  2339  001002  D002               	goto	u7688
  2340  001004                     u7680:
  2341  001004  0100               	movlb	0	; () banked
  2342  001006  6BC9               	clrf	??_main& (0+255),b
  2343  001008                     u7688:
  2344  001008  51C9               	movf	??_main& (0+255),w,b
  2345  00100A  0101               	movlb	1	; () banked
  2346  00100C  6F34               	movwf	main@readd5& (0+255),b
  2347  00100E  6B35               	clrf	(main@readd5+1)& (0+255),b
  2348                           
  2349                           ; BSR set to: 1
  2350                           ;HW_CLK.c: 424: if (readd5 == 1)
  2351  001010  0534               	decf	main@readd5& (0+255),w,b
  2352  001012  1135               	iorwf	(main@readd5+1)& (0+255),w,b
  2353  001014  A4D8               	btfss	status,2,c
  2354  001016  D007               	goto	l342
  2355                           
  2356                           ; BSR set to: 1
  2357                           ;HW_CLK.c: 425: send_string_no_lib("D5:ON\n");
  2358  001018  0ECB               	movlw	low STR_24
  2359  00101A  6E15               	movwf	send_string_no_lib@p,c
  2360  00101C  0EFF               	movlw	high STR_24
  2361  00101E  6E16               	movwf	send_string_no_lib@p+1,c
  2362  001020  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2363  001024  D006               	goto	l343
  2364  001026                     l342:
  2365                           
  2366                           ;HW_CLK.c: 426: else
  2367                           ;HW_CLK.c: 427: send_string_no_lib("D5:OFF\n");
  2368  001026  0E71               	movlw	low STR_25
  2369  001028  6E15               	movwf	send_string_no_lib@p,c
  2370  00102A  0EFF               	movlw	high STR_25
  2371  00102C  6E16               	movwf	send_string_no_lib@p+1,c
  2372  00102E  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2373  001032                     l343:
  2374                           
  2375                           ;HW_CLK.c: 428: readd6 = PORTDbits.RD6;
  2376  001032  AC83               	btfss	3971,6,c	;volatile
  2377  001034  D004               	goto	u7700
  2378  001036  0100               	movlb	0	; () banked
  2379  001038  6BC9               	clrf	??_main& (0+255),b
  2380  00103A  2BC9               	incf	??_main& (0+255),f,b
  2381  00103C  D002               	goto	u7708
  2382  00103E                     u7700:
  2383  00103E  0100               	movlb	0	; () banked
  2384  001040  6BC9               	clrf	??_main& (0+255),b
  2385  001042                     u7708:
  2386  001042  51C9               	movf	??_main& (0+255),w,b
  2387  001044  0101               	movlb	1	; () banked
  2388  001046  6F36               	movwf	main@readd6& (0+255),b
  2389  001048  6B37               	clrf	(main@readd6+1)& (0+255),b
  2390                           
  2391                           ; BSR set to: 1
  2392                           ;HW_CLK.c: 429: if (readd6 == 1)
  2393  00104A  0536               	decf	main@readd6& (0+255),w,b
  2394  00104C  1137               	iorwf	(main@readd6+1)& (0+255),w,b
  2395  00104E  A4D8               	btfss	status,2,c
  2396  001050  D007               	goto	l344
  2397                           
  2398                           ; BSR set to: 1
  2399                           ;HW_CLK.c: 430: send_string_no_lib("D6:ON\n");
  2400  001052  0ED2               	movlw	low STR_26
  2401  001054  6E15               	movwf	send_string_no_lib@p,c
  2402  001056  0EFF               	movlw	high STR_26
  2403  001058  6E16               	movwf	send_string_no_lib@p+1,c
  2404  00105A  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2405  00105E  D006               	goto	l345
  2406  001060                     l344:
  2407                           
  2408                           ;HW_CLK.c: 431: else
  2409                           ;HW_CLK.c: 432: send_string_no_lib("D4:OFF\n");
  2410  001060  0E69               	movlw	low STR_23
  2411  001062  6E15               	movwf	send_string_no_lib@p,c
  2412  001064  0EFF               	movlw	high STR_23
  2413  001066  6E16               	movwf	send_string_no_lib@p+1,c
  2414  001068  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2415  00106C                     l345:
  2416                           
  2417                           ;HW_CLK.c: 433: readd7 = PORTDbits.RD7;
  2418  00106C  AE83               	btfss	3971,7,c	;volatile
  2419  00106E  D004               	goto	u7720
  2420  001070  0100               	movlb	0	; () banked
  2421  001072  6BC9               	clrf	??_main& (0+255),b
  2422  001074  2BC9               	incf	??_main& (0+255),f,b
  2423  001076  D002               	goto	u7728
  2424  001078                     u7720:
  2425  001078  0100               	movlb	0	; () banked
  2426  00107A  6BC9               	clrf	??_main& (0+255),b
  2427  00107C                     u7728:
  2428  00107C  51C9               	movf	??_main& (0+255),w,b
  2429  00107E  0101               	movlb	1	; () banked
  2430  001080  6F38               	movwf	main@readd7& (0+255),b
  2431  001082  6B39               	clrf	(main@readd7+1)& (0+255),b
  2432                           
  2433                           ; BSR set to: 1
  2434                           ;HW_CLK.c: 434: if (readd7 == 1)
  2435  001084  0538               	decf	main@readd7& (0+255),w,b
  2436  001086  1139               	iorwf	(main@readd7+1)& (0+255),w,b
  2437  001088  A4D8               	btfss	status,2,c
  2438  00108A  D007               	goto	l346
  2439                           
  2440                           ; BSR set to: 1
  2441                           ;HW_CLK.c: 435: send_string_no_lib("D7:ON\n");
  2442  00108C  0ED9               	movlw	low STR_28
  2443  00108E  6E15               	movwf	send_string_no_lib@p,c
  2444  001090  0EFF               	movlw	high STR_28
  2445  001092  6E16               	movwf	send_string_no_lib@p+1,c
  2446  001094  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2447  001098  D0ED               	goto	l394
  2448  00109A                     l346:
  2449                           
  2450                           ;HW_CLK.c: 436: else
  2451                           ;HW_CLK.c: 437: send_string_no_lib("D7:OFF\n");
  2452  00109A  0E79               	movlw	low STR_29
  2453  00109C  6E15               	movwf	send_string_no_lib@p,c
  2454  00109E  0EFF               	movlw	high STR_29
  2455  0010A0  6E16               	movwf	send_string_no_lib@p+1,c
  2456  0010A2  ECD9  F015         	call	_send_string_no_lib	;wreg free
  2457                           
  2458                           ;HW_CLK.c: 439: }
  2459                           
  2460                           ;HW_CLK.c: 438: break;
  2461  0010A6  D0E6               	goto	l394
  2462  0010A8                     l323:
  2463  0010A8  0101               	movlb	1	; () banked
  2464  0010AA  515D               	movf	(_array+2)& (0+255),w,b
  2465                           
  2466                           ; Switch size 1, requested type "space"
  2467                           ; Number of cases is 3, Range of values is 67 to 72
  2468                           ; switch strategies available:
  2469                           ; Name         Instructions Cycles
  2470                           ; simple_byte           10     6 (average)
  2471                           ;	Chosen strategy is simple_byte
  2472  0010AC  0A43               	xorlw	67	; case 67
  2473  0010AE  B4D8               	btfsc	status,2,c
  2474  0010B0  D6F4               	goto	l328
  2475  0010B2  0A07               	xorlw	7	; case 68
  2476  0010B4  B4D8               	btfsc	status,2,c
  2477  0010B6  D70F               	goto	l331
  2478  0010B8  0A0C               	xorlw	12	; case 72
  2479  0010BA  B4D8               	btfsc	status,2,c
  2480  0010BC  D6D0               	goto	l324
  2481                           
  2482                           ; BSR set to: 1
  2483                           ;HW_CLK.c: 440: }
  2484  0010BE  D0DA               	goto	l394
  2485  0010C0                     l322:
  2486                           
  2487                           ; BSR set to: 1
  2488                           ;HW_CLK.c: 441: else if ((array[1] == 'W') && (array[2] == 'H') && (array[3] == 'V') && 
      +                          (array[5] == '>')) {
  2489                           
  2490                           ; BSR set to: 1
  2491  0010C0  0E57               	movlw	87
  2492  0010C2  195C               	xorwf	(_array+1)& (0+255),w,b
  2493  0010C4  A4D8               	btfss	status,2,c
  2494  0010C6  D00C               	goto	l349
  2495                           
  2496                           ; BSR set to: 1
  2497  0010C8  0E48               	movlw	72
  2498  0010CA  195D               	xorwf	(_array+2)& (0+255),w,b
  2499  0010CC  A4D8               	btfss	status,2,c
  2500  0010CE  D008               	goto	l349
  2501                           
  2502                           ; BSR set to: 1
  2503  0010D0  0E56               	movlw	86
  2504  0010D2  195E               	xorwf	(_array+3)& (0+255),w,b
  2505  0010D4  A4D8               	btfss	status,2,c
  2506  0010D6  D004               	goto	l349
  2507                           
  2508                           ; BSR set to: 1
  2509  0010D8  0E3E               	movlw	62
  2510  0010DA  1960               	xorwf	(_array+5)& (0+255),w,b
  2511  0010DC  B4D8               	btfsc	status,2,c
  2512                           
  2513                           ; BSR set to: 1
  2514                           ;HW_CLK.c: 449: }
  2515                           
  2516                           ;HW_CLK.c: 448: break;
  2517                           
  2518                           ; BSR set to: 1
  2519                           ;HW_CLK.c: 447: PORTCbits.RC5 = 1;
  2520                           
  2521                           ;HW_CLK.c: 446: case '1':
  2522                           
  2523                           ;HW_CLK.c: 445: break;
  2524                           
  2525                           ; BSR set to: 1
  2526                           ;HW_CLK.c: 444: PORTCbits.RC5 = 0;
  2527                           
  2528                           ;HW_CLK.c: 443: case '0':
  2529                           
  2530                           ; BSR set to: 1
  2531                           ;HW_CLK.c: 442: switch (array[4]) {
  2532  0010DE  D032               	goto	l362
  2533  0010E0                     l349:
  2534                           
  2535                           ; BSR set to: 1
  2536                           ;HW_CLK.c: 451: else if ((array[1] == 'W') && (array[2] == 'C') && (array[3] == 'V') && 
      +                          (array[5] == '>')) {
  2537                           
  2538                           ; BSR set to: 1
  2539  0010E0  0E57               	movlw	87
  2540  0010E2  195C               	xorwf	(_array+1)& (0+255),w,b
  2541  0010E4  A4D8               	btfss	status,2,c
  2542  0010E6  D019               	goto	l355
  2543                           
  2544                           ; BSR set to: 1
  2545  0010E8  0E43               	movlw	67
  2546  0010EA  195D               	xorwf	(_array+2)& (0+255),w,b
  2547  0010EC  A4D8               	btfss	status,2,c
  2548  0010EE  D015               	goto	l355
  2549                           
  2550                           ; BSR set to: 1
  2551  0010F0  0E56               	movlw	86
  2552  0010F2  195E               	xorwf	(_array+3)& (0+255),w,b
  2553  0010F4  A4D8               	btfss	status,2,c
  2554  0010F6  D011               	goto	l355
  2555                           
  2556                           ; BSR set to: 1
  2557  0010F8  0E3E               	movlw	62
  2558  0010FA  1960               	xorwf	(_array+5)& (0+255),w,b
  2559  0010FC  B4D8               	btfsc	status,2,c
  2560  0010FE  D005               	goto	l356
  2561  001100  D00C               	goto	l355
  2562  001102                     l357:
  2563                           
  2564                           ; BSR set to: 1
  2565                           ;HW_CLK.c: 454: PORTCbits.RC2 = 0;
  2566  001102  9482               	bcf	3970,2,c	;volatile
  2567                           
  2568                           ;HW_CLK.c: 455: break;
  2569  001104  D0B7               	goto	l394
  2570  001106                     l359:
  2571                           
  2572                           ; BSR set to: 1
  2573                           ;HW_CLK.c: 457: PORTCbits.RC2 = 1;
  2574  001106  8482               	bsf	3970,2,c	;volatile
  2575                           
  2576                           ; BSR set to: 1
  2577                           ;HW_CLK.c: 459: }
  2578                           
  2579                           ;HW_CLK.c: 458: break;
  2580  001108  D0B5               	goto	l394
  2581  00110A                     l356:
  2582                           
  2583                           ; BSR set to: 1
  2584                           
  2585                           ; BSR set to: 1
  2586  00110A  515F               	movf	(_array+4)& (0+255),w,b
  2587                           
  2588                           ; Switch size 1, requested type "space"
  2589                           ; Number of cases is 2, Range of values is 48 to 49
  2590                           ; switch strategies available:
  2591                           ; Name         Instructions Cycles
  2592                           ; simple_byte            7     4 (average)
  2593                           ;	Chosen strategy is simple_byte
  2594  00110C  0A30               	xorlw	48	; case 48
  2595  00110E  B4D8               	btfsc	status,2,c
  2596  001110  D7F8               	goto	l357
  2597  001112  0A01               	xorlw	1	; case 49
  2598  001114  B4D8               	btfsc	status,2,c
  2599  001116  D7F7               	goto	l359
  2600                           
  2601                           ; BSR set to: 1
  2602                           ;HW_CLK.c: 460: }
  2603  001118  D0AD               	goto	l394
  2604  00111A                     l355:
  2605                           
  2606                           ; BSR set to: 1
  2607                           ;HW_CLK.c: 461: else if ((array[1] == 'W') && (array[2] == 'H') && (array[3] == 'V') && 
      +                          (array[5] == '>')) {
  2608                           
  2609                           ; BSR set to: 1
  2610  00111A  0E57               	movlw	87
  2611  00111C  195C               	xorwf	(_array+1)& (0+255),w,b
  2612  00111E  A4D8               	btfss	status,2,c
  2613  001120  D019               	goto	l361
  2614                           
  2615                           ; BSR set to: 1
  2616  001122  0E48               	movlw	72
  2617  001124  195D               	xorwf	(_array+2)& (0+255),w,b
  2618  001126  A4D8               	btfss	status,2,c
  2619  001128  D015               	goto	l361
  2620                           
  2621                           ; BSR set to: 1
  2622  00112A  0E56               	movlw	86
  2623  00112C  195E               	xorwf	(_array+3)& (0+255),w,b
  2624  00112E  A4D8               	btfss	status,2,c
  2625  001130  D011               	goto	l361
  2626                           
  2627                           ; BSR set to: 1
  2628  001132  0E3E               	movlw	62
  2629  001134  1960               	xorwf	(_array+5)& (0+255),w,b
  2630  001136  B4D8               	btfsc	status,2,c
  2631  001138  D005               	goto	l362
  2632  00113A  D00C               	goto	l361
  2633  00113C                     l363:
  2634                           
  2635                           ; BSR set to: 1
  2636                           ;HW_CLK.c: 464: PORTCbits.RC5 = 0;
  2637  00113C  9A82               	bcf	3970,5,c	;volatile
  2638                           
  2639                           ;HW_CLK.c: 465: break;
  2640  00113E  D09A               	goto	l394
  2641  001140                     l365:
  2642                           
  2643                           ; BSR set to: 1
  2644                           ;HW_CLK.c: 467: PORTCbits.RC5 = 1;
  2645  001140  8A82               	bsf	3970,5,c	;volatile
  2646                           
  2647                           ; BSR set to: 1
  2648                           ;HW_CLK.c: 469: }
  2649                           
  2650                           ;HW_CLK.c: 468: break;
  2651  001142  D098               	goto	l394
  2652  001144                     l362:
  2653                           
  2654                           ; BSR set to: 1
  2655                           
  2656                           ; BSR set to: 1
  2657  001144  515F               	movf	(_array+4)& (0+255),w,b
  2658                           
  2659                           ; Switch size 1, requested type "space"
  2660                           ; Number of cases is 2, Range of values is 48 to 49
  2661                           ; switch strategies available:
  2662                           ; Name         Instructions Cycles
  2663                           ; simple_byte            7     4 (average)
  2664                           ;	Chosen strategy is simple_byte
  2665  001146  0A30               	xorlw	48	; case 48
  2666  001148  B4D8               	btfsc	status,2,c
  2667  00114A  D7F8               	goto	l363
  2668  00114C  0A01               	xorlw	1	; case 49
  2669  00114E  B4D8               	btfsc	status,2,c
  2670  001150  D7F7               	goto	l365
  2671                           
  2672                           ; BSR set to: 1
  2673                           ;HW_CLK.c: 470: }
  2674  001152  D090               	goto	l394
  2675  001154                     l361:
  2676                           
  2677                           ; BSR set to: 1
  2678                           ;HW_CLK.c: 471: else if ((array[1] == 'W') && (array[2] == '4') && (array[3] == 'V') && 
      +                          (array[5] == '>')) {
  2679                           
  2680                           ; BSR set to: 1
  2681  001154  0E57               	movlw	87
  2682  001156  195C               	xorwf	(_array+1)& (0+255),w,b
  2683  001158  A4D8               	btfss	status,2,c
  2684  00115A  D019               	goto	l367
  2685                           
  2686                           ; BSR set to: 1
  2687  00115C  0E34               	movlw	52
  2688  00115E  195D               	xorwf	(_array+2)& (0+255),w,b
  2689  001160  A4D8               	btfss	status,2,c
  2690  001162  D015               	goto	l367
  2691                           
  2692                           ; BSR set to: 1
  2693  001164  0E56               	movlw	86
  2694  001166  195E               	xorwf	(_array+3)& (0+255),w,b
  2695  001168  A4D8               	btfss	status,2,c
  2696  00116A  D011               	goto	l367
  2697                           
  2698                           ; BSR set to: 1
  2699  00116C  0E3E               	movlw	62
  2700  00116E  1960               	xorwf	(_array+5)& (0+255),w,b
  2701  001170  B4D8               	btfsc	status,2,c
  2702  001172  D005               	goto	l368
  2703  001174  D00C               	goto	l367
  2704  001176                     l369:
  2705                           
  2706                           ; BSR set to: 1
  2707                           ;HW_CLK.c: 474: PORTDbits.RD4 = 0;
  2708  001176  9883               	bcf	3971,4,c	;volatile
  2709                           
  2710                           ;HW_CLK.c: 475: break;
  2711  001178  D07D               	goto	l394
  2712  00117A                     l371:
  2713                           
  2714                           ; BSR set to: 1
  2715                           ;HW_CLK.c: 477: PORTDbits.RD4 = 1;
  2716  00117A  8883               	bsf	3971,4,c	;volatile
  2717                           
  2718                           ; BSR set to: 1
  2719                           ;HW_CLK.c: 479: }
  2720                           
  2721                           ;HW_CLK.c: 478: break;
  2722  00117C  D07B               	goto	l394
  2723  00117E                     l368:
  2724                           
  2725                           ; BSR set to: 1
  2726                           
  2727                           ; BSR set to: 1
  2728  00117E  515F               	movf	(_array+4)& (0+255),w,b
  2729                           
  2730                           ; Switch size 1, requested type "space"
  2731                           ; Number of cases is 2, Range of values is 48 to 49
  2732                           ; switch strategies available:
  2733                           ; Name         Instructions Cycles
  2734                           ; simple_byte            7     4 (average)
  2735                           ;	Chosen strategy is simple_byte
  2736  001180  0A30               	xorlw	48	; case 48
  2737  001182  B4D8               	btfsc	status,2,c
  2738  001184  D7F8               	goto	l369
  2739  001186  0A01               	xorlw	1	; case 49
  2740  001188  B4D8               	btfsc	status,2,c
  2741  00118A  D7F7               	goto	l371
  2742                           
  2743                           ; BSR set to: 1
  2744                           ;HW_CLK.c: 480: }
  2745  00118C  D073               	goto	l394
  2746  00118E                     l367:
  2747                           
  2748                           ; BSR set to: 1
  2749                           ;HW_CLK.c: 481: else if ((array[1] == 'W') && (array[2] == '3') && (array[3] == 'V') && 
      +                          (array[5] == '>')) {
  2750                           
  2751                           ; BSR set to: 1
  2752  00118E  0E57               	movlw	87
  2753  001190  195C               	xorwf	(_array+1)& (0+255),w,b
  2754  001192  A4D8               	btfss	status,2,c
  2755  001194  D019               	goto	l373
  2756                           
  2757                           ; BSR set to: 1
  2758  001196  0E33               	movlw	51
  2759  001198  195D               	xorwf	(_array+2)& (0+255),w,b
  2760  00119A  A4D8               	btfss	status,2,c
  2761  00119C  D015               	goto	l373
  2762                           
  2763                           ; BSR set to: 1
  2764  00119E  0E56               	movlw	86
  2765  0011A0  195E               	xorwf	(_array+3)& (0+255),w,b
  2766  0011A2  A4D8               	btfss	status,2,c
  2767  0011A4  D011               	goto	l373
  2768                           
  2769                           ; BSR set to: 1
  2770  0011A6  0E3E               	movlw	62
  2771  0011A8  1960               	xorwf	(_array+5)& (0+255),w,b
  2772  0011AA  B4D8               	btfsc	status,2,c
  2773  0011AC  D005               	goto	l374
  2774  0011AE  D00C               	goto	l373
  2775  0011B0                     l375:
  2776                           
  2777                           ; BSR set to: 1
  2778                           ;HW_CLK.c: 484: PORTDbits.RD3 = 0;
  2779  0011B0  9683               	bcf	3971,3,c	;volatile
  2780                           
  2781                           ;HW_CLK.c: 485: break;
  2782  0011B2  D060               	goto	l394
  2783  0011B4                     l377:
  2784                           
  2785                           ; BSR set to: 1
  2786                           ;HW_CLK.c: 487: PORTDbits.RD3 = 1;
  2787  0011B4  8683               	bsf	3971,3,c	;volatile
  2788                           
  2789                           ; BSR set to: 1
  2790                           ;HW_CLK.c: 489: }
  2791                           
  2792                           ;HW_CLK.c: 488: break;
  2793  0011B6  D05E               	goto	l394
  2794  0011B8                     l374:
  2795                           
  2796                           ; BSR set to: 1
  2797                           
  2798                           ; BSR set to: 1
  2799  0011B8  515F               	movf	(_array+4)& (0+255),w,b
  2800                           
  2801                           ; Switch size 1, requested type "space"
  2802                           ; Number of cases is 2, Range of values is 48 to 49
  2803                           ; switch strategies available:
  2804                           ; Name         Instructions Cycles
  2805                           ; simple_byte            7     4 (average)
  2806                           ;	Chosen strategy is simple_byte
  2807  0011BA  0A30               	xorlw	48	; case 48
  2808  0011BC  B4D8               	btfsc	status,2,c
  2809  0011BE  D7F8               	goto	l375
  2810  0011C0  0A01               	xorlw	1	; case 49
  2811  0011C2  B4D8               	btfsc	status,2,c
  2812  0011C4  D7F7               	goto	l377
  2813                           
  2814                           ; BSR set to: 1
  2815                           ;HW_CLK.c: 490: }
  2816  0011C6  D056               	goto	l394
  2817  0011C8                     l373:
  2818                           
  2819                           ; BSR set to: 1
  2820                           ;HW_CLK.c: 491: else if ((array[1] == 'W') && (array[2] == '2') && (array[3] == 'V') && 
      +                          (array[5] == '>')) {
  2821                           
  2822                           ; BSR set to: 1
  2823  0011C8  0E57               	movlw	87
  2824  0011CA  195C               	xorwf	(_array+1)& (0+255),w,b
  2825  0011CC  A4D8               	btfss	status,2,c
  2826  0011CE  D019               	goto	l379
  2827                           
  2828                           ; BSR set to: 1
  2829  0011D0  0E32               	movlw	50
  2830  0011D2  195D               	xorwf	(_array+2)& (0+255),w,b
  2831  0011D4  A4D8               	btfss	status,2,c
  2832  0011D6  D015               	goto	l379
  2833                           
  2834                           ; BSR set to: 1
  2835  0011D8  0E56               	movlw	86
  2836  0011DA  195E               	xorwf	(_array+3)& (0+255),w,b
  2837  0011DC  A4D8               	btfss	status,2,c
  2838  0011DE  D011               	goto	l379
  2839                           
  2840                           ; BSR set to: 1
  2841  0011E0  0E3E               	movlw	62
  2842  0011E2  1960               	xorwf	(_array+5)& (0+255),w,b
  2843  0011E4  B4D8               	btfsc	status,2,c
  2844  0011E6  D005               	goto	l380
  2845  0011E8  D00C               	goto	l379
  2846  0011EA                     l381:
  2847                           
  2848                           ; BSR set to: 1
  2849                           ;HW_CLK.c: 494: PORTDbits.RD2 = 0;
  2850  0011EA  9483               	bcf	3971,2,c	;volatile
  2851                           
  2852                           ;HW_CLK.c: 495: break;
  2853  0011EC  D043               	goto	l394
  2854  0011EE                     l383:
  2855                           
  2856                           ; BSR set to: 1
  2857                           ;HW_CLK.c: 497: PORTDbits.RD2 = 1;
  2858  0011EE  8483               	bsf	3971,2,c	;volatile
  2859                           
  2860                           ; BSR set to: 1
  2861                           ;HW_CLK.c: 499: }
  2862                           
  2863                           ;HW_CLK.c: 498: break;
  2864  0011F0  D041               	goto	l394
  2865  0011F2                     l380:
  2866                           
  2867                           ; BSR set to: 1
  2868                           
  2869                           ; BSR set to: 1
  2870  0011F2  515F               	movf	(_array+4)& (0+255),w,b
  2871                           
  2872                           ; Switch size 1, requested type "space"
  2873                           ; Number of cases is 2, Range of values is 48 to 49
  2874                           ; switch strategies available:
  2875                           ; Name         Instructions Cycles
  2876                           ; simple_byte            7     4 (average)
  2877                           ;	Chosen strategy is simple_byte
  2878  0011F4  0A30               	xorlw	48	; case 48
  2879  0011F6  B4D8               	btfsc	status,2,c
  2880  0011F8  D7F8               	goto	l381
  2881  0011FA  0A01               	xorlw	1	; case 49
  2882  0011FC  B4D8               	btfsc	status,2,c
  2883  0011FE  D7F7               	goto	l383
  2884                           
  2885                           ; BSR set to: 1
  2886                           ;HW_CLK.c: 500: }
  2887  001200  D039               	goto	l394
  2888  001202                     l379:
  2889                           
  2890                           ; BSR set to: 1
  2891                           ;HW_CLK.c: 501: else if ((array[1] == 'W') && (array[2] == '1') && (array[3] == 'V') && 
      +                          (array[5] == '>')) {
  2892                           
  2893                           ; BSR set to: 1
  2894  001202  0E57               	movlw	87
  2895  001204  195C               	xorwf	(_array+1)& (0+255),w,b
  2896  001206  A4D8               	btfss	status,2,c
  2897  001208  D019               	goto	l385
  2898                           
  2899                           ; BSR set to: 1
  2900  00120A  0E31               	movlw	49
  2901  00120C  195D               	xorwf	(_array+2)& (0+255),w,b
  2902  00120E  A4D8               	btfss	status,2,c
  2903  001210  D015               	goto	l385
  2904                           
  2905                           ; BSR set to: 1
  2906  001212  0E56               	movlw	86
  2907  001214  195E               	xorwf	(_array+3)& (0+255),w,b
  2908  001216  A4D8               	btfss	status,2,c
  2909  001218  D011               	goto	l385
  2910                           
  2911                           ; BSR set to: 1
  2912  00121A  0E3E               	movlw	62
  2913  00121C  1960               	xorwf	(_array+5)& (0+255),w,b
  2914  00121E  B4D8               	btfsc	status,2,c
  2915  001220  D005               	goto	l386
  2916  001222  D00C               	goto	l385
  2917  001224                     l387:
  2918                           
  2919                           ; BSR set to: 1
  2920                           ;HW_CLK.c: 504: PORTDbits.RD1 = 0;
  2921  001224  9283               	bcf	3971,1,c	;volatile
  2922                           
  2923                           ;HW_CLK.c: 505: break;
  2924  001226  D026               	goto	l394
  2925  001228                     l389:
  2926                           
  2927                           ; BSR set to: 1
  2928                           ;HW_CLK.c: 507: PORTDbits.RD1 = 1;
  2929  001228  8283               	bsf	3971,1,c	;volatile
  2930                           
  2931                           ; BSR set to: 1
  2932                           ;HW_CLK.c: 509: }
  2933                           
  2934                           ;HW_CLK.c: 508: break;
  2935  00122A  D024               	goto	l394
  2936  00122C                     l386:
  2937                           
  2938                           ; BSR set to: 1
  2939                           
  2940                           ; BSR set to: 1
  2941  00122C  515F               	movf	(_array+4)& (0+255),w,b
  2942                           
  2943                           ; Switch size 1, requested type "space"
  2944                           ; Number of cases is 2, Range of values is 48 to 49
  2945                           ; switch strategies available:
  2946                           ; Name         Instructions Cycles
  2947                           ; simple_byte            7     4 (average)
  2948                           ;	Chosen strategy is simple_byte
  2949  00122E  0A30               	xorlw	48	; case 48
  2950  001230  B4D8               	btfsc	status,2,c
  2951  001232  D7F8               	goto	l387
  2952  001234  0A01               	xorlw	1	; case 49
  2953  001236  B4D8               	btfsc	status,2,c
  2954  001238  D7F7               	goto	l389
  2955                           
  2956                           ; BSR set to: 1
  2957                           ;HW_CLK.c: 510: }
  2958  00123A  D01C               	goto	l394
  2959  00123C                     l385:
  2960                           
  2961                           ; BSR set to: 1
  2962                           ;HW_CLK.c: 511: else if ((array[1] == 'W') && (array[2] == '0') && (array[3] == 'V') && 
      +                          (array[5] == '>')) {
  2963                           
  2964                           ; BSR set to: 1
  2965  00123C  0E57               	movlw	87
  2966  00123E  195C               	xorwf	(_array+1)& (0+255),w,b
  2967  001240  A4D8               	btfss	status,2,c
  2968  001242  D018               	goto	l394
  2969                           
  2970                           ; BSR set to: 1
  2971  001244  0E30               	movlw	48
  2972  001246  195D               	xorwf	(_array+2)& (0+255),w,b
  2973  001248  A4D8               	btfss	status,2,c
  2974  00124A  D014               	goto	l394
  2975                           
  2976                           ; BSR set to: 1
  2977  00124C  0E56               	movlw	86
  2978  00124E  195E               	xorwf	(_array+3)& (0+255),w,b
  2979  001250  A4D8               	btfss	status,2,c
  2980  001252  D010               	goto	l394
  2981                           
  2982                           ; BSR set to: 1
  2983  001254  0E3E               	movlw	62
  2984  001256  1960               	xorwf	(_array+5)& (0+255),w,b
  2985  001258  B4D8               	btfsc	status,2,c
  2986  00125A  D005               	goto	l392
  2987  00125C  D00B               	goto	l394
  2988  00125E                     l393:
  2989                           
  2990                           ; BSR set to: 1
  2991                           ;HW_CLK.c: 514: PORTDbits.RD0 = 0;
  2992  00125E  9083               	bcf	3971,0,c	;volatile
  2993                           
  2994                           ;HW_CLK.c: 515: break;
  2995  001260  D009               	goto	l394
  2996  001262                     l395:
  2997                           
  2998                           ; BSR set to: 1
  2999                           ;HW_CLK.c: 517: PORTDbits.RD0 = 1;
  3000  001262  8083               	bsf	3971,0,c	;volatile
  3001                           
  3002                           ; BSR set to: 1
  3003                           ;HW_CLK.c: 519: }
  3004                           
  3005                           ;HW_CLK.c: 518: break;
  3006  001264  D007               	goto	l394
  3007  001266                     l392:
  3008                           
  3009                           ; BSR set to: 1
  3010                           
  3011                           ; BSR set to: 1
  3012  001266  515F               	movf	(_array+4)& (0+255),w,b
  3013                           
  3014                           ; Switch size 1, requested type "space"
  3015                           ; Number of cases is 2, Range of values is 48 to 49
  3016                           ; switch strategies available:
  3017                           ; Name         Instructions Cycles
  3018                           ; simple_byte            7     4 (average)
  3019                           ;	Chosen strategy is simple_byte
  3020  001268  0A30               	xorlw	48	; case 48
  3021  00126A  B4D8               	btfsc	status,2,c
  3022  00126C  D7F8               	goto	l393
  3023  00126E  0A01               	xorlw	1	; case 49
  3024  001270  B4D8               	btfsc	status,2,c
  3025  001272  D7F7               	goto	l395
  3026  001274                     l394:
  3027                           
  3028                           ;HW_CLK.c: 520: }
  3029                           ;HW_CLK.c: 521: array[0] = 0;
  3030                           
  3031                           ; BSR set to: 1
  3032                           
  3033                           ; BSR set to: 1
  3034                           
  3035                           ; BSR set to: 1
  3036                           
  3037                           ; BSR set to: 1
  3038                           
  3039                           ; BSR set to: 1
  3040                           
  3041                           ; BSR set to: 1
  3042                           
  3043                           ; BSR set to: 1
  3044                           
  3045                           ; BSR set to: 1
  3046                           
  3047                           ; BSR set to: 1
  3048                           
  3049                           ; BSR set to: 1
  3050                           
  3051                           ; BSR set to: 1
  3052                           
  3053                           ; BSR set to: 1
  3054  001274  0E00               	movlw	0
  3055  001276  0101               	movlb	1	; () banked
  3056  001278  6F5B               	movwf	_array& (0+255),b
  3057                           
  3058                           ;HW_CLK.c: 522: ready = 0;
  3059  00127A  0E00               	movlw	0
  3060  00127C  6F56               	movwf	_ready& (0+255),b
  3061                           
  3062                           ; BSR set to: 1
  3063                           
  3064                           ; BSR set to: 1
  3065  00127E  D549               	goto	l311
  3066  001280                     l5948:
  3067                           
  3068                           ; BSR set to: 1
  3069  001280  0E02               	movlw	2
  3070  001282  6550               	cpfsgt	main@channel& (0+255),b
  3071  001284  D001               	goto	l398
  3072  001286  D01A               	goto	u8070
  3073  001288                     l398:
  3074                           
  3075                           ; BSR set to: 1
  3076                           ;HW_CLK.c: 530: voltage = read_adc_voltage((unsigned char) channel);
  3077                           
  3078                           ; BSR set to: 1
  3079  001288  5150               	movf	main@channel& (0+255),w,b
  3080  00128A  EC47  F015         	call	_read_adc_voltage
  3081  00128E  C03B  F120         	movff	?_read_adc_voltage,main@voltage
  3082  001292  C03C  F121         	movff	?_read_adc_voltage+1,main@voltage+1
  3083  001296  C03D  F122         	movff	?_read_adc_voltage+2,main@voltage+2
  3084                           
  3085                           ;HW_CLK.c: 531: AN[channel] = voltage;
  3086  00129A  0101               	movlb	1	; () banked
  3087  00129C  5150               	movf	main@channel& (0+255),w,b
  3088  00129E  0D03               	mullw	3
  3089  0012A0  0E47               	movlw	low main@AN
  3090  0012A2  24F3               	addwf	prodl,w,c
  3091  0012A4  6ED9               	movwf	fsr2l,c
  3092  0012A6  0E01               	movlw	high main@AN
  3093  0012A8  20F4               	addwfc	prodh,w,c
  3094  0012AA  6EDA               	movwf	fsr2h,c
  3095  0012AC  C120  FFDE         	movff	main@voltage,postinc2
  3096  0012B0  C121  FFDE         	movff	main@voltage+1,postinc2
  3097  0012B4  C122  FFDE         	movff	main@voltage+2,postinc2
  3098                           
  3099                           ; BSR set to: 1
  3100  0012B8  2B50               	incf	main@channel& (0+255),f,b
  3101  0012BA  D7E2               	goto	l5948
  3102  0012BC                     u8070:
  3103                           
  3104                           ; BSR set to: 1
  3105                           ;HW_CLK.c: 532: }
  3106                           ;HW_CLK.c: 534: T = AN[2] *100;
  3107                           
  3108                           ; BSR set to: 1
  3109  0012BC  C14D  F044         	movff	main@AN+6,___ftmul@f1
  3110  0012C0  C14E  F045         	movff	main@AN+7,___ftmul@f1+1
  3111  0012C4  C14F  F046         	movff	main@AN+8,___ftmul@f1+2
  3112  0012C8  0E00               	movlw	0
  3113  0012CA  6E47               	movwf	___ftmul@f2,c
  3114  0012CC  0EC8               	movlw	200
  3115  0012CE  6E48               	movwf	___ftmul@f2+1,c
  3116  0012D0  0E42               	movlw	66
  3117  0012D2  6E49               	movwf	___ftmul@f2+2,c
  3118  0012D4  EC2E  F011         	call	___ftmul	;wreg free
  3119  0012D8  C044  F123         	movff	?___ftmul,main@T
  3120  0012DC  C045  F124         	movff	?___ftmul+1,main@T+1
  3121  0012E0  C046  F125         	movff	?___ftmul+2,main@T+2
  3122                           
  3123                           ;HW_CLK.c: 536: if(!PORTBbits.RB3){
  3124  0012E4  B681               	btfsc	3969,3,c	;volatile
  3125  0012E6  D03D               	goto	l402
  3126                           
  3127                           ;HW_CLK.c: 538: if (state == SET_CLOCK){
  3128  0012E8  0101               	movlb	1	; () banked
  3129  0012EA  055A               	decf	_state& (0+255),w,b
  3130  0012EC  A4D8               	btfss	status,2,c
  3131  0012EE  D039               	goto	l402
  3132                           
  3133                           ; BSR set to: 1
  3134                           ;HW_CLK.c: 539: Clock += IncVal[IncMode];
  3135  0012F0  5159               	movf	_IncMode& (0+255),w,b
  3136  0012F2  0D02               	mullw	2
  3137  0012F4  0E6B               	movlw	low _IncVal
  3138  0012F6  24F3               	addwf	prodl,w,c
  3139  0012F8  6ED9               	movwf	fsr2l,c
  3140  0012FA  0E01               	movlw	high _IncVal
  3141  0012FC  20F4               	addwfc	prodh,w,c
  3142  0012FE  6EDA               	movwf	fsr2h,c
  3143  001300  CFDE F0C9          	movff	postinc2,??_main
  3144  001304  CFDD F0CA          	movff	postdec2,??_main+1
  3145  001308  C0C9  F0CB         	movff	??_main,??_main+2
  3146  00130C  C0CA  F0CC         	movff	??_main+1,??_main+3
  3147  001310  0E00               	movlw	0
  3148  001312  0100               	movlb	0	; () banked
  3149  001314  BFCC               	btfsc	(??_main+3)& (0+255),7,b
  3150  001316  0EFF               	movlw	255
  3151  001318  6FCD               	movwf	(??_main+4)& (0+255),b
  3152  00131A  6FCE               	movwf	(??_main+5)& (0+255),b
  3153  00131C  51CB               	movf	(??_main+2)& (0+255),w,b
  3154  00131E  0101               	movlb	1	; () banked
  3155  001320  2751               	addwf	_Clock& (0+255),f,b
  3156  001322  0100               	movlb	0	; () banked
  3157  001324  51CC               	movf	(??_main+3)& (0+255),w,b
  3158  001326  0101               	movlb	1	; () banked
  3159  001328  2352               	addwfc	(_Clock+1)& (0+255),f,b
  3160  00132A  0100               	movlb	0	; () banked
  3161  00132C  51CD               	movf	(??_main+4)& (0+255),w,b
  3162  00132E  0101               	movlb	1	; () banked
  3163  001330  2353               	addwfc	(_Clock+2)& (0+255),f,b
  3164  001332  0100               	movlb	0	; () banked
  3165  001334  51CE               	movf	(??_main+5)& (0+255),w,b
  3166  001336  0101               	movlb	1	; () banked
  3167  001338  2354               	addwfc	(_Clock+3)& (0+255),f,b
  3168                           
  3169                           ; BSR set to: 1
  3170                           ;HW_CLK.c: 540: if(Clock >= (long)86400) Clock = 0;
  3171  00133A  BF54               	btfsc	(_Clock+3)& (0+255),7,b
  3172  00133C  D012               	goto	l402
  3173  00133E  5154               	movf	(_Clock+3)& (0+255),w,b
  3174  001340  E108               	bnz	u8100
  3175  001342  0E80               	movlw	128
  3176  001344  5D51               	subwf	_Clock& (0+255),w,b
  3177  001346  0E51               	movlw	81
  3178  001348  5952               	subwfb	(_Clock+1)& (0+255),w,b
  3179  00134A  0E01               	movlw	1
  3180  00134C  5953               	subwfb	(_Clock+2)& (0+255),w,b
  3181  00134E  A0D8               	btfss	status,0,c
  3182  001350  D008               	goto	l402
  3183  001352                     u8100:
  3184                           
  3185                           ; BSR set to: 1
  3186  001352  0E00               	movlw	0
  3187  001354  6F51               	movwf	_Clock& (0+255),b
  3188  001356  0E00               	movlw	0
  3189  001358  6F52               	movwf	(_Clock+1)& (0+255),b
  3190  00135A  0E00               	movlw	0
  3191  00135C  6F53               	movwf	(_Clock+2)& (0+255),b
  3192  00135E  0E00               	movlw	0
  3193  001360  6F54               	movwf	(_Clock+3)& (0+255),b
  3194  001362                     l402:
  3195                           
  3196                           ;HW_CLK.c: 541: }
  3197                           ;HW_CLK.c: 542: }
  3198                           ;HW_CLK.c: 543: if(!PORTBbits.RB4){
  3199                           
  3200                           ; BSR set to: 1
  3201                           
  3202                           ; BSR set to: 1
  3203                           
  3204                           ; BSR set to: 1
  3205  001362  B881               	btfsc	3969,4,c	;volatile
  3206  001364  D033               	goto	l405
  3207                           
  3208                           ;HW_CLK.c: 545: if (state == SET_CLOCK){
  3209  001366  0101               	movlb	1	; () banked
  3210  001368  055A               	decf	_state& (0+255),w,b
  3211  00136A  A4D8               	btfss	status,2,c
  3212  00136C  D02F               	goto	l405
  3213                           
  3214                           ; BSR set to: 1
  3215                           ;HW_CLK.c: 546: Clock -= IncVal[IncMode];
  3216  00136E  5159               	movf	_IncMode& (0+255),w,b
  3217  001370  0D02               	mullw	2
  3218  001372  0E6B               	movlw	low _IncVal
  3219  001374  24F3               	addwf	prodl,w,c
  3220  001376  6ED9               	movwf	fsr2l,c
  3221  001378  0E01               	movlw	high _IncVal
  3222  00137A  20F4               	addwfc	prodh,w,c
  3223  00137C  6EDA               	movwf	fsr2h,c
  3224  00137E  CFDE F0C9          	movff	postinc2,??_main
  3225  001382  CFDD F0CA          	movff	postdec2,??_main+1
  3226  001386  C0C9  F0CB         	movff	??_main,??_main+2
  3227  00138A  C0CA  F0CC         	movff	??_main+1,??_main+3
  3228  00138E  0E00               	movlw	0
  3229  001390  0100               	movlb	0	; () banked
  3230  001392  BFCC               	btfsc	(??_main+3)& (0+255),7,b
  3231  001394  0EFF               	movlw	255
  3232  001396  6FCD               	movwf	(??_main+4)& (0+255),b
  3233  001398  6FCE               	movwf	(??_main+5)& (0+255),b
  3234  00139A  51CB               	movf	(??_main+2)& (0+255),w,b
  3235  00139C  0101               	movlb	1	; () banked
  3236  00139E  5F51               	subwf	_Clock& (0+255),f,b
  3237  0013A0  0100               	movlb	0	; () banked
  3238  0013A2  51CC               	movf	(??_main+3)& (0+255),w,b
  3239  0013A4  0101               	movlb	1	; () banked
  3240  0013A6  5B52               	subwfb	(_Clock+1)& (0+255),f,b
  3241  0013A8  0100               	movlb	0	; () banked
  3242  0013AA  51CD               	movf	(??_main+4)& (0+255),w,b
  3243  0013AC  0101               	movlb	1	; () banked
  3244  0013AE  5B53               	subwfb	(_Clock+2)& (0+255),f,b
  3245  0013B0  0100               	movlb	0	; () banked
  3246  0013B2  51CE               	movf	(??_main+5)& (0+255),w,b
  3247  0013B4  0101               	movlb	1	; () banked
  3248  0013B6  5B54               	subwfb	(_Clock+3)& (0+255),f,b
  3249                           
  3250                           ; BSR set to: 1
  3251                           ;HW_CLK.c: 547: if(Clock < 0) Clock = 0; ;
  3252  0013B8  AF54               	btfss	(_Clock+3)& (0+255),7,b
  3253  0013BA  D008               	goto	l405
  3254                           
  3255                           ; BSR set to: 1
  3256  0013BC  0E00               	movlw	0
  3257  0013BE  6F51               	movwf	_Clock& (0+255),b
  3258  0013C0  0E00               	movlw	0
  3259  0013C2  6F52               	movwf	(_Clock+1)& (0+255),b
  3260  0013C4  0E00               	movlw	0
  3261  0013C6  6F53               	movwf	(_Clock+2)& (0+255),b
  3262  0013C8  0E00               	movlw	0
  3263  0013CA  6F54               	movwf	(_Clock+3)& (0+255),b
  3264  0013CC                     l405:
  3265                           
  3266                           ;HW_CLK.c: 548: }
  3267                           ;HW_CLK.c: 550: }
  3268                           ;HW_CLK.c: 551: displayClock = 1;
  3269                           
  3270                           ; BSR set to: 1
  3271                           
  3272                           ; BSR set to: 1
  3273  0013CC  0E01               	movlw	1
  3274  0013CE  0101               	movlb	1	; () banked
  3275  0013D0  6F3E               	movwf	main@displayClock& (0+255),b
  3276                           
  3277                           ; BSR set to: 1
  3278                           ;HW_CLK.c: 552: lcd_gotoxy(1, 1);
  3279  0013D2  0E01               	movlw	1
  3280  0013D4  6E1E               	movwf	lcd_gotoxy@y,c
  3281  0013D6  0E01               	movlw	1
  3282  0013D8  ECC0  F016         	call	_lcd_gotoxy
  3283                           
  3284                           ;HW_CLK.c: 553: if(displayClock){
  3285  0013DC  0101               	movlb	1	; () banked
  3286  0013DE  513E               	movf	main@displayClock& (0+255),w,b
  3287  0013E0  B4D8               	btfsc	status,2,c
  3288  0013E2  D02C               	goto	l406
  3289                           
  3290                           ; BSR set to: 1
  3291                           ;HW_CLK.c: 554: hr = Clock/3600;
  3292  0013E4  C151  F014         	movff	_Clock,___aldiv@dividend
  3293  0013E8  C152  F015         	movff	_Clock+1,___aldiv@dividend+1
  3294  0013EC  C153  F016         	movff	_Clock+2,___aldiv@dividend+2
  3295  0013F0  C154  F017         	movff	_Clock+3,___aldiv@dividend+3
  3296  0013F4  0E10               	movlw	16
  3297  0013F6  6E18               	movwf	___aldiv@divisor,c
  3298  0013F8  0E0E               	movlw	14
  3299  0013FA  6E19               	movwf	___aldiv@divisor+1,c
  3300  0013FC  0E00               	movlw	0
  3301  0013FE  6E1A               	movwf	___aldiv@divisor+2,c
  3302  001400  0E00               	movlw	0
  3303  001402  6E1B               	movwf	___aldiv@divisor+3,c
  3304  001404  EC1B  F012         	call	___aldiv	;wreg free
  3305  001408  C014  F13F         	movff	?___aldiv,main@hr
  3306  00140C  C015  F140         	movff	?___aldiv+1,main@hr+1
  3307                           
  3308                           ;HW_CLK.c: 555: t = Clock%3600;
  3309  001410  C151  F014         	movff	_Clock,___almod@dividend
  3310  001414  C152  F015         	movff	_Clock+1,___almod@dividend+1
  3311  001418  C153  F016         	movff	_Clock+2,___almod@dividend+2
  3312  00141C  C154  F017         	movff	_Clock+3,___almod@dividend+3
  3313  001420  0E10               	movlw	16
  3314  001422  6E18               	movwf	___almod@divisor,c
  3315  001424  0E0E               	movlw	14
  3316  001426  6E19               	movwf	___almod@divisor+1,c
  3317  001428  0E00               	movlw	0
  3318  00142A  6E1A               	movwf	___almod@divisor+2,c
  3319  00142C  0E00               	movlw	0
  3320  00142E  6E1B               	movwf	___almod@divisor+3,c
  3321  001430  EC3A  F013         	call	___almod	;wreg free
  3322  001434  C014  F145         	movff	?___almod,main@t
  3323  001438  C015  F146         	movff	?___almod+1,main@t+1
  3324  00143C                     l406:
  3325                           
  3326                           ;HW_CLK.c: 556: }
  3327                           ;HW_CLK.c: 558: min = t/60;
  3328  00143C  C145  F01A         	movff	main@t,___awdiv@dividend
  3329  001440  C146  F01B         	movff	main@t+1,___awdiv@dividend+1
  3330  001444  0E00               	movlw	0
  3331  001446  6E1D               	movwf	___awdiv@divisor+1,c
  3332  001448  0E3C               	movlw	60
  3333  00144A  6E1C               	movwf	___awdiv@divisor,c
  3334  00144C  ECD8  F013         	call	___awdiv	;wreg free
  3335  001450  C01A  F141         	movff	?___awdiv,main@min
  3336  001454  C01B  F142         	movff	?___awdiv+1,main@min+1
  3337                           
  3338                           ;HW_CLK.c: 559: sec = t%60;
  3339  001458  C145  F014         	movff	main@t,___awmod@dividend
  3340  00145C  C146  F015         	movff	main@t+1,___awmod@dividend+1
  3341  001460  0E00               	movlw	0
  3342  001462  6E17               	movwf	___awmod@divisor+1,c
  3343  001464  0E3C               	movlw	60
  3344  001466  6E16               	movwf	___awmod@divisor,c
  3345  001468  ECDC  F014         	call	___awmod	;wreg free
  3346  00146C  C014  F143         	movff	?___awmod,main@sec
  3347  001470  C015  F144         	movff	?___awmod+1,main@sec+1
  3348                           
  3349                           ;HW_CLK.c: 560: sprintf(Buffer, "%02d:%02d:%02d %4.2f", hr,min,sec, T);
  3350  001474  0E00               	movlw	low main@Buffer
  3351  001476  0100               	movlb	0	; () banked
  3352  001478  6F99               	movwf	sprintf@sp& (0+255),b
  3353  00147A  0E01               	movlw	high main@Buffer
  3354  00147C  6F9A               	movwf	(sprintf@sp+1)& (0+255),b
  3355  00147E  0EFD               	movlw	low STR_30
  3356  001480  6F9B               	movwf	sprintf@f& (0+255),b
  3357  001482  0EFE               	movlw	high STR_30
  3358  001484  6F9C               	movwf	(sprintf@f+1)& (0+255),b
  3359  001486  C13F  F09D         	movff	main@hr,?_sprintf+4
  3360  00148A  C140  F09E         	movff	main@hr+1,?_sprintf+5
  3361  00148E  C141  F09F         	movff	main@min,?_sprintf+6
  3362  001492  C142  F0A0         	movff	main@min+1,?_sprintf+7
  3363  001496  C143  F0A1         	movff	main@sec,?_sprintf+8
  3364  00149A  C144  F0A2         	movff	main@sec+1,?_sprintf+9
  3365  00149E  C123  F0A3         	movff	main@T,?_sprintf+10
  3366  0014A2  C124  F0A4         	movff	main@T+1,?_sprintf+11
  3367  0014A6  C125  F0A5         	movff	main@T+2,?_sprintf+12
  3368  0014AA  EC09  F000         	call	_sprintf	;wreg free
  3369                           
  3370                           ;HW_CLK.c: 561: lcd_puts(Buffer);
  3371  0014AE  0E00               	movlw	low main@Buffer
  3372  0014B0  6E22               	movwf	lcd_puts@s,c
  3373  0014B2  0E01               	movlw	high main@Buffer
  3374  0014B4  6E23               	movwf	lcd_puts@s+1,c
  3375  0014B6  EC7B  F017         	call	_lcd_puts	;wreg free
  3376                           
  3377                           ;HW_CLK.c: 563: lcd_gotoxy(1, 2);
  3378  0014BA  0E02               	movlw	2
  3379  0014BC  6E1E               	movwf	lcd_gotoxy@y,c
  3380  0014BE  0E01               	movlw	1
  3381  0014C0  ECC0  F016         	call	_lcd_gotoxy
  3382                           
  3383                           ;HW_CLK.c: 564: sprintf(Buffer,"H:%3s    C:%3s", PORTCbits.RC5 ? "ON":"OFF" ,PORTCbits.R
      +                          C2 ? "ON":"OFF");
  3384  0014C4  B482               	btfsc	3970,2,c	;volatile
  3385  0014C6  D005               	goto	l408
  3386  0014C8  0EED               	movlw	low STR_33
  3387  0014CA  0101               	movlb	1	; () banked
  3388  0014CC  6F3A               	movwf	_main$1234& (0+255),b
  3389  0014CE  0EFF               	movlw	high STR_33
  3390  0014D0  D004               	goto	L1
  3391  0014D2                     l408:
  3392                           
  3393                           ; BSR set to: 1
  3394  0014D2  0EF9               	movlw	low STR_32
  3395  0014D4  0101               	movlb	1	; () banked
  3396  0014D6  6F3A               	movwf	_main$1234& (0+255),b
  3397  0014D8  0EFF               	movlw	high STR_32
  3398  0014DA                     L1:
  3399  0014DA  6F3B               	movwf	(_main$1234+1)& (0+255),b
  3400                           
  3401                           ; BSR set to: 1
  3402                           
  3403                           ; BSR set to: 1
  3404  0014DC  BA82               	btfsc	3970,5,c	;volatile
  3405  0014DE  D004               	goto	l412
  3406                           
  3407                           ; BSR set to: 1
  3408  0014E0  0EED               	movlw	low STR_33
  3409  0014E2  6F3C               	movwf	_main$1235& (0+255),b
  3410  0014E4  0EFF               	movlw	high STR_33
  3411  0014E6  D003               	goto	L2
  3412  0014E8                     l412:
  3413                           
  3414                           ; BSR set to: 1
  3415                           
  3416                           ; BSR set to: 1
  3417  0014E8  0EF9               	movlw	low STR_32
  3418  0014EA  6F3C               	movwf	_main$1235& (0+255),b
  3419  0014EC  0EFF               	movlw	high STR_32
  3420  0014EE                     L2:
  3421  0014EE  6F3D               	movwf	(_main$1235+1)& (0+255),b
  3422                           
  3423                           ; BSR set to: 1
  3424                           
  3425                           ; BSR set to: 1
  3426  0014F0  0E00               	movlw	low main@Buffer
  3427  0014F2  0100               	movlb	0	; () banked
  3428  0014F4  6F99               	movwf	sprintf@sp& (0+255),b
  3429  0014F6  0E01               	movlw	high main@Buffer
  3430  0014F8  6F9A               	movwf	(sprintf@sp+1)& (0+255),b
  3431  0014FA  0E22               	movlw	low STR_31
  3432  0014FC  6F9B               	movwf	sprintf@f& (0+255),b
  3433  0014FE  0EFF               	movlw	high STR_31
  3434  001500  6F9C               	movwf	(sprintf@f+1)& (0+255),b
  3435  001502  C13C  F09D         	movff	_main$1235,?_sprintf+4
  3436  001506  C13D  F09E         	movff	_main$1235+1,?_sprintf+5
  3437  00150A  C13A  F09F         	movff	_main$1234,?_sprintf+6
  3438  00150E  C13B  F0A0         	movff	_main$1234+1,?_sprintf+7
  3439  001512  EC09  F000         	call	_sprintf	;wreg free
  3440                           
  3441                           ;HW_CLK.c: 565: lcd_puts(Buffer);
  3442  001516  0E00               	movlw	low main@Buffer
  3443  001518  6E22               	movwf	lcd_puts@s,c
  3444  00151A  0E01               	movlw	high main@Buffer
  3445  00151C  6E23               	movwf	lcd_puts@s+1,c
  3446  00151E  EC7B  F017         	call	_lcd_puts	;wreg free
  3447                           
  3448                           ;HW_CLK.c: 567: lcd_gotoxy(1, 3);
  3449  001522  0E03               	movlw	3
  3450  001524  6E1E               	movwf	lcd_gotoxy@y,c
  3451  001526  0E01               	movlw	1
  3452  001528  ECC0  F016         	call	_lcd_gotoxy
  3453                           
  3454                           ;HW_CLK.c: 568: if(state == IDLE )
  3455  00152C  0101               	movlb	1	; () banked
  3456  00152E  515A               	movf	_state& (0+255),w,b
  3457  001530  A4D8               	btfss	status,2,c
  3458  001532  D019               	goto	l415
  3459                           
  3460                           ; BSR set to: 1
  3461                           ;HW_CLK.c: 569: sprintf(Buffer, "%-5s           ", StateStr[state]);
  3462  001534  0E00               	movlw	low main@Buffer
  3463  001536  0100               	movlb	0	; () banked
  3464  001538  6F99               	movwf	sprintf@sp& (0+255),b
  3465  00153A  0E01               	movlw	high main@Buffer
  3466  00153C  6F9A               	movwf	(sprintf@sp+1)& (0+255),b
  3467  00153E  0E12               	movlw	low STR_36
  3468  001540  6F9B               	movwf	sprintf@f& (0+255),b
  3469  001542  0EFF               	movlw	high STR_36
  3470  001544  6F9C               	movwf	(sprintf@f+1)& (0+255),b
  3471  001546  0101               	movlb	1	; () banked
  3472  001548  515A               	movf	_state& (0+255),w,b
  3473  00154A  0D02               	mullw	2
  3474  00154C  0E77               	movlw	low _StateStr
  3475  00154E  24F3               	addwf	prodl,w,c
  3476  001550  6ED9               	movwf	fsr2l,c
  3477  001552  0E01               	movlw	high _StateStr
  3478  001554  20F4               	addwfc	prodh,w,c
  3479  001556  6EDA               	movwf	fsr2h,c
  3480  001558  CFDE F09D          	movff	postinc2,?_sprintf+4
  3481  00155C  CFDD F09E          	movff	postdec2,?_sprintf+5
  3482  001560  EC09  F000         	call	_sprintf	;wreg free
  3483  001564  D024               	goto	l416
  3484  001566                     l415:
  3485                           
  3486                           ;HW_CLK.c: 570: else
  3487                           ;HW_CLK.c: 571: sprintf(Buffer, "%-5s  MD:%-7s", StateStr[state] , IncStr[IncMode]);
  3488  001566  0E00               	movlw	low main@Buffer
  3489  001568  0100               	movlb	0	; () banked
  3490  00156A  6F99               	movwf	sprintf@sp& (0+255),b
  3491  00156C  0E01               	movlw	high main@Buffer
  3492  00156E  6F9A               	movwf	(sprintf@sp+1)& (0+255),b
  3493  001570  0E31               	movlw	low STR_37
  3494  001572  6F9B               	movwf	sprintf@f& (0+255),b
  3495  001574  0EFF               	movlw	high STR_37
  3496  001576  6F9C               	movwf	(sprintf@f+1)& (0+255),b
  3497  001578  0101               	movlb	1	; () banked
  3498  00157A  515A               	movf	_state& (0+255),w,b
  3499  00157C  0D02               	mullw	2
  3500  00157E  0E77               	movlw	low _StateStr
  3501  001580  24F3               	addwf	prodl,w,c
  3502  001582  6ED9               	movwf	fsr2l,c
  3503  001584  0E01               	movlw	high _StateStr
  3504  001586  20F4               	addwfc	prodh,w,c
  3505  001588  6EDA               	movwf	fsr2h,c
  3506  00158A  CFDE F09D          	movff	postinc2,?_sprintf+4
  3507  00158E  CFDD F09E          	movff	postdec2,?_sprintf+5
  3508  001592  5159               	movf	_IncMode& (0+255),w,b
  3509  001594  0D02               	mullw	2
  3510  001596  0E71               	movlw	low _IncStr
  3511  001598  24F3               	addwf	prodl,w,c
  3512  00159A  6ED9               	movwf	fsr2l,c
  3513  00159C  0E01               	movlw	high _IncStr
  3514  00159E  20F4               	addwfc	prodh,w,c
  3515  0015A0  6EDA               	movwf	fsr2h,c
  3516  0015A2  CFDE F09F          	movff	postinc2,?_sprintf+6
  3517  0015A6  CFDD F0A0          	movff	postdec2,?_sprintf+7
  3518  0015AA  EC09  F000         	call	_sprintf	;wreg free
  3519  0015AE                     l416:
  3520                           
  3521                           ;HW_CLK.c: 572: lcd_puts(Buffer);
  3522  0015AE  0E00               	movlw	low main@Buffer
  3523  0015B0  6E22               	movwf	lcd_puts@s,c
  3524  0015B2  0E01               	movlw	high main@Buffer
  3525  0015B4  6E23               	movwf	lcd_puts@s+1,c
  3526  0015B6  EC7B  F017         	call	_lcd_puts	;wreg free
  3527                           
  3528                           ;HW_CLK.c: 573: lcd_gotoxy(1, 4);
  3529  0015BA  0E04               	movlw	4
  3530  0015BC  6E1E               	movwf	lcd_gotoxy@y,c
  3531  0015BE  0E01               	movlw	1
  3532  0015C0  ECC0  F016         	call	_lcd_gotoxy
  3533                           
  3534                           ;HW_CLK.c: 574: if(state_L4 == DISP_AI01)
  3535  0015C4  0101               	movlb	1	; () banked
  3536  0015C6  5158               	movf	_state_L4& (0+255),w,b
  3537  0015C8  A4D8               	btfss	status,2,c
  3538  0015CA  D018               	goto	l417
  3539                           
  3540                           ; BSR set to: 1
  3541                           ;HW_CLK.c: 575: sprintf(Buffer, "AI0:%3.1f  AI1:%3.1f ", AN[0],AN[1]);
  3542  0015CC  0E00               	movlw	low main@Buffer
  3543  0015CE  0100               	movlb	0	; () banked
  3544  0015D0  6F99               	movwf	sprintf@sp& (0+255),b
  3545  0015D2  0E01               	movlw	high main@Buffer
  3546  0015D4  6F9A               	movwf	(sprintf@sp+1)& (0+255),b
  3547  0015D6  0EE7               	movlw	low STR_38
  3548  0015D8  6F9B               	movwf	sprintf@f& (0+255),b
  3549  0015DA  0EFE               	movlw	high STR_38
  3550  0015DC  6F9C               	movwf	(sprintf@f+1)& (0+255),b
  3551  0015DE  C147  F09D         	movff	main@AN,?_sprintf+4
  3552  0015E2  C148  F09E         	movff	main@AN+1,?_sprintf+5
  3553  0015E6  C149  F09F         	movff	main@AN+2,?_sprintf+6
  3554  0015EA  C14A  F0A0         	movff	main@AN+3,?_sprintf+7
  3555  0015EE  C14B  F0A1         	movff	main@AN+4,?_sprintf+8
  3556  0015F2  C14C  F0A2         	movff	main@AN+5,?_sprintf+9
  3557  0015F6  EC09  F000         	call	_sprintf	;wreg free
  3558  0015FA  D00F               	goto	l418
  3559  0015FC                     l417:
  3560                           
  3561                           ;HW_CLK.c: 576: else
  3562                           ;HW_CLK.c: 577: sprintf(Buffer,"%-16s", "ayat tema");
  3563  0015FC  0E00               	movlw	low main@Buffer
  3564  0015FE  0100               	movlb	0	; () banked
  3565  001600  6F99               	movwf	sprintf@sp& (0+255),b
  3566  001602  0E01               	movlw	high main@Buffer
  3567  001604  6F9A               	movwf	(sprintf@sp+1)& (0+255),b
  3568  001606  0EE7               	movlw	low STR_39
  3569  001608  6F9B               	movwf	sprintf@f& (0+255),b
  3570  00160A  0EFF               	movlw	high STR_39
  3571  00160C  6F9C               	movwf	(sprintf@f+1)& (0+255),b
  3572  00160E  0E3F               	movlw	low STR_40
  3573  001610  6F9D               	movwf	(?_sprintf+4)& (0+255),b
  3574  001612  0EFF               	movlw	high STR_40
  3575  001614  6F9E               	movwf	(?_sprintf+5)& (0+255),b
  3576  001616  EC09  F000         	call	_sprintf	;wreg free
  3577  00161A                     l418:
  3578                           
  3579                           ;HW_CLK.c: 578: lcd_puts(Buffer);
  3580  00161A  0E00               	movlw	low main@Buffer
  3581  00161C  6E22               	movwf	lcd_puts@s,c
  3582  00161E  0E01               	movlw	high main@Buffer
  3583  001620  6E23               	movwf	lcd_puts@s+1,c
  3584  001622  EC7B  F017         	call	_lcd_puts	;wreg free
  3585                           
  3586                           ;HW_CLK.c: 580: delay_ms(100);
  3587  001626  0E00               	movlw	0
  3588  001628  6E15               	movwf	delay_ms@n+1,c
  3589  00162A  0E64               	movlw	100
  3590  00162C  6E14               	movwf	delay_ms@n,c
  3591  00162E  EC44  F017         	call	_delay_ms	;wreg free
  3592                           
  3593                           ;HW_CLK.c: 581: if(Flags.b2) { delay_ms(200); Flags.b2 =0;}
  3594  001632  0101               	movlb	1	; () banked
  3595  001634  A557               	btfss	_Flags& (0+255),2,b
  3596  001636  D008               	goto	l419
  3597                           
  3598                           ; BSR set to: 1
  3599  001638  0E00               	movlw	0
  3600  00163A  6E15               	movwf	delay_ms@n+1,c
  3601  00163C  0EC8               	movlw	200
  3602  00163E  6E14               	movwf	delay_ms@n,c
  3603  001640  EC44  F017         	call	_delay_ms	;wreg free
  3604  001644  0101               	movlb	1	; () banked
  3605  001646  9557               	bcf	_Flags& (0+255),2,b
  3606  001648                     l419:
  3607                           
  3608                           ; BSR set to: 1
  3609                           ;HW_CLK.c: 582: if(Flags.b1) { delay_ms(200); Flags.b1 =0;}
  3610                           
  3611                           ; BSR set to: 1
  3612  001648  A357               	btfss	_Flags& (0+255),1,b
  3613  00164A  D008               	goto	l420
  3614                           
  3615                           ; BSR set to: 1
  3616  00164C  0E00               	movlw	0
  3617  00164E  6E15               	movwf	delay_ms@n+1,c
  3618  001650  0EC8               	movlw	200
  3619  001652  6E14               	movwf	delay_ms@n,c
  3620  001654  EC44  F017         	call	_delay_ms	;wreg free
  3621  001658  0101               	movlb	1	; () banked
  3622  00165A  9357               	bcf	_Flags& (0+255),1,b
  3623  00165C                     l420:
  3624                           
  3625                           ; BSR set to: 1
  3626                           ;HW_CLK.c: 583: if(Flags.b0) { delay_ms(200); Flags.b0 =0;}
  3627                           
  3628                           ; BSR set to: 1
  3629  00165C  A157               	btfss	_Flags& (0+255),0,b
  3630  00165E  EF07  F000         	goto	start
  3631                           
  3632                           ; BSR set to: 1
  3633  001662  0E00               	movlw	0
  3634  001664  6E15               	movwf	delay_ms@n+1,c
  3635  001666  0EC8               	movlw	200
  3636  001668  6E14               	movwf	delay_ms@n,c
  3637  00166A  EC44  F017         	call	_delay_ms	;wreg free
  3638  00166E  0101               	movlb	1	; () banked
  3639  001670  9157               	bcf	_Flags& (0+255),0,b
  3640                           
  3641                           ; BSR set to: 1
  3642                           
  3643                           ; BSR set to: 1
  3644  001672  EF07  F000         	goto	start
  3645  001676                     __end_of_main:
  3646                           	opt stack 0
  3647                           tblptru	equ	0xFF8
  3648                           tblptrh	equ	0xFF7
  3649                           tblptrl	equ	0xFF6
  3650                           tablat	equ	0xFF5
  3651                           prodh	equ	0xFF4
  3652                           prodl	equ	0xFF3
  3653                           postinc0	equ	0xFEE
  3654                           wreg	equ	0xFE8
  3655                           postdec1	equ	0xFE5
  3656                           fsr1l	equ	0xFE1
  3657                           postinc2	equ	0xFDE
  3658                           postdec2	equ	0xFDD
  3659                           fsr2h	equ	0xFDA
  3660                           fsr2l	equ	0xFD9
  3661                           status	equ	0xFD8
  3662                           
  3663 ;; *************** function _sprintf *****************
  3664 ;; Defined at:
  3665 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3666 ;; Parameters:    Size  Location     Type
  3667 ;;  sp              2   25[BANK0 ] PTR unsigned char 
  3668 ;;		 -> main@Buffer(32), 
  3669 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  3670 ;;		 -> STR_39(6), STR_38(22), STR_37(14), STR_36(16), 
  3671 ;;		 -> STR_31(15), STR_30(21), STR_9(8), STR_8(8), 
  3672 ;;		 -> STR_7(8), STR_6(22), 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  val             4   57[BANK0 ] unsigned long 
  3675 ;;  tmpval          4   53[BANK0 ] struct .
  3676 ;;  fval            3   63[BANK0 ] struct .
  3677 ;;  width           2   70[BANK0 ] int 
  3678 ;;  prec            2   68[BANK0 ] int 
  3679 ;;  flag            2   66[BANK0 ] unsigned short 
  3680 ;;  exp             2   61[BANK0 ] int 
  3681 ;;  len             2   51[BANK0 ] unsigned int 
  3682 ;;  ap              2   49[BANK0 ] PTR void [1]
  3683 ;;		 -> ?_sprintf(2), 
  3684 ;;  cp              2   47[BANK0 ] PTR const unsigned char 
  3685 ;;		 -> STR_41(7), STR_40(10), STR_35(4), STR_34(3), 
  3686 ;;		 -> STR_33(4), STR_32(3), STR_5(8), STR_4(7), 
  3687 ;;		 -> STR_3(3), STR_2(4), STR_1(4), 
  3688 ;;  c               1   72[BANK0 ] char 
  3689 ;;  d               1    0        unsigned char 
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  2   25[BANK0 ] int 
  3692 ;; Registers used:
  3693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3699 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3700 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3701 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3702 ;;      Totals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;Total ram usage:       48 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; Hardware stack levels required when called:    5
  3706 ;; This function calls:
  3707 ;;		___awdiv
  3708 ;;		___ftadd
  3709 ;;		___ftge
  3710 ;;		___ftmul
  3711 ;;		___ftneg
  3712 ;;		___ftsub
  3713 ;;		___fttol
  3714 ;;		___lldiv
  3715 ;;		___llmod
  3716 ;;		___lltoft
  3717 ;;		___wmul
  3718 ;;		__div_to_l_
  3719 ;;		__tdiv_to_l_
  3720 ;;		_fround
  3721 ;;		_isdigit
  3722 ;;		_scale
  3723 ;; This function is called by:
  3724 ;;		_main
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           	psect	text1
  3729  000012                     __ptext1:
  3730                           	opt stack 0
  3731  000012                     _sprintf:
  3732                           	opt stack 25
  3733                           
  3734                           ;doprnt.c: 494: va_list ap;
  3735                           ;doprnt.c: 499: signed char c;
  3736                           ;doprnt.c: 501: int width;
  3737                           ;doprnt.c: 504: int prec;
  3738                           ;doprnt.c: 508: unsigned short flag;
  3739                           ;doprnt.c: 515: char d;
  3740                           ;doprnt.c: 516: double fval;
  3741                           ;doprnt.c: 517: int exp;
  3742                           ;doprnt.c: 523: union {
  3743                           ;doprnt.c: 524: unsigned long vd;
  3744                           ;doprnt.c: 525: double integ;
  3745                           ;doprnt.c: 526: } tmpval;
  3746                           ;doprnt.c: 528: unsigned long val;
  3747                           ;doprnt.c: 529: unsigned len;
  3748                           ;doprnt.c: 530: const char * cp;
  3749                           ;doprnt.c: 533: *ap = __va_start();
  3750                           
  3751                           ; BSR set to: 1
  3752                           ;incstack = 0
  3753  000012  0E9D               	movlw	low (?_sprintf+4)
  3754  000014  0100               	movlb	0	; () banked
  3755  000016  6FB1               	movwf	sprintf@ap& (0+255),b
  3756  000018  0E00               	movlw	high (?_sprintf+4)
  3757  00001A  6FB2               	movwf	(sprintf@ap+1)& (0+255),b
  3758                           
  3759                           ;doprnt.c: 536: while(c = *f++) {
  3760  00001C  EF10  F006         	goto	u7410
  3761  000020                     
  3762                           ; BSR set to: 0
  3763                           ;doprnt.c: 538: if(c != '%')
  3764                           
  3765                           ; BSR set to: 0
  3766  000020  0E25               	movlw	37
  3767  000022  19C8               	xorwf	sprintf@c& (0+255),w,b
  3768  000024  B4D8               	btfsc	status,2,c
  3769  000026  D00A               	goto	l459
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;doprnt.c: 540: {
  3773                           ;doprnt.c: 541: ((*sp++ = (c)));
  3774  000028  C099  FFD9         	movff	sprintf@sp,fsr2l
  3775  00002C  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  3776  000030  C0C8  FFDF         	movff	sprintf@c,indf2
  3777                           
  3778                           ; BSR set to: 0
  3779  000034  4B99               	infsnz	sprintf@sp& (0+255),f,b
  3780  000036  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  3781                           
  3782                           ;doprnt.c: 542: continue;
  3783  000038  EF10  F006         	goto	u7410
  3784  00003C                     l459:
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;doprnt.c: 543: }
  3788                           ;doprnt.c: 546: width = 0;
  3789                           
  3790                           ; BSR set to: 0
  3791  00003C  0E00               	movlw	0
  3792  00003E  6FC7               	movwf	(sprintf@width+1)& (0+255),b
  3793  000040  0E00               	movlw	0
  3794  000042  6FC6               	movwf	sprintf@width& (0+255),b
  3795                           
  3796                           ;doprnt.c: 548: flag = 0;
  3797  000044  0E00               	movlw	0
  3798  000046  6FC3               	movwf	(sprintf@flag+1)& (0+255),b
  3799  000048  0E00               	movlw	0
  3800  00004A  6FC2               	movwf	sprintf@flag& (0+255),b
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;doprnt.c: 551: switch(*f) {
  3804                           
  3805                           ;doprnt.c: 550: for(;;) {
  3806  00004C  D007               	goto	l461
  3807  00004E                     
  3808                           ;doprnt.c: 554: flag |= 0x08;
  3809                           
  3810                           ; BSR set to: 0
  3811  00004E  0100               	movlb	0	; () banked
  3812  000050  87C2               	bsf	sprintf@flag& (0+255),3,b
  3813  000052  D002               	goto	L3
  3814  000054                     
  3815                           ;doprnt.c: 580: flag |= 0x04;
  3816                           
  3817                           ; BSR set to: 0
  3818  000054  0100               	movlb	0	; () banked
  3819  000056  85C2               	bsf	sprintf@flag& (0+255),2,b
  3820  000058                     L3:
  3821                           
  3822                           ;doprnt.c: 581: f++;
  3823  000058  4B9B               	infsnz	sprintf@f& (0+255),f,b
  3824  00005A  2B9C               	incf	(sprintf@f+1)& (0+255),f,b
  3825  00005C                     l461:
  3826                           
  3827                           ; BSR set to: 0
  3828  00005C  C09B  FFF6         	movff	sprintf@f,tblptrl
  3829  000060  C09C  FFF7         	movff	sprintf@f+1,tblptrh
  3830  000064                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3831  000064  6AF8               	clrf	tblptru,c
  3832  000066                     	endif
  3833  000066                     	if	0	;tblptru may be non-zero
  3834  000066                     	endif
  3835  000066  0008               	tblrd		*
  3836  000068  50F5               	movf	tablat,w,c
  3837                           
  3838                           ; Switch size 1, requested type "space"
  3839                           ; Number of cases is 2, Range of values is 45 to 48
  3840                           ; switch strategies available:
  3841                           ; Name         Instructions Cycles
  3842                           ; simple_byte            7     4 (average)
  3843                           ;	Chosen strategy is simple_byte
  3844  00006A  0A2D               	xorlw	45	; case 45
  3845  00006C  B4D8               	btfsc	status,2,c
  3846  00006E  D7EF               	goto	l462
  3847  000070  0A1D               	xorlw	29	; case 48
  3848  000072  B4D8               	btfsc	status,2,c
  3849  000074  D7EF               	goto	l464
  3850                           
  3851                           ;doprnt.c: 593: if(flag & 0x08)
  3852                           
  3853                           ;doprnt.c: 586: }
  3854                           
  3855                           ;doprnt.c: 585: break;
  3856  000076  0100               	movlb	0	; () banked
  3857  000078  B7C2               	btfsc	sprintf@flag& (0+255),3,b
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;doprnt.c: 594: flag &= ~0x04;
  3861  00007A  95C2               	bcf	sprintf@flag& (0+255),2,b
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3865                           
  3866                           ; BSR set to: 0
  3867  00007C  C09B  FFF6         	movff	sprintf@f,tblptrl
  3868  000080  C09C  FFF7         	movff	sprintf@f+1,tblptrh
  3869  000084                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3870  000084  6AF8               	clrf	tblptru,c
  3871  000086                     	endif
  3872  000086                     	if	0	;tblptru may be non-zero
  3873  000086                     	endif
  3874  000086  0008               	tblrd		*
  3875  000088  50F5               	movf	tablat,w,c
  3876  00008A  EC9E  F017         	call	_isdigit
  3877  00008E  A0D8               	btfss	status,0,c
  3878  000090  D036               	goto	u6700
  3879                           
  3880                           ;doprnt.c: 598: width = 0;
  3881  000092  0E00               	movlw	0
  3882  000094  0100               	movlb	0	; () banked
  3883  000096  6FC7               	movwf	(sprintf@width+1)& (0+255),b
  3884  000098  0E00               	movlw	0
  3885  00009A  6FC6               	movwf	sprintf@width& (0+255),b
  3886  00009C                     
  3887                           ;doprnt.c: 600: width *= 10;
  3888                           
  3889                           ; BSR set to: 0
  3890  00009C  C0C6  F022         	movff	sprintf@width,___wmul@multiplier
  3891  0000A0  C0C7  F023         	movff	sprintf@width+1,___wmul@multiplier+1
  3892  0000A4  0E00               	movlw	0
  3893  0000A6  6E25               	movwf	___wmul@multiplicand+1,c
  3894  0000A8  0E0A               	movlw	10
  3895  0000AA  6E24               	movwf	___wmul@multiplicand,c
  3896  0000AC  EC31  F017         	call	___wmul	;wreg free
  3897  0000B0  C022  F0C6         	movff	?___wmul,sprintf@width
  3898  0000B4  C023  F0C7         	movff	?___wmul+1,sprintf@width+1
  3899                           
  3900                           ;doprnt.c: 601: width += *f++ - '0';
  3901  0000B8  0ED0               	movlw	208
  3902  0000BA  0100               	movlb	0	; () banked
  3903  0000BC  6FA6               	movwf	??_sprintf& (0+255),b
  3904  0000BE  0EFF               	movlw	255
  3905  0000C0  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  3906  0000C2  C09B  FFF6         	movff	sprintf@f,tblptrl
  3907  0000C6  C09C  FFF7         	movff	sprintf@f+1,tblptrh
  3908  0000CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3909  0000CA  6AF8               	clrf	tblptru,c
  3910  0000CC                     	endif
  3911  0000CC                     	if	0	;tblptru may be non-zero
  3912  0000CC                     	endif
  3913  0000CC  0008               	tblrd		*
  3914  0000CE  50F5               	movf	tablat,w,c
  3915  0000D0  6FA8               	movwf	(??_sprintf+2)& (0+255),b
  3916  0000D2  6BA9               	clrf	(??_sprintf+3)& (0+255),b
  3917  0000D4  51A6               	movf	??_sprintf& (0+255),w,b
  3918  0000D6  27A8               	addwf	(??_sprintf+2)& (0+255),f,b
  3919  0000D8  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  3920  0000DA  23A9               	addwfc	(??_sprintf+3)& (0+255),f,b
  3921  0000DC  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  3922  0000DE  27C6               	addwf	sprintf@width& (0+255),f,b
  3923  0000E0  51A9               	movf	(??_sprintf+3)& (0+255),w,b
  3924  0000E2  23C7               	addwfc	(sprintf@width+1)& (0+255),f,b
  3925                           
  3926                           ; BSR set to: 0
  3927  0000E4  4B9B               	infsnz	sprintf@f& (0+255),f,b
  3928  0000E6  2B9C               	incf	(sprintf@f+1)& (0+255),f,b
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3932  0000E8  C09B  FFF6         	movff	sprintf@f,tblptrl
  3933  0000EC  C09C  FFF7         	movff	sprintf@f+1,tblptrh
  3934  0000F0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3935  0000F0  6AF8               	clrf	tblptru,c
  3936  0000F2                     	endif
  3937  0000F2                     	if	0	;tblptru may be non-zero
  3938  0000F2                     	endif
  3939  0000F2  0008               	tblrd		*
  3940  0000F4  50F5               	movf	tablat,w,c
  3941  0000F6  EC9E  F017         	call	_isdigit
  3942  0000FA  B0D8               	btfsc	status,0,c
  3943  0000FC  D7CF               	goto	l469
  3944  0000FE                     u6700:
  3945                           
  3946                           ;doprnt.c: 608: }
  3947                           ;doprnt.c: 611: if(*f == '.') {
  3948  0000FE  C09B  FFF6         	movff	sprintf@f,tblptrl
  3949  000102  C09C  FFF7         	movff	sprintf@f+1,tblptrh
  3950  000106                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3951  000106  6AF8               	clrf	tblptru,c
  3952  000108                     	endif
  3953  000108                     	if	0	;tblptru may be non-zero
  3954  000108                     	endif
  3955  000108  0008               	tblrd		*
  3956  00010A  50F5               	movf	tablat,w,c
  3957  00010C  0A2E               	xorlw	46
  3958  00010E  A4D8               	btfss	status,2,c
  3959  000110  D032               	goto	l471
  3960                           
  3961                           ;doprnt.c: 612: flag |= 0x4000;
  3962  000112  0100               	movlb	0	; () banked
  3963  000114  8DC3               	bsf	(sprintf@flag+1)& (0+255),6,b
  3964                           
  3965                           ;doprnt.c: 613: f++;
  3966  000116  4B9B               	infsnz	sprintf@f& (0+255),f,b
  3967  000118  2B9C               	incf	(sprintf@f+1)& (0+255),f,b
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;doprnt.c: 620: {
  3971                           ;doprnt.c: 621: prec = 0;
  3972  00011A  0E00               	movlw	0
  3973  00011C  6FC5               	movwf	(sprintf@prec+1)& (0+255),b
  3974  00011E  0E00               	movlw	0
  3975  000120  6FC4               	movwf	sprintf@prec& (0+255),b
  3976                           
  3977                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3978  000122  D01D               	goto	l472
  3979  000124                     
  3980                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3981                           
  3982                           ; BSR set to: 0
  3983  000124  C0C4  F022         	movff	sprintf@prec,___wmul@multiplier
  3984  000128  C0C5  F023         	movff	sprintf@prec+1,___wmul@multiplier+1
  3985  00012C  0E00               	movlw	0
  3986  00012E  6E25               	movwf	___wmul@multiplicand+1,c
  3987  000130  0E0A               	movlw	10
  3988  000132  6E24               	movwf	___wmul@multiplicand,c
  3989  000134  EC31  F017         	call	___wmul	;wreg free
  3990  000138  C09B  FFF6         	movff	sprintf@f,tblptrl
  3991  00013C  C09C  FFF7         	movff	sprintf@f+1,tblptrh
  3992  000140                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3993  000140  6AF8               	clrf	tblptru,c
  3994  000142                     	endif
  3995  000142                     	if	0	;tblptru may be non-zero
  3996  000142                     	endif
  3997  000142  0008               	tblrd		*
  3998  000144  50F5               	movf	tablat,w,c
  3999  000146  2622               	addwf	?___wmul,f,c
  4000  000148  0E00               	movlw	0
  4001  00014A  2223               	addwfc	?___wmul+1,f,c
  4002  00014C  0ED0               	movlw	208
  4003  00014E  2422               	addwf	?___wmul,w,c
  4004  000150  0100               	movlb	0	; () banked
  4005  000152  6FC4               	movwf	sprintf@prec& (0+255),b
  4006  000154  0EFF               	movlw	255
  4007  000156  2023               	addwfc	?___wmul+1,w,c
  4008  000158  6FC5               	movwf	(sprintf@prec+1)& (0+255),b
  4009                           
  4010                           ; BSR set to: 0
  4011  00015A  4B9B               	infsnz	sprintf@f& (0+255),f,b
  4012  00015C  2B9C               	incf	(sprintf@f+1)& (0+255),f,b
  4013  00015E                     l472:
  4014                           
  4015                           ; BSR set to: 0
  4016                           
  4017                           ; BSR set to: 0
  4018  00015E  C09B  FFF6         	movff	sprintf@f,tblptrl
  4019  000162  C09C  FFF7         	movff	sprintf@f+1,tblptrh
  4020  000166                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4021  000166  6AF8               	clrf	tblptru,c
  4022  000168                     	endif
  4023  000168                     	if	0	;tblptru may be non-zero
  4024  000168                     	endif
  4025  000168  0008               	tblrd		*
  4026  00016A  50F5               	movf	tablat,w,c
  4027  00016C  EC9E  F017         	call	_isdigit
  4028  000170  A0D8               	btfss	status,0,c
  4029  000172  D094               	goto	l476
  4030  000174  D7D7               	goto	l473
  4031  000176                     l471:
  4032                           
  4033                           ;doprnt.c: 626: prec = 0;
  4034  000176  0E00               	movlw	0
  4035  000178  0100               	movlb	0	; () banked
  4036  00017A  6FC5               	movwf	(sprintf@prec+1)& (0+255),b
  4037  00017C  0E00               	movlw	0
  4038  00017E  6FC4               	movwf	sprintf@prec& (0+255),b
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;doprnt.c: 628: flag |= 0x1000;
  4042  000180  89C3               	bsf	(sprintf@flag+1)& (0+255),4,b
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;doprnt.c: 630: }
  4046                           ;doprnt.c: 635: switch(c = *f++) {
  4047  000182  D08C               	goto	l476
  4048  000184                     
  4049                           ; BSR set to: 0
  4050                           ;doprnt.c: 663: flag |= 0x400;
  4051                           
  4052                           ; BSR set to: 0
  4053  000184  85C3               	bsf	(sprintf@flag+1)& (0+255),2,b
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;doprnt.c: 698: case 'i':
  4057                           ;doprnt.c: 699: break;
  4058                           
  4059                           ; BSR set to: 0
  4060                           
  4061                           ;doprnt.c: 697: case 'd':
  4062                           
  4063                           ;doprnt.c: 664: break;
  4064  000186  D0A8               	goto	l480
  4065  000188                     
  4066                           ; BSR set to: 0
  4067                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4068                           
  4069                           ; BSR set to: 0
  4070  000188  C0B1  FFD9         	movff	sprintf@ap,fsr2l
  4071  00018C  C0B2  FFDA         	movff	sprintf@ap+1,fsr2h
  4072  000190  CFDE F0AF          	movff	postinc2,sprintf@cp
  4073  000194  CFDD F0B0          	movff	postdec2,sprintf@cp+1
  4074                           
  4075                           ; BSR set to: 0
  4076  000198  0E02               	movlw	2
  4077  00019A  27B1               	addwf	sprintf@ap& (0+255),f,b
  4078  00019C  0E00               	movlw	0
  4079  00019E  23B2               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;doprnt.c: 740: if(!cp)
  4083  0001A0  51AF               	movf	sprintf@cp& (0+255),w,b
  4084  0001A2  11B0               	iorwf	(sprintf@cp+1)& (0+255),w,b
  4085  0001A4  A4D8               	btfss	status,2,c
  4086  0001A6  D004               	goto	l484
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;doprnt.c: 741: cp = "(null)";
  4090  0001A8  0EA1               	movlw	low STR_41
  4091  0001AA  6FAF               	movwf	sprintf@cp& (0+255),b
  4092  0001AC  0EFF               	movlw	high STR_41
  4093  0001AE  6FB0               	movwf	(sprintf@cp+1)& (0+255),b
  4094  0001B0                     l484:
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;doprnt.c: 745: len = 0;
  4098                           
  4099                           ; BSR set to: 0
  4100  0001B0  0E00               	movlw	0
  4101  0001B2  6FB4               	movwf	(sprintf@len+1)& (0+255),b
  4102  0001B4  0E00               	movlw	0
  4103  0001B6  6FB3               	movwf	sprintf@len& (0+255),b
  4104                           
  4105                           ;doprnt.c: 746: while(cp[len])
  4106  0001B8  D002               	goto	l485
  4107  0001BA                     
  4108                           ; BSR set to: 0
  4109                           ;doprnt.c: 747: len++;
  4110                           
  4111                           ; BSR set to: 0
  4112  0001BA  4BB3               	infsnz	sprintf@len& (0+255),f,b
  4113  0001BC  2BB4               	incf	(sprintf@len+1)& (0+255),f,b
  4114  0001BE                     l485:
  4115                           
  4116                           ; BSR set to: 0
  4117                           
  4118                           ; BSR set to: 0
  4119  0001BE  51B3               	movf	sprintf@len& (0+255),w,b
  4120  0001C0  25AF               	addwf	sprintf@cp& (0+255),w,b
  4121  0001C2  6FA6               	movwf	??_sprintf& (0+255),b
  4122  0001C4  51B4               	movf	(sprintf@len+1)& (0+255),w,b
  4123  0001C6  21B0               	addwfc	(sprintf@cp+1)& (0+255),w,b
  4124  0001C8  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  4125  0001CA  C0A6  FFF6         	movff	??_sprintf,tblptrl
  4126  0001CE  C0A7  FFF7         	movff	??_sprintf+1,tblptrh
  4127  0001D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4128  0001D2  6AF8               	clrf	tblptru,c
  4129  0001D4                     	endif
  4130  0001D4                     	if	0	;tblptru may be non-zero
  4131  0001D4                     	endif
  4132  0001D4  0008               	tblrd		*
  4133  0001D6  50F5               	movf	tablat,w,c
  4134  0001D8  0900               	iorlw	0
  4135  0001DA  A4D8               	btfss	status,2,c
  4136  0001DC  D7EE               	goto	l486
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;doprnt.c: 753: if(prec && prec < len)
  4140                           
  4141                           ; BSR set to: 0
  4142  0001DE  51C4               	movf	sprintf@prec& (0+255),w,b
  4143  0001E0  11C5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4144  0001E2  B4D8               	btfsc	status,2,c
  4145  0001E4  D00A               	goto	l488
  4146                           
  4147                           ; BSR set to: 0
  4148  0001E6  51B3               	movf	sprintf@len& (0+255),w,b
  4149  0001E8  5DC4               	subwf	sprintf@prec& (0+255),w,b
  4150  0001EA  51B4               	movf	(sprintf@len+1)& (0+255),w,b
  4151  0001EC  59C5               	subwfb	(sprintf@prec+1)& (0+255),w,b
  4152  0001EE  B0D8               	btfsc	status,0,c
  4153  0001F0  D004               	goto	l488
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;doprnt.c: 754: len = prec;
  4157  0001F2  C0C4  F0B3         	movff	sprintf@prec,sprintf@len
  4158  0001F6  C0C5  F0B4         	movff	sprintf@prec+1,sprintf@len+1
  4159  0001FA                     l488:
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;doprnt.c: 757: if(width > len)
  4163                           
  4164                           ; BSR set to: 0
  4165  0001FA  51C6               	movf	sprintf@width& (0+255),w,b
  4166  0001FC  5DB3               	subwf	sprintf@len& (0+255),w,b
  4167  0001FE  51C7               	movf	(sprintf@width+1)& (0+255),w,b
  4168  000200  59B4               	subwfb	(sprintf@len+1)& (0+255),w,b
  4169  000202  B0D8               	btfsc	status,0,c
  4170  000204  D005               	goto	l489
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;doprnt.c: 758: width -= len;
  4174  000206  51B3               	movf	sprintf@len& (0+255),w,b
  4175  000208  5FC6               	subwf	sprintf@width& (0+255),f,b
  4176  00020A  51B4               	movf	(sprintf@len+1)& (0+255),w,b
  4177  00020C  5BC7               	subwfb	(sprintf@width+1)& (0+255),f,b
  4178  00020E  D004               	goto	l490
  4179  000210                     l489:
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;doprnt.c: 759: else
  4183                           ;doprnt.c: 760: width = 0;
  4184                           
  4185                           ; BSR set to: 0
  4186  000210  0E00               	movlw	0
  4187  000212  6FC7               	movwf	(sprintf@width+1)& (0+255),b
  4188  000214  0E00               	movlw	0
  4189  000216  6FC6               	movwf	sprintf@width& (0+255),b
  4190  000218                     l490:
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;doprnt.c: 762: if(!(flag & 0x08))
  4194                           
  4195                           ; BSR set to: 0
  4196  000218  A7C2               	btfss	sprintf@flag& (0+255),3,b
  4197  00021A  D009               	goto	l492
  4198  00021C  D021               	goto	l495
  4199  00021E                     l5336:
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;doprnt.c: 765: ((*sp++ = (' ')));
  4203  00021E  C099  FFD9         	movff	sprintf@sp,fsr2l
  4204  000222  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  4205  000226  0E20               	movlw	32
  4206  000228  6EDF               	movwf	indf2,c
  4207                           
  4208                           ; BSR set to: 0
  4209  00022A  4B99               	infsnz	sprintf@sp& (0+255),f,b
  4210  00022C  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  4211  00022E                     l492:
  4212                           
  4213                           ; BSR set to: 0
  4214                           
  4215                           ; BSR set to: 0
  4216  00022E  07C6               	decf	sprintf@width& (0+255),f,b
  4217  000230  A0D8               	btfss	status,0,c
  4218  000232  07C7               	decf	(sprintf@width+1)& (0+255),f,b
  4219  000234  29C6               	incf	sprintf@width& (0+255),w,b
  4220  000236  E1F3               	bnz	l5336
  4221  000238  29C7               	incf	(sprintf@width+1)& (0+255),w,b
  4222  00023A  B4D8               	btfsc	status,2,c
  4223  00023C  D011               	goto	l495
  4224  00023E  D7EF               	goto	l493
  4225  000240                     l5342:
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  4229  000240  C0AF  FFF6         	movff	sprintf@cp,tblptrl
  4230  000244  C0B0  FFF7         	movff	sprintf@cp+1,tblptrh
  4231  000248                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4232  000248  6AF8               	clrf	tblptru,c
  4233  00024A                     	endif
  4234  00024A                     	if	0	;tblptru may be non-zero
  4235  00024A                     	endif
  4236  00024A  C099  FFD9         	movff	sprintf@sp,fsr2l
  4237  00024E  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  4238  000252  0008               	tblrd		*
  4239  000254  CFF5 FFDF          	movff	tablat,indf2
  4240                           
  4241                           ; BSR set to: 0
  4242  000258  4BAF               	infsnz	sprintf@cp& (0+255),f,b
  4243  00025A  2BB0               	incf	(sprintf@cp+1)& (0+255),f,b
  4244                           
  4245                           ; BSR set to: 0
  4246  00025C  4B99               	infsnz	sprintf@sp& (0+255),f,b
  4247  00025E  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  4248  000260                     l495:
  4249                           
  4250                           ; BSR set to: 0
  4251                           
  4252                           ; BSR set to: 0
  4253  000260  07B3               	decf	sprintf@len& (0+255),f,b
  4254  000262  A0D8               	btfss	status,0,c
  4255  000264  07B4               	decf	(sprintf@len+1)& (0+255),f,b
  4256  000266  29B3               	incf	sprintf@len& (0+255),w,b
  4257  000268  E1EB               	bnz	l5342
  4258  00026A  29B4               	incf	(sprintf@len+1)& (0+255),w,b
  4259  00026C  A4D8               	btfss	status,2,c
  4260  00026E  D7E8               	goto	l496
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;doprnt.c: 770: if(flag & 0x08)
  4264  000270  B7C2               	btfsc	sprintf@flag& (0+255),3,b
  4265  000272  D00A               	goto	l499
  4266  000274  EF10  F006         	goto	u7410
  4267  000278                     l5352:
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;doprnt.c: 772: ((*sp++ = (' ')));
  4271  000278  C099  FFD9         	movff	sprintf@sp,fsr2l
  4272  00027C  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  4273  000280  0E20               	movlw	32
  4274  000282  6EDF               	movwf	indf2,c
  4275                           
  4276                           ; BSR set to: 0
  4277  000284  4B99               	infsnz	sprintf@sp& (0+255),f,b
  4278  000286  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  4279  000288                     l499:
  4280                           
  4281                           ; BSR set to: 0
  4282                           
  4283                           ; BSR set to: 0
  4284  000288  07C6               	decf	sprintf@width& (0+255),f,b
  4285  00028A  A0D8               	btfss	status,0,c
  4286  00028C  07C7               	decf	(sprintf@width+1)& (0+255),f,b
  4287  00028E  29C6               	incf	sprintf@width& (0+255),w,b
  4288  000290  E1F3               	bnz	l5352
  4289  000292  29C7               	incf	(sprintf@width+1)& (0+255),w,b
  4290  000294  B4D8               	btfsc	status,2,c
  4291  000296  EF10  F006         	goto	u7410
  4292  00029A  D7EE               	goto	l500
  4293  00029C                     l476:
  4294                           
  4295                           ; BSR set to: 0
  4296  00029C  C09B  FFF6         	movff	sprintf@f,tblptrl
  4297  0002A0  C09C  FFF7         	movff	sprintf@f+1,tblptrh
  4298  0002A4  0100               	movlb	0	; () banked
  4299  0002A6  4B9B               	infsnz	sprintf@f& (0+255),f,b
  4300  0002A8  2B9C               	incf	(sprintf@f+1)& (0+255),f,b
  4301  0002AA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4302  0002AA  6AF8               	clrf	tblptru,c
  4303  0002AC                     	endif
  4304  0002AC                     	if	0	;tblptru may be non-zero
  4305  0002AC                     	endif
  4306  0002AC  0008               	tblrd		*
  4307  0002AE  CFF5 F0C8          	movff	tablat,sprintf@c
  4308  0002B2  51C8               	movf	sprintf@c& (0+255),w,b
  4309                           
  4310                           ; Switch size 1, requested type "space"
  4311                           ; Number of cases is 5, Range of values is 0 to 115
  4312                           ; switch strategies available:
  4313                           ; Name         Instructions Cycles
  4314                           ; simple_byte           16     9 (average)
  4315                           ;	Chosen strategy is simple_byte
  4316  0002B4  0A00               	xorlw	0	; case 0
  4317  0002B6  B4D8               	btfsc	status,2,c
  4318  0002B8  EF1E  F006         	goto	u7420
  4319  0002BC  0A64               	xorlw	100	; case 100
  4320  0002BE  B4D8               	btfsc	status,2,c
  4321  0002C0  D00B               	goto	l480
  4322  0002C2  0A02               	xorlw	2	; case 102
  4323  0002C4  B4D8               	btfsc	status,2,c
  4324  0002C6  D75E               	goto	l479
  4325  0002C8  0A0F               	xorlw	15	; case 105
  4326  0002CA  B4D8               	btfsc	status,2,c
  4327  0002CC  D005               	goto	l480
  4328  0002CE  0A1A               	xorlw	26	; case 115
  4329  0002D0  B4D8               	btfsc	status,2,c
  4330  0002D2  D75A               	goto	l483
  4331  0002D4  EF10  F006         	goto	u7410
  4332  0002D8                     l480:
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;doprnt.c: 825: if(flag & (0x700)) {
  4336                           
  4337                           ; BSR set to: 0
  4338  0002D8  0E07               	movlw	7
  4339  0002DA  15C3               	andwf	(sprintf@flag+1)& (0+255),w,b
  4340  0002DC  B4D8               	btfsc	status,2,c
  4341  0002DE  D34D               	goto	l503
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;doprnt.c: 827: if(flag & 0x1000)
  4345  0002E0  A9C3               	btfss	(sprintf@flag+1)& (0+255),4,b
  4346  0002E2  D004               	goto	l504
  4347                           
  4348                           ; BSR set to: 0
  4349                           ;doprnt.c: 829: prec = 6;
  4350  0002E4  0E00               	movlw	0
  4351  0002E6  6FC5               	movwf	(sprintf@prec+1)& (0+255),b
  4352  0002E8  0E06               	movlw	6
  4353  0002EA  6FC4               	movwf	sprintf@prec& (0+255),b
  4354  0002EC                     l504:
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4358                           
  4359                           ; BSR set to: 0
  4360  0002EC  C0B1  FFD9         	movff	sprintf@ap,fsr2l
  4361  0002F0  C0B2  FFDA         	movff	sprintf@ap+1,fsr2h
  4362  0002F4  CFDE F0BF          	movff	postinc2,sprintf@fval
  4363  0002F8  CFDE F0C0          	movff	postinc2,sprintf@fval+1
  4364  0002FC  CFDD F0C1          	movff	postdec2,sprintf@fval+2
  4365                           
  4366                           ; BSR set to: 0
  4367  000300  0E03               	movlw	3
  4368  000302  27B1               	addwf	sprintf@ap& (0+255),f,b
  4369  000304  0E00               	movlw	0
  4370  000306  23B2               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;doprnt.c: 831: if(fval < 0.0) {
  4374  000308  AFC1               	btfss	(sprintf@fval+2)& (0+255),7,b
  4375  00030A  D011               	goto	l505
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;doprnt.c: 832: fval = -fval;
  4379  00030C  C0BF  F014         	movff	sprintf@fval,___ftneg@f1
  4380  000310  C0C0  F015         	movff	sprintf@fval+1,___ftneg@f1+1
  4381  000314  C0C1  F016         	movff	sprintf@fval+2,___ftneg@f1+2
  4382  000318  EC57  F017         	call	___ftneg	;wreg free
  4383  00031C  C014  F0BF         	movff	?___ftneg,sprintf@fval
  4384  000320  C015  F0C0         	movff	?___ftneg+1,sprintf@fval+1
  4385  000324  C016  F0C1         	movff	?___ftneg+2,sprintf@fval+2
  4386                           
  4387                           ;doprnt.c: 833: flag |= 0x03;
  4388  000328  0E03               	movlw	3
  4389  00032A  0100               	movlb	0	; () banked
  4390  00032C  13C2               	iorwf	sprintf@flag& (0+255),f,b
  4391  00032E                     l505:
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;doprnt.c: 834: }
  4395                           ;doprnt.c: 835: exp = 0;
  4396                           
  4397                           ; BSR set to: 0
  4398  00032E  0E00               	movlw	0
  4399  000330  6FBE               	movwf	(sprintf@exp+1)& (0+255),b
  4400  000332  0E00               	movlw	0
  4401  000334  6FBD               	movwf	sprintf@exp& (0+255),b
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;doprnt.c: 836: if( fval!=0) {
  4405  000336  51BF               	movf	sprintf@fval& (0+255),w,b
  4406  000338  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4407  00033A  11C1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4408  00033C  B4D8               	btfsc	status,2,c
  4409  00033E  D086               	goto	l510
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4413  000340  0E82               	movlw	130
  4414  000342  6FA6               	movwf	??_sprintf& (0+255),b
  4415  000344  0EFF               	movlw	255
  4416  000346  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  4417  000348  C0BF  F0A8         	movff	sprintf@fval,??_sprintf+2
  4418  00034C  C0C0  F0A9         	movff	sprintf@fval+1,??_sprintf+3
  4419  000350  C0C1  F0AA         	movff	sprintf@fval+2,??_sprintf+4
  4420  000354  C0C2  F0AB         	movff	sprintf@fval+3,??_sprintf+5
  4421  000358  0E10               	movlw	16
  4422  00035A  D005               	goto	u6870
  4423  00035C                     u6875:
  4424  00035C  90D8               	bcf	status,0,c
  4425  00035E  33AB               	rrcf	(??_sprintf+5)& (0+255),f,b
  4426  000360  33AA               	rrcf	(??_sprintf+4)& (0+255),f,b
  4427  000362  33A9               	rrcf	(??_sprintf+3)& (0+255),f,b
  4428  000364  33A8               	rrcf	(??_sprintf+2)& (0+255),f,b
  4429  000366                     u6870:
  4430  000366  2EE8               	decfsz	wreg,f,c
  4431  000368  D7F9               	goto	u6875
  4432  00036A  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  4433  00036C  25A6               	addwf	??_sprintf& (0+255),w,b
  4434  00036E  6FBD               	movwf	sprintf@exp& (0+255),b
  4435  000370  0E00               	movlw	0
  4436  000372  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  4437  000374  6FBE               	movwf	(sprintf@exp+1)& (0+255),b
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;doprnt.c: 838: exp--;
  4441  000376  07BD               	decf	sprintf@exp& (0+255),f,b
  4442  000378  A0D8               	btfss	status,0,c
  4443  00037A  07BE               	decf	(sprintf@exp+1)& (0+255),f,b
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;doprnt.c: 839: exp *= 3;
  4447  00037C  C0BD  F022         	movff	sprintf@exp,___wmul@multiplier
  4448  000380  C0BE  F023         	movff	sprintf@exp+1,___wmul@multiplier+1
  4449  000384  0E00               	movlw	0
  4450  000386  6E25               	movwf	___wmul@multiplicand+1,c
  4451  000388  0E03               	movlw	3
  4452  00038A  6E24               	movwf	___wmul@multiplicand,c
  4453  00038C  EC31  F017         	call	___wmul	;wreg free
  4454  000390  C022  F0BD         	movff	?___wmul,sprintf@exp
  4455  000394  C023  F0BE         	movff	?___wmul+1,sprintf@exp+1
  4456                           
  4457                           ;doprnt.c: 840: exp /= 10;
  4458  000398  C0BD  F01A         	movff	sprintf@exp,___awdiv@dividend
  4459  00039C  C0BE  F01B         	movff	sprintf@exp+1,___awdiv@dividend+1
  4460  0003A0  0E00               	movlw	0
  4461  0003A2  6E1D               	movwf	___awdiv@divisor+1,c
  4462  0003A4  0E0A               	movlw	10
  4463  0003A6  6E1C               	movwf	___awdiv@divisor,c
  4464  0003A8  ECD8  F013         	call	___awdiv	;wreg free
  4465  0003AC  C01A  F0BD         	movff	?___awdiv,sprintf@exp
  4466  0003B0  C01B  F0BE         	movff	?___awdiv+1,sprintf@exp+1
  4467                           
  4468                           ;doprnt.c: 841: if(exp < 0)
  4469  0003B4  0100               	movlb	0	; () banked
  4470  0003B6  AFBE               	btfss	(sprintf@exp+1)& (0+255),7,b
  4471  0003B8  D003               	goto	l507
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;doprnt.c: 842: exp--;
  4475  0003BA  07BD               	decf	sprintf@exp& (0+255),f,b
  4476  0003BC  A0D8               	btfss	status,0,c
  4477  0003BE  07BE               	decf	(sprintf@exp+1)& (0+255),f,b
  4478  0003C0                     l507:
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4482                           
  4483                           ; BSR set to: 0
  4484  0003C0  51BD               	movf	sprintf@exp& (0+255),w,b
  4485  0003C2  0800               	sublw	0
  4486  0003C4  EC3B  F00B         	call	_scale
  4487  0003C8  C053  F0B5         	movff	?_scale,sprintf@tmpval
  4488  0003CC  C054  F0B6         	movff	?_scale+1,sprintf@tmpval+1
  4489  0003D0  C055  F0B7         	movff	?_scale+2,sprintf@tmpval+2
  4490                           
  4491                           ;doprnt.c: 847: tmpval.integ *= fval;
  4492  0003D4  C0B5  F044         	movff	sprintf@tmpval,___ftmul@f1
  4493  0003D8  C0B6  F045         	movff	sprintf@tmpval+1,___ftmul@f1+1
  4494  0003DC  C0B7  F046         	movff	sprintf@tmpval+2,___ftmul@f1+2
  4495  0003E0  C0BF  F047         	movff	sprintf@fval,___ftmul@f2
  4496  0003E4  C0C0  F048         	movff	sprintf@fval+1,___ftmul@f2+1
  4497  0003E8  C0C1  F049         	movff	sprintf@fval+2,___ftmul@f2+2
  4498  0003EC  EC2E  F011         	call	___ftmul	;wreg free
  4499  0003F0  C044  F0B5         	movff	?___ftmul,sprintf@tmpval
  4500  0003F4  C045  F0B6         	movff	?___ftmul+1,sprintf@tmpval+1
  4501  0003F8  C046  F0B7         	movff	?___ftmul+2,sprintf@tmpval+2
  4502                           
  4503                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4504  0003FC  C0B5  F014         	movff	sprintf@tmpval,___ftge@ff1
  4505  000400  C0B6  F015         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4506  000404  C0B7  F016         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4507  000408  0E00               	movlw	0
  4508  00040A  6E17               	movwf	___ftge@ff2,c
  4509  00040C  0E80               	movlw	128
  4510  00040E  6E18               	movwf	___ftge@ff2+1,c
  4511  000410  0E3F               	movlw	63
  4512  000412  6E19               	movwf	___ftge@ff2+2,c
  4513  000414  EC90  F013         	call	___ftge	;wreg free
  4514  000418  B0D8               	btfsc	status,0,c
  4515  00041A  D005               	goto	l508
  4516                           
  4517                           ;doprnt.c: 849: exp--;
  4518  00041C  0100               	movlb	0	; () banked
  4519  00041E  07BD               	decf	sprintf@exp& (0+255),f,b
  4520  000420  A0D8               	btfss	status,0,c
  4521  000422  07BE               	decf	(sprintf@exp+1)& (0+255),f,b
  4522  000424  D013               	goto	l510
  4523  000426                     l508:
  4524                           
  4525                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4526                           
  4527                           ; BSR set to: 0
  4528  000426  C0B5  F014         	movff	sprintf@tmpval,___ftge@ff1
  4529  00042A  C0B6  F015         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4530  00042E  C0B7  F016         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4531  000432  0E00               	movlw	0
  4532  000434  6E17               	movwf	___ftge@ff2,c
  4533  000436  0E20               	movlw	32
  4534  000438  6E18               	movwf	___ftge@ff2+1,c
  4535  00043A  0E41               	movlw	65
  4536  00043C  6E19               	movwf	___ftge@ff2+2,c
  4537  00043E  EC90  F013         	call	___ftge	;wreg free
  4538  000442  A0D8               	btfss	status,0,c
  4539  000444  D003               	goto	l510
  4540                           
  4541                           ;doprnt.c: 851: exp++;
  4542  000446  0100               	movlb	0	; () banked
  4543  000448  4BBD               	infsnz	sprintf@exp& (0+255),f,b
  4544  00044A  2BBE               	incf	(sprintf@exp+1)& (0+255),f,b
  4545  00044C                     l510:
  4546                           
  4547                           ;doprnt.c: 852: }
  4548                           ;doprnt.c: 1112: if(prec <= 12)
  4549                           
  4550                           ; BSR set to: 0
  4551                           
  4552                           ; BSR set to: 0
  4553                           
  4554                           ; BSR set to: 0
  4555  00044C  0100               	movlb	0	; () banked
  4556  00044E  BFC5               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4557  000450  D006               	goto	u6910
  4558  000452  51C5               	movf	(sprintf@prec+1)& (0+255),w,b
  4559  000454  E11B               	bnz	l5410
  4560  000456  0E0D               	movlw	13
  4561  000458  5DC4               	subwf	sprintf@prec& (0+255),w,b
  4562  00045A  B0D8               	btfsc	status,0,c
  4563  00045C  D017               	goto	l511
  4564  00045E                     u6910:
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;doprnt.c: 1113: fval += fround(prec);
  4568  00045E  C0BF  F087         	movff	sprintf@fval,___ftadd@f1
  4569  000462  C0C0  F088         	movff	sprintf@fval+1,___ftadd@f1+1
  4570  000466  C0C1  F089         	movff	sprintf@fval+2,___ftadd@f1+2
  4571  00046A  51C4               	movf	sprintf@prec& (0+255),w,b
  4572  00046C  EC6F  F00D         	call	_fround
  4573  000470  C053  F08A         	movff	?_fround,___ftadd@f2
  4574  000474  C054  F08B         	movff	?_fround+1,___ftadd@f2+1
  4575  000478  C055  F08C         	movff	?_fround+2,___ftadd@f2+2
  4576  00047C  ECAE  F00E         	call	___ftadd	;wreg free
  4577  000480  C087  F0BF         	movff	?___ftadd,sprintf@fval
  4578  000484  C088  F0C0         	movff	?___ftadd+1,sprintf@fval+1
  4579  000488  C089  F0C1         	movff	?___ftadd+2,sprintf@fval+2
  4580  00048C                     l511:
  4581  00048C                     l5410:
  4582                           
  4583                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4584  00048C  0100               	movlb	0	; () banked
  4585  00048E  BFBE               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4586  000490  D006               	goto	u6920
  4587  000492  51BE               	movf	(sprintf@exp+1)& (0+255),w,b
  4588  000494  E11F               	bnz	l5418
  4589  000496  0E0A               	movlw	10
  4590  000498  5DBD               	subwf	sprintf@exp& (0+255),w,b
  4591  00049A  B0D8               	btfsc	status,0,c
  4592  00049C  D01B               	goto	u6950
  4593  00049E                     u6920:
  4594                           
  4595                           ; BSR set to: 0
  4596  00049E  51BF               	movf	sprintf@fval& (0+255),w,b
  4597  0004A0  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4598  0004A2  11C1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4599  0004A4  B4D8               	btfsc	status,2,c
  4600  0004A6  D055               	goto	l512
  4601                           
  4602                           ; BSR set to: 0
  4603  0004A8  C0BF  F084         	movff	sprintf@fval,___fttol@f1
  4604  0004AC  C0C0  F085         	movff	sprintf@fval+1,___fttol@f1+1
  4605  0004B0  C0C1  F086         	movff	sprintf@fval+2,___fttol@f1+2
  4606  0004B4  ECB2  F010         	call	___fttol	;wreg free
  4607  0004B8  0100               	movlb	0	; () banked
  4608  0004BA  5184               	movf	?___fttol& (0+255),w,b
  4609  0004BC  1185               	iorwf	(?___fttol+1)& (0+255),w,b
  4610  0004BE  1186               	iorwf	(?___fttol+2)& (0+255),w,b
  4611  0004C0  1187               	iorwf	(?___fttol+3)& (0+255),w,b
  4612  0004C2  B4D8               	btfsc	status,2,c
  4613                           
  4614                           ; BSR set to: 0
  4615  0004C4  BFBE               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4616  0004C6  D045               	goto	l512
  4617  0004C8  51BE               	movf	(sprintf@exp+1)& (0+255),w,b
  4618  0004CA  E104               	bnz	l5418
  4619  0004CC  0E02               	movlw	2
  4620  0004CE  5DBD               	subwf	sprintf@exp& (0+255),w,b
  4621  0004D0  A0D8               	btfss	status,0,c
  4622  0004D2  D03F               	goto	l512
  4623  0004D4                     u6950:
  4624  0004D4                     l5418:
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4628  0004D4  C0B5  F014         	movff	sprintf@tmpval,___ftge@ff1
  4629  0004D8  C0B6  F015         	movff	sprintf@tmpval+1,___ftge@ff1+1
  4630  0004DC  C0B7  F016         	movff	sprintf@tmpval+2,___ftge@ff1+2
  4631  0004E0  0E70               	movlw	112
  4632  0004E2  6E17               	movwf	___ftge@ff2,c
  4633  0004E4  0E89               	movlw	137
  4634  0004E6  6E18               	movwf	___ftge@ff2+1,c
  4635  0004E8  0E40               	movlw	64
  4636  0004EA  6E19               	movwf	___ftge@ff2+2,c
  4637  0004EC  EC90  F013         	call	___ftge	;wreg free
  4638  0004F0  B0D8               	btfsc	status,0,c
  4639  0004F2  D003               	goto	l515
  4640                           
  4641                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4642  0004F4  0100               	movlb	0	; () banked
  4643  0004F6  0EF7               	movlw	247
  4644  0004F8  D002               	goto	L4
  4645  0004FA                     l515:
  4646                           
  4647                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4648                           
  4649                           ; BSR set to: 0
  4650  0004FA  0100               	movlb	0	; () banked
  4651  0004FC  0EF8               	movlw	248
  4652  0004FE                     L4:
  4653  0004FE  27BD               	addwf	sprintf@exp& (0+255),f,b
  4654  000500  0EFF               	movlw	255
  4655  000502  23BE               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4656                           
  4657                           ; BSR set to: 0
  4658                           ;doprnt.c: 1124: }
  4659                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4660                           
  4661                           ; BSR set to: 0
  4662  000504  51BD               	movf	sprintf@exp& (0+255),w,b
  4663  000506  EC3B  F00B         	call	_scale
  4664  00050A  C053  F0B5         	movff	?_scale,sprintf@tmpval
  4665  00050E  C054  F0B6         	movff	?_scale+1,sprintf@tmpval+1
  4666  000512  C055  F0B7         	movff	?_scale+2,sprintf@tmpval+2
  4667                           
  4668                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4669  000516  C0BF  F014         	movff	sprintf@fval,__tdiv_to_l_@f1
  4670  00051A  C0C0  F015         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  4671  00051E  C0C1  F016         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  4672  000522  C0B5  F017         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  4673  000526  C0B6  F018         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  4674  00052A  C0B7  F019         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  4675  00052E  EC85  F00F         	call	__tdiv_to_l_	;wreg free
  4676  000532  C014  F0B9         	movff	?__tdiv_to_l_,sprintf@val
  4677  000536  C015  F0BA         	movff	?__tdiv_to_l_+1,sprintf@val+1
  4678  00053A  C016  F0BB         	movff	?__tdiv_to_l_+2,sprintf@val+2
  4679  00053E  C017  F0BC         	movff	?__tdiv_to_l_+3,sprintf@val+3
  4680                           
  4681                           ;doprnt.c: 1129: fval = 0.0;
  4682  000542  0E00               	movlw	0
  4683  000544  0100               	movlb	0	; () banked
  4684  000546  6FBF               	movwf	sprintf@fval& (0+255),b
  4685  000548  0E00               	movlw	0
  4686  00054A  6FC0               	movwf	(sprintf@fval+1)& (0+255),b
  4687  00054C  0E00               	movlw	0
  4688  00054E  6FC1               	movwf	(sprintf@fval+2)& (0+255),b
  4689                           
  4690                           ;doprnt.c: 1130: } else {
  4691  000550  D033               	goto	l521
  4692  000552                     l512:
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4696                           
  4697                           ; BSR set to: 0
  4698  000552  C0BF  F084         	movff	sprintf@fval,___fttol@f1
  4699  000556  C0C0  F085         	movff	sprintf@fval+1,___fttol@f1+1
  4700  00055A  C0C1  F086         	movff	sprintf@fval+2,___fttol@f1+2
  4701  00055E  ECB2  F010         	call	___fttol	;wreg free
  4702  000562  C084  F0B9         	movff	?___fttol,sprintf@val
  4703  000566  C085  F0BA         	movff	?___fttol+1,sprintf@val+1
  4704  00056A  C086  F0BB         	movff	?___fttol+2,sprintf@val+2
  4705  00056E  C087  F0BC         	movff	?___fttol+3,sprintf@val+3
  4706                           
  4707                           ;doprnt.c: 1132: fval -= (double)val;
  4708  000572  C0BF  F093         	movff	sprintf@fval,___ftsub@f1
  4709  000576  C0C0  F094         	movff	sprintf@fval+1,___ftsub@f1+1
  4710  00057A  C0C1  F095         	movff	sprintf@fval+2,___ftsub@f1+2
  4711  00057E  C0B9  F01C         	movff	sprintf@val,___lltoft@c
  4712  000582  C0BA  F01D         	movff	sprintf@val+1,___lltoft@c+1
  4713  000586  C0BB  F01E         	movff	sprintf@val+2,___lltoft@c+2
  4714  00058A  C0BC  F01F         	movff	sprintf@val+3,___lltoft@c+3
  4715  00058E  ECAB  F015         	call	___lltoft	;wreg free
  4716  000592  C01C  F096         	movff	?___lltoft,___ftsub@f2
  4717  000596  C01D  F097         	movff	?___lltoft+1,___ftsub@f2+1
  4718  00059A  C01E  F098         	movff	?___lltoft+2,___ftsub@f2+2
  4719  00059E  EC9F  F016         	call	___ftsub	;wreg free
  4720  0005A2  C093  F0BF         	movff	?___ftsub,sprintf@fval
  4721  0005A6  C094  F0C0         	movff	?___ftsub+1,sprintf@fval+1
  4722  0005AA  C095  F0C1         	movff	?___ftsub+2,sprintf@fval+2
  4723                           
  4724                           ;doprnt.c: 1133: exp = 0;
  4725  0005AE  0E00               	movlw	0
  4726  0005B0  0100               	movlb	0	; () banked
  4727  0005B2  6FBE               	movwf	(sprintf@exp+1)& (0+255),b
  4728  0005B4  0E00               	movlw	0
  4729  0005B6  6FBD               	movwf	sprintf@exp& (0+255),b
  4730  0005B8                     l521:
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;doprnt.c: 1134: }
  4734                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4735                           
  4736                           ; BSR set to: 0
  4737  0005B8  0E01               	movlw	1
  4738  0005BA  6FC8               	movwf	sprintf@c& (0+255),b
  4739  0005BC                     l5438:
  4740                           
  4741                           ; BSR set to: 0
  4742  0005BC  0E0A               	movlw	10
  4743  0005BE  19C8               	xorwf	sprintf@c& (0+255),w,b
  4744  0005C0  B4D8               	btfsc	status,2,c
  4745  0005C2  D01B               	goto	u6990
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;doprnt.c: 1137: if(val < dpowers[c])
  4749                           
  4750                           ; BSR set to: 0
  4751                           
  4752                           ; BSR set to: 0
  4753  0005C4  51C8               	movf	sprintf@c& (0+255),w,b
  4754  0005C6  0D04               	mullw	4
  4755  0005C8  0E5B               	movlw	low _dpowers
  4756  0005CA  24F3               	addwf	prodl,w,c
  4757  0005CC  6EF6               	movwf	tblptrl,c
  4758  0005CE  0EFE               	movlw	high _dpowers
  4759  0005D0  20F4               	addwfc	prodh,w,c
  4760  0005D2  6EF7               	movwf	tblptrh,c
  4761  0005D4                     	if	1	;There are 3 active tblptr bytes
  4762  0005D4  6AF8               	clrf	tblptru,c
  4763  0005D6  0E00               	movlw	low (__mediumconst shr (0+16))
  4764  0005D8  22F8               	addwfc	tblptru,f,c
  4765  0005DA                     	endif
  4766  0005DA  0009               	tblrd		*+
  4767  0005DC  50F5               	movf	tablat,w,c
  4768  0005DE  5DB9               	subwf	sprintf@val& (0+255),w,b
  4769  0005E0  0009               	tblrd		*+
  4770  0005E2  50F5               	movf	tablat,w,c
  4771  0005E4  59BA               	subwfb	(sprintf@val+1)& (0+255),w,b
  4772  0005E6  0009               	tblrd		*+
  4773  0005E8  50F5               	movf	tablat,w,c
  4774  0005EA  59BB               	subwfb	(sprintf@val+2)& (0+255),w,b
  4775  0005EC  0009               	tblrd		*+
  4776  0005EE  50F5               	movf	tablat,w,c
  4777  0005F0  59BC               	subwfb	(sprintf@val+3)& (0+255),w,b
  4778  0005F2  A0D8               	btfss	status,0,c
  4779  0005F4  D002               	goto	u6990
  4780                           
  4781                           ; BSR set to: 0
  4782                           
  4783                           ; BSR set to: 0
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;doprnt.c: 1138: break;
  4787  0005F6  2BC8               	incf	sprintf@c& (0+255),f,b
  4788  0005F8  D7E1               	goto	l5438
  4789  0005FA                     u6990:
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;doprnt.c: 1142: width -= prec + c + exp;
  4793                           
  4794                           ; BSR set to: 0
  4795  0005FA  C0C8  F0A6         	movff	sprintf@c,??_sprintf
  4796  0005FE  6BA7               	clrf	(??_sprintf+1)& (0+255),b
  4797  000600  BFA6               	btfsc	??_sprintf& (0+255),7,b
  4798  000602  07A7               	decf	(??_sprintf+1)& (0+255),f,b
  4799  000604  51C4               	movf	sprintf@prec& (0+255),w,b
  4800  000606  27A6               	addwf	??_sprintf& (0+255),f,b
  4801  000608  51C5               	movf	(sprintf@prec+1)& (0+255),w,b
  4802  00060A  23A7               	addwfc	(??_sprintf+1)& (0+255),f,b
  4803  00060C  51BD               	movf	sprintf@exp& (0+255),w,b
  4804  00060E  27A6               	addwf	??_sprintf& (0+255),f,b
  4805  000610  51BE               	movf	(sprintf@exp+1)& (0+255),w,b
  4806  000612  23A7               	addwfc	(??_sprintf+1)& (0+255),f,b
  4807  000614  51A6               	movf	??_sprintf& (0+255),w,b
  4808  000616  5FC6               	subwf	sprintf@width& (0+255),f,b
  4809  000618  51A7               	movf	(??_sprintf+1)& (0+255),w,b
  4810  00061A  5BC7               	subwfb	(sprintf@width+1)& (0+255),f,b
  4811                           
  4812                           ;doprnt.c: 1143: if(
  4813                           ;doprnt.c: 1147: prec)
  4814  00061C  51C4               	movf	sprintf@prec& (0+255),w,b
  4815  00061E  11C5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4816  000620  B4D8               	btfsc	status,2,c
  4817  000622  D003               	goto	l525
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;doprnt.c: 1148: width--;
  4821  000624  07C6               	decf	sprintf@width& (0+255),f,b
  4822  000626  A0D8               	btfss	status,0,c
  4823  000628  07C7               	decf	(sprintf@width+1)& (0+255),f,b
  4824  00062A                     l525:
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;doprnt.c: 1149: if(flag & 0x03)
  4828                           
  4829                           ; BSR set to: 0
  4830  00062A  0E03               	movlw	3
  4831  00062C  15C2               	andwf	sprintf@flag& (0+255),w,b
  4832  00062E  6FA6               	movwf	??_sprintf& (0+255),b
  4833  000630  0E00               	movlw	0
  4834  000632  15C3               	andwf	(sprintf@flag+1)& (0+255),w,b
  4835  000634  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  4836  000636  51A6               	movf	??_sprintf& (0+255),w,b
  4837  000638  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  4838  00063A  B4D8               	btfsc	status,2,c
  4839  00063C  D003               	goto	l526
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;doprnt.c: 1150: width--;
  4843  00063E  07C6               	decf	sprintf@width& (0+255),f,b
  4844  000640  A0D8               	btfss	status,0,c
  4845  000642  07C7               	decf	(sprintf@width+1)& (0+255),f,b
  4846  000644                     l526:
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;doprnt.c: 1153: if(flag & 0x04) {
  4850                           
  4851                           ; BSR set to: 0
  4852  000644  A5C2               	btfss	sprintf@flag& (0+255),2,b
  4853  000646  D026               	goto	l527
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;doprnt.c: 1157: if(flag & 0x03)
  4857  000648  0E03               	movlw	3
  4858  00064A  15C2               	andwf	sprintf@flag& (0+255),w,b
  4859  00064C  6FA6               	movwf	??_sprintf& (0+255),b
  4860  00064E  0E00               	movlw	0
  4861  000650  15C3               	andwf	(sprintf@flag+1)& (0+255),w,b
  4862  000652  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  4863  000654  51A6               	movf	??_sprintf& (0+255),w,b
  4864  000656  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  4865  000658  B4D8               	btfsc	status,2,c
  4866  00065A  D014               	goto	l529
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  4870  00065C  C099  FFD9         	movff	sprintf@sp,fsr2l
  4871  000660  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  4872  000664  0E2D               	movlw	45
  4873  000666  6EDF               	movwf	indf2,c
  4874                           
  4875                           ; BSR set to: 0
  4876  000668  4B99               	infsnz	sprintf@sp& (0+255),f,b
  4877  00066A  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;doprnt.c: 1168: while(width > 0) {
  4881  00066C  D00B               	goto	l529
  4882  00066E                     l5466:
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  4886  00066E  C099  FFD9         	movff	sprintf@sp,fsr2l
  4887  000672  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  4888  000676  0E30               	movlw	48
  4889  000678  6EDF               	movwf	indf2,c
  4890                           
  4891                           ; BSR set to: 0
  4892  00067A  4B99               	infsnz	sprintf@sp& (0+255),f,b
  4893  00067C  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;doprnt.c: 1170: width--;
  4897  00067E  07C6               	decf	sprintf@width& (0+255),f,b
  4898  000680  A0D8               	btfss	status,0,c
  4899  000682  07C7               	decf	(sprintf@width+1)& (0+255),f,b
  4900  000684                     l529:
  4901                           
  4902                           ; BSR set to: 0
  4903                           
  4904                           ; BSR set to: 0
  4905  000684  BFC7               	btfsc	(sprintf@width+1)& (0+255),7,b
  4906  000686  D078               	goto	l538
  4907  000688  51C7               	movf	(sprintf@width+1)& (0+255),w,b
  4908  00068A  E1F1               	bnz	l5466
  4909  00068C  05C6               	decf	sprintf@width& (0+255),w,b
  4910  00068E  A0D8               	btfss	status,0,c
  4911  000690  D073               	goto	l538
  4912  000692  D7ED               	goto	l530
  4913  000694                     l527:
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;doprnt.c: 1175: {
  4917                           ;doprnt.c: 1177: if(!(flag & 0x08))
  4918  000694  A7C2               	btfss	sprintf@flag& (0+255),3,b
  4919  000696  D00C               	goto	l534
  4920  000698  D012               	goto	u7060
  4921  00069A                     l5476:
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  4925  00069A  C099  FFD9         	movff	sprintf@sp,fsr2l
  4926  00069E  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  4927  0006A2  0E20               	movlw	32
  4928  0006A4  6EDF               	movwf	indf2,c
  4929                           
  4930                           ; BSR set to: 0
  4931  0006A6  4B99               	infsnz	sprintf@sp& (0+255),f,b
  4932  0006A8  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;doprnt.c: 1182: width--;
  4936  0006AA  07C6               	decf	sprintf@width& (0+255),f,b
  4937  0006AC  A0D8               	btfss	status,0,c
  4938  0006AE  07C7               	decf	(sprintf@width+1)& (0+255),f,b
  4939  0006B0                     l534:
  4940                           
  4941                           ; BSR set to: 0
  4942                           
  4943                           ; BSR set to: 0
  4944  0006B0  BFC7               	btfsc	(sprintf@width+1)& (0+255),7,b
  4945  0006B2  D005               	goto	u7060
  4946  0006B4  51C7               	movf	(sprintf@width+1)& (0+255),w,b
  4947  0006B6  E1F1               	bnz	l5476
  4948  0006B8  05C6               	decf	sprintf@width& (0+255),w,b
  4949  0006BA  B0D8               	btfsc	status,0,c
  4950  0006BC  D7EE               	goto	l535
  4951  0006BE                     u7060:
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;doprnt.c: 1183: }
  4955                           ;doprnt.c: 1188: if(flag & 0x03)
  4956                           
  4957                           ; BSR set to: 0
  4958                           
  4959                           ; BSR set to: 0
  4960  0006BE  0E03               	movlw	3
  4961  0006C0  15C2               	andwf	sprintf@flag& (0+255),w,b
  4962  0006C2  6FA6               	movwf	??_sprintf& (0+255),b
  4963  0006C4  0E00               	movlw	0
  4964  0006C6  15C3               	andwf	(sprintf@flag+1)& (0+255),w,b
  4965  0006C8  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  4966  0006CA  51A6               	movf	??_sprintf& (0+255),w,b
  4967  0006CC  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  4968  0006CE  B4D8               	btfsc	status,2,c
  4969  0006D0  D053               	goto	l538
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4973  0006D2  C099  FFD9         	movff	sprintf@sp,fsr2l
  4974  0006D6  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  4975  0006DA  0E2D               	movlw	45
  4976  0006DC  D04A               	goto	L5
  4977  0006DE                     
  4978                           ; BSR set to: 0
  4979                           ;doprnt.c: 1200: {
  4980                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4981                           
  4982                           ; BSR set to: 0
  4983  0006DE  C0B9  F014         	movff	sprintf@val,___lldiv@dividend
  4984  0006E2  C0BA  F015         	movff	sprintf@val+1,___lldiv@dividend+1
  4985  0006E6  C0BB  F016         	movff	sprintf@val+2,___lldiv@dividend+2
  4986  0006EA  C0BC  F017         	movff	sprintf@val+3,___lldiv@dividend+3
  4987  0006EE  51C8               	movf	sprintf@c& (0+255),w,b
  4988  0006F0  0D04               	mullw	4
  4989  0006F2  0E5B               	movlw	low _dpowers
  4990  0006F4  24F3               	addwf	prodl,w,c
  4991  0006F6  6EF6               	movwf	tblptrl,c
  4992  0006F8  0EFE               	movlw	high _dpowers
  4993  0006FA  20F4               	addwfc	prodh,w,c
  4994  0006FC  6EF7               	movwf	tblptrh,c
  4995  0006FE                     	if	1	;There are 3 active tblptr bytes
  4996  0006FE  6AF8               	clrf	tblptru,c
  4997  000700  0E00               	movlw	low (__mediumconst shr (0+16))
  4998  000702  22F8               	addwfc	tblptru,f,c
  4999  000704                     	endif
  5000  000704  0009               	tblrd		*+
  5001  000706  CFF5 F018          	movff	tablat,___lldiv@divisor
  5002  00070A  0009               	tblrd		*+
  5003  00070C  CFF5 F019          	movff	tablat,___lldiv@divisor+1
  5004  000710  0009               	tblrd		*+
  5005  000712  CFF5 F01A          	movff	tablat,___lldiv@divisor+2
  5006  000716  000A               	tblrd		*-
  5007  000718  CFF5 F01B          	movff	tablat,___lldiv@divisor+3
  5008  00071C  EC5B  F014         	call	___lldiv	;wreg free
  5009  000720  C014  F0B5         	movff	?___lldiv,sprintf@tmpval
  5010  000724  C015  F0B6         	movff	?___lldiv+1,sprintf@tmpval+1
  5011  000728  C016  F0B7         	movff	?___lldiv+2,sprintf@tmpval+2
  5012  00072C  C017  F0B8         	movff	?___lldiv+3,sprintf@tmpval+3
  5013                           
  5014                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5015  000730  C0B5  F021         	movff	sprintf@tmpval,___llmod@dividend
  5016  000734  C0B6  F022         	movff	sprintf@tmpval+1,___llmod@dividend+1
  5017  000738  C0B7  F023         	movff	sprintf@tmpval+2,___llmod@dividend+2
  5018  00073C  C0B8  F024         	movff	sprintf@tmpval+3,___llmod@dividend+3
  5019  000740  0E0A               	movlw	10
  5020  000742  6E25               	movwf	___llmod@divisor,c
  5021  000744  0E00               	movlw	0
  5022  000746  6E26               	movwf	___llmod@divisor+1,c
  5023  000748  0E00               	movlw	0
  5024  00074A  6E27               	movwf	___llmod@divisor+2,c
  5025  00074C  0E00               	movlw	0
  5026  00074E  6E28               	movwf	___llmod@divisor+3,c
  5027  000750  EC14  F015         	call	___llmod	;wreg free
  5028  000754  C021  F0B5         	movff	?___llmod,sprintf@tmpval
  5029  000758  C022  F0B6         	movff	?___llmod+1,sprintf@tmpval+1
  5030  00075C  C023  F0B7         	movff	?___llmod+2,sprintf@tmpval+2
  5031  000760  C024  F0B8         	movff	?___llmod+3,sprintf@tmpval+3
  5032                           
  5033                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  5034  000764  0100               	movlb	0	; () banked
  5035  000766  51B5               	movf	sprintf@tmpval& (0+255),w,b
  5036  000768  0F30               	addlw	48
  5037  00076A  C099  FFD9         	movff	sprintf@sp,fsr2l
  5038  00076E  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5039  000772                     L5:
  5040  000772  6EDF               	movwf	indf2,c
  5041                           
  5042                           ; BSR set to: 0
  5043  000774  4B99               	infsnz	sprintf@sp& (0+255),f,b
  5044  000776  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  5045  000778                     l538:
  5046                           
  5047                           ; BSR set to: 0
  5048                           
  5049                           ; BSR set to: 0
  5050  000778  07C8               	decf	sprintf@c& (0+255),f,b
  5051  00077A  29C8               	incf	sprintf@c& (0+255),w,b
  5052  00077C  B4D8               	btfsc	status,2,c
  5053  00077E  D00C               	goto	l541
  5054  000780  D7AE               	goto	l539
  5055  000782                     l5500:
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  5059  000782  C099  FFD9         	movff	sprintf@sp,fsr2l
  5060  000786  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5061  00078A  0E30               	movlw	48
  5062  00078C  6EDF               	movwf	indf2,c
  5063                           
  5064                           ; BSR set to: 0
  5065  00078E  4B99               	infsnz	sprintf@sp& (0+255),f,b
  5066  000790  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;doprnt.c: 1209: exp--;
  5070  000792  07BD               	decf	sprintf@exp& (0+255),f,b
  5071  000794  A0D8               	btfss	status,0,c
  5072  000796  07BE               	decf	(sprintf@exp+1)& (0+255),f,b
  5073  000798                     l541:
  5074                           
  5075                           ; BSR set to: 0
  5076                           
  5077                           ; BSR set to: 0
  5078  000798  BFBE               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5079  00079A  D005               	goto	u7090
  5080  00079C  51BE               	movf	(sprintf@exp+1)& (0+255),w,b
  5081  00079E  E1F1               	bnz	l5500
  5082  0007A0  05BD               	decf	sprintf@exp& (0+255),w,b
  5083  0007A2  B0D8               	btfsc	status,0,c
  5084  0007A4  D7EE               	goto	l542
  5085  0007A6                     u7090:
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;doprnt.c: 1210: }
  5089                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5090                           
  5091                           ; BSR set to: 0
  5092  0007A6  BFC5               	btfsc	(sprintf@prec+1)& (0+255),7,b
  5093  0007A8  D009               	goto	l544
  5094  0007AA  51C5               	movf	(sprintf@prec+1)& (0+255),w,b
  5095  0007AC  E104               	bnz	u7100
  5096  0007AE  0E09               	movlw	9
  5097  0007B0  5DC4               	subwf	sprintf@prec& (0+255),w,b
  5098  0007B2  A0D8               	btfss	status,0,c
  5099  0007B4  D003               	goto	l544
  5100  0007B6                     u7100:
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5104  0007B6  0E08               	movlw	8
  5105  0007B8  6FC8               	movwf	sprintf@c& (0+255),b
  5106  0007BA  D002               	goto	l545
  5107  0007BC                     l544:
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;doprnt.c: 1213: else
  5111                           ;doprnt.c: 1214: c = prec;
  5112  0007BC  C0C4  F0C8         	movff	sprintf@prec,sprintf@c
  5113  0007C0                     l545:
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;doprnt.c: 1215: prec -= c;
  5117                           
  5118                           ; BSR set to: 0
  5119  0007C0  51C8               	movf	sprintf@c& (0+255),w,b
  5120  0007C2  5FC4               	subwf	sprintf@prec& (0+255),f,b
  5121  0007C4  0E00               	movlw	0
  5122  0007C6  BFC8               	btfsc	sprintf@c& (0+255),7,b
  5123  0007C8  0EFF               	movlw	255
  5124  0007CA  5BC5               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;doprnt.c: 1219: if(c)
  5128  0007CC  51C8               	movf	sprintf@c& (0+255),w,b
  5129  0007CE  B4D8               	btfsc	status,2,c
  5130  0007D0  D008               	goto	l546
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  5134  0007D2  C099  FFD9         	movff	sprintf@sp,fsr2l
  5135  0007D6  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5136  0007DA  0E2E               	movlw	46
  5137  0007DC  6EDF               	movwf	indf2,c
  5138                           
  5139                           ; BSR set to: 0
  5140  0007DE  4B99               	infsnz	sprintf@sp& (0+255),f,b
  5141  0007E0  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  5142  0007E2                     l546:
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5146                           
  5147                           ; BSR set to: 0
  5148  0007E2  51C8               	movf	sprintf@c& (0+255),w,b
  5149  0007E4  EC3B  F00B         	call	_scale
  5150  0007E8  C053  F0AC         	movff	?_scale,_sprintf$1912
  5151  0007EC  C054  F0AD         	movff	?_scale+1,_sprintf$1912+1
  5152  0007F0  C055  F0AE         	movff	?_scale+2,_sprintf$1912+2
  5153                           
  5154                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5155  0007F4  C0BF  F047         	movff	sprintf@fval,___ftmul@f2
  5156  0007F8  C0C0  F048         	movff	sprintf@fval+1,___ftmul@f2+1
  5157  0007FC  C0C1  F049         	movff	sprintf@fval+2,___ftmul@f2+2
  5158  000800  C0AC  F044         	movff	_sprintf$1912,___ftmul@f1
  5159  000804  C0AD  F045         	movff	_sprintf$1912+1,___ftmul@f1+1
  5160  000808  C0AE  F046         	movff	_sprintf$1912+2,___ftmul@f1+2
  5161  00080C  EC2E  F011         	call	___ftmul	;wreg free
  5162  000810  C044  F084         	movff	?___ftmul,___fttol@f1
  5163  000814  C045  F085         	movff	?___ftmul+1,___fttol@f1+1
  5164  000818  C046  F086         	movff	?___ftmul+2,___fttol@f1+2
  5165  00081C  ECB2  F010         	call	___fttol	;wreg free
  5166  000820  C084  F0B9         	movff	?___fttol,sprintf@val
  5167  000824  C085  F0BA         	movff	?___fttol+1,sprintf@val+1
  5168  000828  C086  F0BB         	movff	?___fttol+2,sprintf@val+2
  5169  00082C  C087  F0BC         	movff	?___fttol+3,sprintf@val+3
  5170                           
  5171                           ;doprnt.c: 1228: while(c--) {
  5172  000830  D077               	goto	l547
  5173  000832                     
  5174                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5175  000832  C0B9  F014         	movff	sprintf@val,___lldiv@dividend
  5176  000836  C0BA  F015         	movff	sprintf@val+1,___lldiv@dividend+1
  5177  00083A  C0BB  F016         	movff	sprintf@val+2,___lldiv@dividend+2
  5178  00083E  C0BC  F017         	movff	sprintf@val+3,___lldiv@dividend+3
  5179  000842  0100               	movlb	0	; () banked
  5180  000844  51C8               	movf	sprintf@c& (0+255),w,b
  5181  000846  0D04               	mullw	4
  5182  000848  0E5B               	movlw	low _dpowers
  5183  00084A  24F3               	addwf	prodl,w,c
  5184  00084C  6EF6               	movwf	tblptrl,c
  5185  00084E  0EFE               	movlw	high _dpowers
  5186  000850  20F4               	addwfc	prodh,w,c
  5187  000852  6EF7               	movwf	tblptrh,c
  5188  000854                     	if	1	;There are 3 active tblptr bytes
  5189  000854  6AF8               	clrf	tblptru,c
  5190  000856  0E00               	movlw	low (__mediumconst shr (0+16))
  5191  000858  22F8               	addwfc	tblptru,f,c
  5192  00085A                     	endif
  5193  00085A  0009               	tblrd		*+
  5194  00085C  CFF5 F018          	movff	tablat,___lldiv@divisor
  5195  000860  0009               	tblrd		*+
  5196  000862  CFF5 F019          	movff	tablat,___lldiv@divisor+1
  5197  000866  0009               	tblrd		*+
  5198  000868  CFF5 F01A          	movff	tablat,___lldiv@divisor+2
  5199  00086C  000A               	tblrd		*-
  5200  00086E  CFF5 F01B          	movff	tablat,___lldiv@divisor+3
  5201  000872  EC5B  F014         	call	___lldiv	;wreg free
  5202  000876  C014  F0B5         	movff	?___lldiv,sprintf@tmpval
  5203  00087A  C015  F0B6         	movff	?___lldiv+1,sprintf@tmpval+1
  5204  00087E  C016  F0B7         	movff	?___lldiv+2,sprintf@tmpval+2
  5205  000882  C017  F0B8         	movff	?___lldiv+3,sprintf@tmpval+3
  5206                           
  5207                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5208  000886  C0B5  F021         	movff	sprintf@tmpval,___llmod@dividend
  5209  00088A  C0B6  F022         	movff	sprintf@tmpval+1,___llmod@dividend+1
  5210  00088E  C0B7  F023         	movff	sprintf@tmpval+2,___llmod@dividend+2
  5211  000892  C0B8  F024         	movff	sprintf@tmpval+3,___llmod@dividend+3
  5212  000896  0E0A               	movlw	10
  5213  000898  6E25               	movwf	___llmod@divisor,c
  5214  00089A  0E00               	movlw	0
  5215  00089C  6E26               	movwf	___llmod@divisor+1,c
  5216  00089E  0E00               	movlw	0
  5217  0008A0  6E27               	movwf	___llmod@divisor+2,c
  5218  0008A2  0E00               	movlw	0
  5219  0008A4  6E28               	movwf	___llmod@divisor+3,c
  5220  0008A6  EC14  F015         	call	___llmod	;wreg free
  5221  0008AA  C021  F0B5         	movff	?___llmod,sprintf@tmpval
  5222  0008AE  C022  F0B6         	movff	?___llmod+1,sprintf@tmpval+1
  5223  0008B2  C023  F0B7         	movff	?___llmod+2,sprintf@tmpval+2
  5224  0008B6  C024  F0B8         	movff	?___llmod+3,sprintf@tmpval+3
  5225                           
  5226                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  5227  0008BA  0100               	movlb	0	; () banked
  5228  0008BC  51B5               	movf	sprintf@tmpval& (0+255),w,b
  5229  0008BE  0F30               	addlw	48
  5230  0008C0  C099  FFD9         	movff	sprintf@sp,fsr2l
  5231  0008C4  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5232  0008C8  6EDF               	movwf	indf2,c
  5233                           
  5234                           ; BSR set to: 0
  5235  0008CA  4B99               	infsnz	sprintf@sp& (0+255),f,b
  5236  0008CC  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;doprnt.c: 1232: val %= dpowers[c];
  5240  0008CE  C0B9  F021         	movff	sprintf@val,___llmod@dividend
  5241  0008D2  C0BA  F022         	movff	sprintf@val+1,___llmod@dividend+1
  5242  0008D6  C0BB  F023         	movff	sprintf@val+2,___llmod@dividend+2
  5243  0008DA  C0BC  F024         	movff	sprintf@val+3,___llmod@dividend+3
  5244  0008DE  51C8               	movf	sprintf@c& (0+255),w,b
  5245  0008E0  0D04               	mullw	4
  5246  0008E2  0E5B               	movlw	low _dpowers
  5247  0008E4  24F3               	addwf	prodl,w,c
  5248  0008E6  6EF6               	movwf	tblptrl,c
  5249  0008E8  0EFE               	movlw	high _dpowers
  5250  0008EA  20F4               	addwfc	prodh,w,c
  5251  0008EC  6EF7               	movwf	tblptrh,c
  5252  0008EE                     	if	1	;There are 3 active tblptr bytes
  5253  0008EE  6AF8               	clrf	tblptru,c
  5254  0008F0  0E00               	movlw	low (__mediumconst shr (0+16))
  5255  0008F2  22F8               	addwfc	tblptru,f,c
  5256  0008F4                     	endif
  5257  0008F4  0009               	tblrd		*+
  5258  0008F6  CFF5 F025          	movff	tablat,___llmod@divisor
  5259  0008FA  0009               	tblrd		*+
  5260  0008FC  CFF5 F026          	movff	tablat,___llmod@divisor+1
  5261  000900  0009               	tblrd		*+
  5262  000902  CFF5 F027          	movff	tablat,___llmod@divisor+2
  5263  000906  000A               	tblrd		*-
  5264  000908  CFF5 F028          	movff	tablat,___llmod@divisor+3
  5265  00090C  EC14  F015         	call	___llmod	;wreg free
  5266  000910  C021  F0B9         	movff	?___llmod,sprintf@val
  5267  000914  C022  F0BA         	movff	?___llmod+1,sprintf@val+1
  5268  000918  C023  F0BB         	movff	?___llmod+2,sprintf@val+2
  5269  00091C  C024  F0BC         	movff	?___llmod+3,sprintf@val+3
  5270  000920                     l547:
  5271  000920  0100               	movlb	0	; () banked
  5272  000922  07C8               	decf	sprintf@c& (0+255),f,b
  5273  000924  29C8               	incf	sprintf@c& (0+255),w,b
  5274  000926  B4D8               	btfsc	status,2,c
  5275  000928  D00C               	goto	l550
  5276  00092A  D783               	goto	l548
  5277  00092C                     
  5278                           ; BSR set to: 0
  5279                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  5280                           
  5281                           ; BSR set to: 0
  5282  00092C  C099  FFD9         	movff	sprintf@sp,fsr2l
  5283  000930  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5284  000934  0E30               	movlw	48
  5285  000936  6EDF               	movwf	indf2,c
  5286                           
  5287                           ; BSR set to: 0
  5288  000938  4B99               	infsnz	sprintf@sp& (0+255),f,b
  5289  00093A  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;doprnt.c: 1237: prec--;
  5293  00093C  07C4               	decf	sprintf@prec& (0+255),f,b
  5294  00093E  A0D8               	btfss	status,0,c
  5295  000940  07C5               	decf	(sprintf@prec+1)& (0+255),f,b
  5296  000942                     l550:
  5297                           
  5298                           ; BSR set to: 0
  5299                           
  5300                           ; BSR set to: 0
  5301  000942  51C4               	movf	sprintf@prec& (0+255),w,b
  5302  000944  11C5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5303  000946  A4D8               	btfss	status,2,c
  5304  000948  D7F1               	goto	l551
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;doprnt.c: 1238: }
  5308                           ;doprnt.c: 1240: if((flag & 0x08) && width > 0)
  5309  00094A  B7C2               	btfsc	sprintf@flag& (0+255),3,b
  5310                           
  5311                           ; BSR set to: 0
  5312  00094C  BFC7               	btfsc	(sprintf@width+1)& (0+255),7,b
  5313  00094E  D168               	goto	u7410
  5314  000950  51C7               	movf	(sprintf@width+1)& (0+255),w,b
  5315  000952  E103               	bnz	l5546
  5316  000954  05C6               	decf	sprintf@width& (0+255),w,b
  5317  000956  A0D8               	btfss	status,0,c
  5318  000958  D163               	goto	u7410
  5319  00095A                     u7150:
  5320  00095A                     l5546:
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;doprnt.c: 1242: ((*sp++ = (' ')));
  5324  00095A  C099  FFD9         	movff	sprintf@sp,fsr2l
  5325  00095E  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5326  000962  0E20               	movlw	32
  5327  000964  6EDF               	movwf	indf2,c
  5328                           
  5329                           ; BSR set to: 0
  5330  000966  4B99               	infsnz	sprintf@sp& (0+255),f,b
  5331  000968  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;doprnt.c: 1243: while(--width);
  5335  00096A  07C6               	decf	sprintf@width& (0+255),f,b
  5336  00096C  A0D8               	btfss	status,0,c
  5337  00096E  07C7               	decf	(sprintf@width+1)& (0+255),f,b
  5338  000970  51C6               	movf	sprintf@width& (0+255),w,b
  5339  000972  11C7               	iorwf	(sprintf@width+1)& (0+255),w,b
  5340  000974  B4D8               	btfsc	status,2,c
  5341  000976  D154               	goto	u7410
  5342  000978  D7F0               	goto	u7150
  5343  00097A                     l503:
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;doprnt.c: 1246: }
  5347                           ;doprnt.c: 1253: {
  5348                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5349                           
  5350                           ; BSR set to: 0
  5351  00097A  C0B1  FFD9         	movff	sprintf@ap,fsr2l
  5352  00097E  C0B2  FFDA         	movff	sprintf@ap+1,fsr2h
  5353  000982  CFDE F0B9          	movff	postinc2,sprintf@val
  5354  000986  CFDD F0BA          	movff	postdec2,sprintf@val+1
  5355  00098A  0E00               	movlw	0
  5356  00098C  BFBA               	btfsc	(sprintf@val+1)& (0+255),7,b
  5357  00098E  0EFF               	movlw	-1
  5358  000990  6FBB               	movwf	(sprintf@val+2)& (0+255),b
  5359  000992  6FBC               	movwf	(sprintf@val+3)& (0+255),b
  5360                           
  5361                           ; BSR set to: 0
  5362  000994  0E02               	movlw	2
  5363  000996  27B1               	addwf	sprintf@ap& (0+255),f,b
  5364  000998  0E00               	movlw	0
  5365  00099A  23B2               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;doprnt.c: 1261: if((long)val < 0) {
  5369  00099C  AFBC               	btfss	(sprintf@val+3)& (0+255),7,b
  5370  00099E  D00A               	goto	l556
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;doprnt.c: 1262: flag |= 0x03;
  5374  0009A0  0E03               	movlw	3
  5375  0009A2  13C2               	iorwf	sprintf@flag& (0+255),f,b
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;doprnt.c: 1263: val = -val;
  5379  0009A4  1FBC               	comf	(sprintf@val+3)& (0+255),f,b
  5380  0009A6  1FBB               	comf	(sprintf@val+2)& (0+255),f,b
  5381  0009A8  1FBA               	comf	(sprintf@val+1)& (0+255),f,b
  5382  0009AA  6DB9               	negf	sprintf@val& (0+255),b
  5383  0009AC  0E00               	movlw	0
  5384  0009AE  23BA               	addwfc	(sprintf@val+1)& (0+255),f,b
  5385  0009B0  23BB               	addwfc	(sprintf@val+2)& (0+255),f,b
  5386  0009B2  23BC               	addwfc	(sprintf@val+3)& (0+255),f,b
  5387  0009B4                     l556:
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;doprnt.c: 1264: }
  5391                           ;doprnt.c: 1266: }
  5392                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5393                           
  5394                           ; BSR set to: 0
  5395  0009B4  51C4               	movf	sprintf@prec& (0+255),w,b
  5396  0009B6  11C5               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5397  0009B8  A4D8               	btfss	status,2,c
  5398  0009BA  D008               	goto	l557
  5399                           
  5400                           ; BSR set to: 0
  5401  0009BC  51B9               	movf	sprintf@val& (0+255),w,b
  5402  0009BE  11BA               	iorwf	(sprintf@val+1)& (0+255),w,b
  5403  0009C0  11BB               	iorwf	(sprintf@val+2)& (0+255),w,b
  5404  0009C2  11BC               	iorwf	(sprintf@val+3)& (0+255),w,b
  5405  0009C4  A4D8               	btfss	status,2,c
  5406  0009C6  D002               	goto	l557
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;doprnt.c: 1291: prec++;
  5410  0009C8  4BC4               	infsnz	sprintf@prec& (0+255),f,b
  5411  0009CA  2BC5               	incf	(sprintf@prec+1)& (0+255),f,b
  5412  0009CC                     l557:
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5416                           
  5417                           ; BSR set to: 0
  5418  0009CC  0E01               	movlw	1
  5419  0009CE  6FC8               	movwf	sprintf@c& (0+255),b
  5420  0009D0                     l5570:
  5421                           
  5422                           ; BSR set to: 0
  5423  0009D0  0E0A               	movlw	10
  5424  0009D2  19C8               	xorwf	sprintf@c& (0+255),w,b
  5425  0009D4  B4D8               	btfsc	status,2,c
  5426  0009D6  D01B               	goto	u7220
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;doprnt.c: 1306: if(val < dpowers[c])
  5430                           
  5431                           ; BSR set to: 0
  5432                           
  5433                           ; BSR set to: 0
  5434  0009D8  51C8               	movf	sprintf@c& (0+255),w,b
  5435  0009DA  0D04               	mullw	4
  5436  0009DC  0E5B               	movlw	low _dpowers
  5437  0009DE  24F3               	addwf	prodl,w,c
  5438  0009E0  6EF6               	movwf	tblptrl,c
  5439  0009E2  0EFE               	movlw	high _dpowers
  5440  0009E4  20F4               	addwfc	prodh,w,c
  5441  0009E6  6EF7               	movwf	tblptrh,c
  5442  0009E8                     	if	1	;There are 3 active tblptr bytes
  5443  0009E8  6AF8               	clrf	tblptru,c
  5444  0009EA  0E00               	movlw	low (__mediumconst shr (0+16))
  5445  0009EC  22F8               	addwfc	tblptru,f,c
  5446  0009EE                     	endif
  5447  0009EE  0009               	tblrd		*+
  5448  0009F0  50F5               	movf	tablat,w,c
  5449  0009F2  5DB9               	subwf	sprintf@val& (0+255),w,b
  5450  0009F4  0009               	tblrd		*+
  5451  0009F6  50F5               	movf	tablat,w,c
  5452  0009F8  59BA               	subwfb	(sprintf@val+1)& (0+255),w,b
  5453  0009FA  0009               	tblrd		*+
  5454  0009FC  50F5               	movf	tablat,w,c
  5455  0009FE  59BB               	subwfb	(sprintf@val+2)& (0+255),w,b
  5456  000A00  0009               	tblrd		*+
  5457  000A02  50F5               	movf	tablat,w,c
  5458  000A04  59BC               	subwfb	(sprintf@val+3)& (0+255),w,b
  5459  000A06  A0D8               	btfss	status,0,c
  5460  000A08  D002               	goto	u7220
  5461                           
  5462                           ; BSR set to: 0
  5463                           
  5464                           ; BSR set to: 0
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;doprnt.c: 1307: break;
  5468  000A0A  2BC8               	incf	sprintf@c& (0+255),f,b
  5469  000A0C  D7E1               	goto	l5570
  5470  000A0E                     u7220:
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;doprnt.c: 1339: if(c < prec)
  5474                           
  5475                           ; BSR set to: 0
  5476  000A0E  0E80               	movlw	128
  5477  000A10  BFC8               	btfsc	sprintf@c& (0+255),7,b
  5478  000A12  0E7F               	movlw	127
  5479  000A14  6FA6               	movwf	??_sprintf& (0+255),b
  5480  000A16  51C4               	movf	sprintf@prec& (0+255),w,b
  5481  000A18  5DC8               	subwf	sprintf@c& (0+255),w,b
  5482  000A1A  51C5               	movf	(sprintf@prec+1)& (0+255),w,b
  5483  000A1C  0A80               	xorlw	128
  5484  000A1E  59A6               	subwfb	??_sprintf& (0+255),w,b
  5485  000A20  B0D8               	btfsc	status,0,c
  5486  000A22  D003               	goto	l561
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;doprnt.c: 1340: c = prec;
  5490  000A24  C0C4  F0C8         	movff	sprintf@prec,sprintf@c
  5491  000A28  D010               	goto	l563
  5492  000A2A                     l561:
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;doprnt.c: 1341: else if(prec < c)
  5496                           
  5497                           ; BSR set to: 0
  5498  000A2A  51C5               	movf	(sprintf@prec+1)& (0+255),w,b
  5499  000A2C  0A80               	xorlw	128
  5500  000A2E  6FA6               	movwf	??_sprintf& (0+255),b
  5501  000A30  51C8               	movf	sprintf@c& (0+255),w,b
  5502  000A32  5DC4               	subwf	sprintf@prec& (0+255),w,b
  5503  000A34  0E80               	movlw	128
  5504  000A36  BFC8               	btfsc	sprintf@c& (0+255),7,b
  5505  000A38  0E7F               	movlw	127
  5506  000A3A  59A6               	subwfb	??_sprintf& (0+255),w,b
  5507  000A3C  B0D8               	btfsc	status,0,c
  5508  000A3E  D005               	goto	l563
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;doprnt.c: 1342: prec = c;
  5512  000A40  51C8               	movf	sprintf@c& (0+255),w,b
  5513  000A42  6FC4               	movwf	sprintf@prec& (0+255),b
  5514  000A44  6BC5               	clrf	(sprintf@prec+1)& (0+255),b
  5515  000A46  BFC4               	btfsc	sprintf@prec& (0+255),7,b
  5516  000A48  07C5               	decf	(sprintf@prec+1)& (0+255),f,b
  5517  000A4A                     l563:
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5521                           
  5522                           ; BSR set to: 0
  5523                           
  5524                           ; BSR set to: 0
  5525  000A4A  51C6               	movf	sprintf@width& (0+255),w,b
  5526  000A4C  11C7               	iorwf	(sprintf@width+1)& (0+255),w,b
  5527  000A4E  B4D8               	btfsc	status,2,c
  5528  000A50  D00D               	goto	l564
  5529                           
  5530                           ; BSR set to: 0
  5531  000A52  0E03               	movlw	3
  5532  000A54  15C2               	andwf	sprintf@flag& (0+255),w,b
  5533  000A56  6FA6               	movwf	??_sprintf& (0+255),b
  5534  000A58  0E00               	movlw	0
  5535  000A5A  15C3               	andwf	(sprintf@flag+1)& (0+255),w,b
  5536  000A5C  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  5537  000A5E  51A6               	movf	??_sprintf& (0+255),w,b
  5538  000A60  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  5539  000A62  B4D8               	btfsc	status,2,c
  5540  000A64  D003               	goto	l564
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;doprnt.c: 1346: width--;
  5544  000A66  07C6               	decf	sprintf@width& (0+255),f,b
  5545  000A68  A0D8               	btfss	status,0,c
  5546  000A6A  07C7               	decf	(sprintf@width+1)& (0+255),f,b
  5547  000A6C                     l564:
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;doprnt.c: 1348: if(flag & 0x4000) {
  5551                           
  5552                           ; BSR set to: 0
  5553  000A6C  ADC3               	btfss	(sprintf@flag+1)& (0+255),6,b
  5554  000A6E  D013               	goto	l567
  5555                           
  5556                           ; BSR set to: 0
  5557                           ;doprnt.c: 1349: if(width > prec)
  5558  000A70  51C6               	movf	sprintf@width& (0+255),w,b
  5559  000A72  5DC4               	subwf	sprintf@prec& (0+255),w,b
  5560  000A74  51C5               	movf	(sprintf@prec+1)& (0+255),w,b
  5561  000A76  0A80               	xorlw	128
  5562  000A78  6FA6               	movwf	??_sprintf& (0+255),b
  5563  000A7A  51C7               	movf	(sprintf@width+1)& (0+255),w,b
  5564  000A7C  0A80               	xorlw	128
  5565  000A7E  59A6               	subwfb	??_sprintf& (0+255),w,b
  5566  000A80  B0D8               	btfsc	status,0,c
  5567  000A82  D005               	goto	l566
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;doprnt.c: 1350: width -= prec;
  5571  000A84  51C4               	movf	sprintf@prec& (0+255),w,b
  5572  000A86  5FC6               	subwf	sprintf@width& (0+255),f,b
  5573  000A88  51C5               	movf	(sprintf@prec+1)& (0+255),w,b
  5574  000A8A  5BC7               	subwfb	(sprintf@width+1)& (0+255),f,b
  5575  000A8C  D004               	goto	l567
  5576  000A8E                     l566:
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;doprnt.c: 1351: else
  5580                           ;doprnt.c: 1352: width = 0;
  5581                           
  5582                           ; BSR set to: 0
  5583  000A8E  0E00               	movlw	0
  5584  000A90  6FC7               	movwf	(sprintf@width+1)& (0+255),b
  5585  000A92  0E00               	movlw	0
  5586  000A94  6FC6               	movwf	sprintf@width& (0+255),b
  5587  000A96                     l567:
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;doprnt.c: 1353: }
  5591                           ;doprnt.c: 1381: if(width > c)
  5592                           
  5593                           ; BSR set to: 0
  5594                           
  5595                           ; BSR set to: 0
  5596  000A96  0E80               	movlw	128
  5597  000A98  BFC8               	btfsc	sprintf@c& (0+255),7,b
  5598  000A9A  0E7F               	movlw	127
  5599  000A9C  6FA6               	movwf	??_sprintf& (0+255),b
  5600  000A9E  51C6               	movf	sprintf@width& (0+255),w,b
  5601  000AA0  5DC8               	subwf	sprintf@c& (0+255),w,b
  5602  000AA2  51C7               	movf	(sprintf@width+1)& (0+255),w,b
  5603  000AA4  0A80               	xorlw	128
  5604  000AA6  59A6               	subwfb	??_sprintf& (0+255),w,b
  5605  000AA8  B0D8               	btfsc	status,0,c
  5606  000AAA  D007               	goto	l568
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;doprnt.c: 1382: width -= c;
  5610  000AAC  51C8               	movf	sprintf@c& (0+255),w,b
  5611  000AAE  5FC6               	subwf	sprintf@width& (0+255),f,b
  5612  000AB0  0E00               	movlw	0
  5613  000AB2  BFC8               	btfsc	sprintf@c& (0+255),7,b
  5614  000AB4  0EFF               	movlw	255
  5615  000AB6  5BC7               	subwfb	(sprintf@width+1)& (0+255),f,b
  5616  000AB8  D004               	goto	l569
  5617  000ABA                     l568:
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;doprnt.c: 1383: else
  5621                           ;doprnt.c: 1384: width = 0;
  5622                           
  5623                           ; BSR set to: 0
  5624  000ABA  0E00               	movlw	0
  5625  000ABC  6FC7               	movwf	(sprintf@width+1)& (0+255),b
  5626  000ABE  0E00               	movlw	0
  5627  000AC0  6FC6               	movwf	sprintf@width& (0+255),b
  5628  000AC2                     l569:
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;doprnt.c: 1387: if(flag & 0x04) {
  5632                           
  5633                           ; BSR set to: 0
  5634  000AC2  A5C2               	btfss	sprintf@flag& (0+255),2,b
  5635  000AC4  D022               	goto	l570
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;doprnt.c: 1392: if(flag & 0x03)
  5639  000AC6  0E03               	movlw	3
  5640  000AC8  15C2               	andwf	sprintf@flag& (0+255),w,b
  5641  000ACA  6FA6               	movwf	??_sprintf& (0+255),b
  5642  000ACC  0E00               	movlw	0
  5643  000ACE  15C3               	andwf	(sprintf@flag+1)& (0+255),w,b
  5644  000AD0  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  5645  000AD2  51A6               	movf	??_sprintf& (0+255),w,b
  5646  000AD4  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  5647  000AD6  B4D8               	btfsc	status,2,c
  5648  000AD8  D008               	goto	l571
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5652  000ADA  C099  FFD9         	movff	sprintf@sp,fsr2l
  5653  000ADE  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5654  000AE2  0E2D               	movlw	45
  5655  000AE4  6EDF               	movwf	indf2,c
  5656                           
  5657                           ; BSR set to: 0
  5658  000AE6  4B99               	infsnz	sprintf@sp& (0+255),f,b
  5659  000AE8  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  5660  000AEA                     l571:
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;doprnt.c: 1415: if(width)
  5664                           
  5665                           ; BSR set to: 0
  5666  000AEA  51C6               	movf	sprintf@width& (0+255),w,b
  5667  000AEC  11C7               	iorwf	(sprintf@width+1)& (0+255),w,b
  5668  000AEE  B4D8               	btfsc	status,2,c
  5669  000AF0  D078               	goto	l580
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5673                           
  5674                           ; BSR set to: 0
  5675                           
  5676                           ;doprnt.c: 1416: do
  5677  000AF2  C099  FFD9         	movff	sprintf@sp,fsr2l
  5678  000AF6  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5679  000AFA  0E30               	movlw	48
  5680  000AFC  6EDF               	movwf	indf2,c
  5681                           
  5682                           ; BSR set to: 0
  5683  000AFE  4B99               	infsnz	sprintf@sp& (0+255),f,b
  5684  000B00  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  5685                           
  5686                           ; BSR set to: 0
  5687                           ;doprnt.c: 1418: while(--width);
  5688  000B02  07C6               	decf	sprintf@width& (0+255),f,b
  5689  000B04  A0D8               	btfss	status,0,c
  5690  000B06  07C7               	decf	(sprintf@width+1)& (0+255),f,b
  5691  000B08  D7F0               	goto	l571
  5692  000B0A                     l570:
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;doprnt.c: 1422: {
  5696                           ;doprnt.c: 1424: if(width
  5697                           ;doprnt.c: 1426: && !(flag & 0x08)
  5698                           ;doprnt.c: 1428: )
  5699                           
  5700                           ; BSR set to: 0
  5701  000B0A  51C6               	movf	sprintf@width& (0+255),w,b
  5702  000B0C  11C7               	iorwf	(sprintf@width+1)& (0+255),w,b
  5703  000B0E  A4D8               	btfss	status,2,c
  5704                           
  5705                           ; BSR set to: 0
  5706  000B10  B7C2               	btfsc	sprintf@flag& (0+255),3,b
  5707  000B12  D00F               	goto	u7360
  5708  000B14                     u7350:
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5712                           
  5713                           ; BSR set to: 0
  5714                           
  5715                           ;doprnt.c: 1429: do
  5716  000B14  C099  FFD9         	movff	sprintf@sp,fsr2l
  5717  000B18  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5718  000B1C  0E20               	movlw	32
  5719  000B1E  6EDF               	movwf	indf2,c
  5720                           
  5721                           ; BSR set to: 0
  5722  000B20  4B99               	infsnz	sprintf@sp& (0+255),f,b
  5723  000B22  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;doprnt.c: 1431: while(--width);
  5727  000B24  07C6               	decf	sprintf@width& (0+255),f,b
  5728  000B26  A0D8               	btfss	status,0,c
  5729  000B28  07C7               	decf	(sprintf@width+1)& (0+255),f,b
  5730  000B2A  51C6               	movf	sprintf@width& (0+255),w,b
  5731  000B2C  11C7               	iorwf	(sprintf@width+1)& (0+255),w,b
  5732  000B2E  A4D8               	btfss	status,2,c
  5733  000B30  D7F1               	goto	u7350
  5734  000B32                     u7360:
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;doprnt.c: 1438: if(flag & 0x03)
  5738                           
  5739                           ; BSR set to: 0
  5740                           
  5741                           ; BSR set to: 0
  5742  000B32  0E03               	movlw	3
  5743  000B34  15C2               	andwf	sprintf@flag& (0+255),w,b
  5744  000B36  6FA6               	movwf	??_sprintf& (0+255),b
  5745  000B38  0E00               	movlw	0
  5746  000B3A  15C3               	andwf	(sprintf@flag+1)& (0+255),w,b
  5747  000B3C  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  5748  000B3E  51A6               	movf	??_sprintf& (0+255),w,b
  5749  000B40  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  5750  000B42  B4D8               	btfsc	status,2,c
  5751  000B44  D04E               	goto	l580
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5755  000B46  C099  FFD9         	movff	sprintf@sp,fsr2l
  5756  000B4A  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5757  000B4E  0E2D               	movlw	45
  5758  000B50  6EDF               	movwf	indf2,c
  5759  000B52  D045               	goto	l5646
  5760  000B54                     l5642:
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;doprnt.c: 1478: {
  5764                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5765  000B54  C0C4  F0A6         	movff	sprintf@prec,??_sprintf
  5766  000B58  C0C5  F0A7         	movff	sprintf@prec+1,??_sprintf+1
  5767  000B5C  90D8               	bcf	status,0,c
  5768  000B5E  37A6               	rlcf	??_sprintf& (0+255),f,b
  5769  000B60  37A7               	rlcf	(??_sprintf+1)& (0+255),f,b
  5770  000B62  90D8               	bcf	status,0,c
  5771  000B64  37A6               	rlcf	??_sprintf& (0+255),f,b
  5772  000B66  37A7               	rlcf	(??_sprintf+1)& (0+255),f,b
  5773  000B68  0E5B               	movlw	low _dpowers
  5774  000B6A  25A6               	addwf	??_sprintf& (0+255),w,b
  5775  000B6C  6EF6               	movwf	tblptrl,c
  5776  000B6E  0EFE               	movlw	high _dpowers
  5777  000B70  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  5778  000B72  6EF7               	movwf	tblptrh,c
  5779  000B74                     	if	1	;There are 3 active tblptr bytes
  5780  000B74  6AF8               	clrf	tblptru,c
  5781  000B76  0E00               	movlw	low (__mediumconst shr (0+16))
  5782  000B78  22F8               	addwfc	tblptru,f,c
  5783  000B7A                     	endif
  5784  000B7A  0009               	tblrd		*+
  5785  000B7C  CFF5 F018          	movff	tablat,___lldiv@divisor
  5786  000B80  0009               	tblrd		*+
  5787  000B82  CFF5 F019          	movff	tablat,___lldiv@divisor+1
  5788  000B86  0009               	tblrd		*+
  5789  000B88  CFF5 F01A          	movff	tablat,___lldiv@divisor+2
  5790  000B8C  000A               	tblrd		*-
  5791  000B8E  CFF5 F01B          	movff	tablat,___lldiv@divisor+3
  5792  000B92  C0B9  F014         	movff	sprintf@val,___lldiv@dividend
  5793  000B96  C0BA  F015         	movff	sprintf@val+1,___lldiv@dividend+1
  5794  000B9A  C0BB  F016         	movff	sprintf@val+2,___lldiv@dividend+2
  5795  000B9E  C0BC  F017         	movff	sprintf@val+3,___lldiv@dividend+3
  5796  000BA2  EC5B  F014         	call	___lldiv	;wreg free
  5797  000BA6  C014  F021         	movff	?___lldiv,___llmod@dividend
  5798  000BAA  C015  F022         	movff	?___lldiv+1,___llmod@dividend+1
  5799  000BAE  C016  F023         	movff	?___lldiv+2,___llmod@dividend+2
  5800  000BB2  C017  F024         	movff	?___lldiv+3,___llmod@dividend+3
  5801  000BB6  0E0A               	movlw	10
  5802  000BB8  6E25               	movwf	___llmod@divisor,c
  5803  000BBA  0E00               	movlw	0
  5804  000BBC  6E26               	movwf	___llmod@divisor+1,c
  5805  000BBE  0E00               	movlw	0
  5806  000BC0  6E27               	movwf	___llmod@divisor+2,c
  5807  000BC2  0E00               	movlw	0
  5808  000BC4  6E28               	movwf	___llmod@divisor+3,c
  5809  000BC6  EC14  F015         	call	___llmod	;wreg free
  5810  000BCA  5021               	movf	?___llmod,w,c
  5811  000BCC  0F30               	addlw	48
  5812  000BCE  0100               	movlb	0	; () banked
  5813  000BD0  6FC8               	movwf	sprintf@c& (0+255),b
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;doprnt.c: 1523: }
  5817                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5818  000BD2  C099  FFD9         	movff	sprintf@sp,fsr2l
  5819  000BD6  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5820  000BDA  C0C8  FFDF         	movff	sprintf@c,indf2
  5821  000BDE                     l5646:
  5822                           
  5823                           ; BSR set to: 0
  5824  000BDE  4B99               	infsnz	sprintf@sp& (0+255),f,b
  5825  000BE0  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  5826  000BE2                     l580:
  5827                           
  5828                           ; BSR set to: 0
  5829                           
  5830                           ; BSR set to: 0
  5831  000BE2  07C4               	decf	sprintf@prec& (0+255),f,b
  5832  000BE4  A0D8               	btfss	status,0,c
  5833  000BE6  07C5               	decf	(sprintf@prec+1)& (0+255),f,b
  5834  000BE8  29C4               	incf	sprintf@prec& (0+255),w,b
  5835  000BEA  E1B4               	bnz	l5642
  5836  000BEC  29C5               	incf	(sprintf@prec+1)& (0+255),w,b
  5837  000BEE  A4D8               	btfss	status,2,c
  5838  000BF0  D7B1               	goto	l581
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;doprnt.c: 1525: }
  5842                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  5843  000BF2  B7C2               	btfsc	sprintf@flag& (0+255),3,b
  5844                           
  5845                           ; BSR set to: 0
  5846  000BF4  BFC7               	btfsc	(sprintf@width+1)& (0+255),7,b
  5847  000BF6  D014               	goto	u7410
  5848  000BF8  51C7               	movf	(sprintf@width+1)& (0+255),w,b
  5849  000BFA  E103               	bnz	l5652
  5850  000BFC  05C6               	decf	sprintf@width& (0+255),w,b
  5851  000BFE  A0D8               	btfss	status,0,c
  5852  000C00  D00F               	goto	u7410
  5853  000C02                     u7400:
  5854  000C02                     l5652:
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  5858  000C02  C099  FFD9         	movff	sprintf@sp,fsr2l
  5859  000C06  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5860  000C0A  0E20               	movlw	32
  5861  000C0C  6EDF               	movwf	indf2,c
  5862                           
  5863                           ; BSR set to: 0
  5864  000C0E  4B99               	infsnz	sprintf@sp& (0+255),f,b
  5865  000C10  2B9A               	incf	(sprintf@sp+1)& (0+255),f,b
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;doprnt.c: 1531: while(--width);
  5869  000C12  07C6               	decf	sprintf@width& (0+255),f,b
  5870  000C14  A0D8               	btfss	status,0,c
  5871  000C16  07C7               	decf	(sprintf@width+1)& (0+255),f,b
  5872  000C18  51C6               	movf	sprintf@width& (0+255),w,b
  5873  000C1A  11C7               	iorwf	(sprintf@width+1)& (0+255),w,b
  5874  000C1C  A4D8               	btfss	status,2,c
  5875  000C1E  D7F1               	goto	u7400
  5876  000C20                     u7410:
  5877                           
  5878                           ; BSR set to: 0
  5879                           
  5880                           ; BSR set to: 0
  5881                           
  5882                           ; BSR set to: 0
  5883                           
  5884                           ; BSR set to: 0
  5885  000C20  C09B  FFF6         	movff	sprintf@f,tblptrl
  5886  000C24  C09C  FFF7         	movff	sprintf@f+1,tblptrh
  5887  000C28  4B9B               	infsnz	sprintf@f& (0+255),f,b
  5888  000C2A  2B9C               	incf	(sprintf@f+1)& (0+255),f,b
  5889  000C2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5890  000C2C  6AF8               	clrf	tblptru,c
  5891  000C2E                     	endif
  5892  000C2E                     	if	0	;tblptru may be non-zero
  5893  000C2E                     	endif
  5894  000C2E  0008               	tblrd		*
  5895  000C30  CFF5 F0C8          	movff	tablat,sprintf@c
  5896  000C34  51C8               	movf	sprintf@c& (0+255),w,b
  5897  000C36  A4D8               	btfss	status,2,c
  5898  000C38  EF10  F000         	goto	l458
  5899  000C3C                     u7420:
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;doprnt.c: 1538: *sp = 0;
  5903                           
  5904                           ; BSR set to: 0
  5905                           
  5906                           ;doprnt.c: 1533: }
  5907                           ;doprnt.c: 1535: alldone:
  5908                           
  5909                           ; BSR set to: 0
  5910  000C3C  C099  FFD9         	movff	sprintf@sp,fsr2l
  5911  000C40  C09A  FFDA         	movff	sprintf@sp+1,fsr2h
  5912  000C44  0E00               	movlw	0
  5913  000C46  6EDF               	movwf	indf2,c
  5914  000C48  0012               	return	
  5915  000C4A                     __end_of_sprintf:
  5916                           	opt stack 0
  5917                           tblptru	equ	0xFF8
  5918                           tblptrh	equ	0xFF7
  5919                           tblptrl	equ	0xFF6
  5920                           tablat	equ	0xFF5
  5921                           prodh	equ	0xFF4
  5922                           prodl	equ	0xFF3
  5923                           postinc0	equ	0xFEE
  5924                           wreg	equ	0xFE8
  5925                           postdec1	equ	0xFE5
  5926                           fsr1l	equ	0xFE1
  5927                           indf2	equ	0xFDF
  5928                           postinc2	equ	0xFDE
  5929                           postdec2	equ	0xFDD
  5930                           fsr2h	equ	0xFDA
  5931                           fsr2l	equ	0xFD9
  5932                           status	equ	0xFD8
  5933                           
  5934 ;; *************** function _scale *****************
  5935 ;; Defined at:
  5936 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;  scl             1    wreg     char 
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;  scl             1    3[BANK0 ] char 
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  3   82[COMRAM] char 
  5943 ;; Registers used:
  5944 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5950 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5953 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;Total ram usage:        7 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:    4
  5957 ;; This function calls:
  5958 ;;		___awdiv
  5959 ;;		___awmod
  5960 ;;		___ftmul
  5961 ;;		___wmul
  5962 ;; This function is called by:
  5963 ;;		_sprintf
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text2
  5968  001676                     __ptext2:
  5969                           	opt stack 0
  5970  001676                     _scale:
  5971                           	opt stack 25
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;incstack = 0
  5975                           ;scale@scl stored from wreg
  5976  001676  0100               	movlb	0	; () banked
  5977  001678  6F83               	movwf	scale@scl& (0+255),b
  5978                           
  5979                           ;doprnt.c: 428: if(scl < 0) {
  5980  00167A  0100               	movlb	0	; () banked
  5981  00167C  AF83               	btfss	scale@scl& (0+255),7,b
  5982  00167E  D118               	goto	l447
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;doprnt.c: 429: scl = -scl;
  5986  001680  6D83               	negf	scale@scl& (0+255),b
  5987                           
  5988                           ;doprnt.c: 430: if(scl>=110)
  5989  001682  5183               	movf	scale@scl& (0+255),w,b
  5990  001684  0A80               	xorlw	128
  5991  001686  0F12               	addlw	-238
  5992  001688  A0D8               	btfss	status,0,c
  5993  00168A  D09C               	goto	l448
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5997  00168C  0E00               	movlw	0
  5998  00168E  6E25               	movwf	___wmul@multiplicand+1,c
  5999  001690  0E03               	movlw	3
  6000  001692  6E24               	movwf	___wmul@multiplicand,c
  6001  001694  0E00               	movlw	0
  6002  001696  6E1D               	movwf	___awdiv@divisor+1,c
  6003  001698  0E0A               	movlw	10
  6004  00169A  6E1C               	movwf	___awdiv@divisor,c
  6005  00169C  0E00               	movlw	0
  6006  00169E  6E17               	movwf	___awmod@divisor+1,c
  6007  0016A0  0E64               	movlw	100
  6008  0016A2  6E16               	movwf	___awmod@divisor,c
  6009  0016A4  5183               	movf	scale@scl& (0+255),w,b
  6010  0016A6  6E14               	movwf	___awmod@dividend,c
  6011  0016A8  6A15               	clrf	___awmod@dividend+1,c
  6012  0016AA  BE14               	btfsc	___awmod@dividend,7,c
  6013  0016AC  0615               	decf	___awmod@dividend+1,f,c
  6014  0016AE  ECDC  F014         	call	___awmod	;wreg free
  6015  0016B2  C014  F01A         	movff	?___awmod,___awdiv@dividend
  6016  0016B6  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  6017  0016BA  ECD8  F013         	call	___awdiv	;wreg free
  6018  0016BE  0E09               	movlw	9
  6019  0016C0  241A               	addwf	?___awdiv,w,c
  6020  0016C2  6E22               	movwf	___wmul@multiplier,c
  6021  0016C4  0E00               	movlw	0
  6022  0016C6  201B               	addwfc	?___awdiv+1,w,c
  6023  0016C8  6E23               	movwf	___wmul@multiplier+1,c
  6024  0016CA  EC31  F017         	call	___wmul	;wreg free
  6025  0016CE  0EAA               	movlw	low __npowers_
  6026  0016D0  2422               	addwf	?___wmul,w,c
  6027  0016D2  6EF6               	movwf	tblptrl,c
  6028  0016D4  0EFE               	movlw	high __npowers_
  6029  0016D6  2023               	addwfc	?___wmul+1,w,c
  6030  0016D8  6EF7               	movwf	tblptrh,c
  6031  0016DA                     	if	1	;There are 3 active tblptr bytes
  6032  0016DA  6AF8               	clrf	tblptru,c
  6033  0016DC  0E00               	movlw	low (__mediumconst shr (0+16))
  6034  0016DE  22F8               	addwfc	tblptru,f,c
  6035  0016E0                     	endif
  6036  0016E0  0009               	tblrd		*+
  6037  0016E2  CFF5 F047          	movff	tablat,___ftmul@f2
  6038  0016E6  0009               	tblrd		*+
  6039  0016E8  CFF5 F048          	movff	tablat,___ftmul@f2+1
  6040  0016EC  000A               	tblrd		*-
  6041  0016EE  CFF5 F049          	movff	tablat,___ftmul@f2+2
  6042  0016F2  0E00               	movlw	0
  6043  0016F4  6E1D               	movwf	___awdiv@divisor+1,c
  6044  0016F6  0E64               	movlw	100
  6045  0016F8  6E1C               	movwf	___awdiv@divisor,c
  6046  0016FA  0100               	movlb	0	; () banked
  6047  0016FC  5183               	movf	scale@scl& (0+255),w,b
  6048  0016FE  6E1A               	movwf	___awdiv@dividend,c
  6049  001700  6A1B               	clrf	___awdiv@dividend+1,c
  6050  001702  BE1A               	btfsc	___awdiv@dividend,7,c
  6051  001704  061B               	decf	___awdiv@dividend+1,f,c
  6052  001706  ECD8  F013         	call	___awdiv	;wreg free
  6053  00170A  0E12               	movlw	18
  6054  00170C  241A               	addwf	?___awdiv,w,c
  6055  00170E  6E22               	movwf	___wmul@multiplier,c
  6056  001710  0E00               	movlw	0
  6057  001712  201B               	addwfc	?___awdiv+1,w,c
  6058  001714  6E23               	movwf	___wmul@multiplier+1,c
  6059  001716  0E00               	movlw	0
  6060  001718  6E25               	movwf	___wmul@multiplicand+1,c
  6061  00171A  0E03               	movlw	3
  6062  00171C  6E24               	movwf	___wmul@multiplicand,c
  6063  00171E  EC31  F017         	call	___wmul	;wreg free
  6064  001722  0EAA               	movlw	low __npowers_
  6065  001724  2422               	addwf	?___wmul,w,c
  6066  001726  6EF6               	movwf	tblptrl,c
  6067  001728  0EFE               	movlw	high __npowers_
  6068  00172A  2023               	addwfc	?___wmul+1,w,c
  6069  00172C  6EF7               	movwf	tblptrh,c
  6070  00172E                     	if	1	;There are 3 active tblptr bytes
  6071  00172E  6AF8               	clrf	tblptru,c
  6072  001730  0E00               	movlw	low (__mediumconst shr (0+16))
  6073  001732  22F8               	addwfc	tblptru,f,c
  6074  001734                     	endif
  6075  001734  0009               	tblrd		*+
  6076  001736  CFF5 F044          	movff	tablat,___ftmul@f1
  6077  00173A  0009               	tblrd		*+
  6078  00173C  CFF5 F045          	movff	tablat,___ftmul@f1+1
  6079  001740  000A               	tblrd		*-
  6080  001742  CFF5 F046          	movff	tablat,___ftmul@f1+2
  6081  001746  EC2E  F011         	call	___ftmul	;wreg free
  6082  00174A  C044  F080         	movff	?___ftmul,_scale$1911
  6083  00174E  C045  F081         	movff	?___ftmul+1,_scale$1911+1
  6084  001752  C046  F082         	movff	?___ftmul+2,_scale$1911+2
  6085                           
  6086                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6087  001756  C080  F044         	movff	_scale$1911,___ftmul@f1
  6088  00175A  C081  F045         	movff	_scale$1911+1,___ftmul@f1+1
  6089  00175E  C082  F046         	movff	_scale$1911+2,___ftmul@f1+2
  6090  001762  0E00               	movlw	0
  6091  001764  6E25               	movwf	___wmul@multiplicand+1,c
  6092  001766  0E03               	movlw	3
  6093  001768  6E24               	movwf	___wmul@multiplicand,c
  6094  00176A  0E00               	movlw	0
  6095  00176C  6E17               	movwf	___awmod@divisor+1,c
  6096  00176E  0E0A               	movlw	10
  6097  001770  6E16               	movwf	___awmod@divisor,c
  6098  001772  0100               	movlb	0	; () banked
  6099  001774  5183               	movf	scale@scl& (0+255),w,b
  6100  001776  6E14               	movwf	___awmod@dividend,c
  6101  001778  6A15               	clrf	___awmod@dividend+1,c
  6102  00177A  BE14               	btfsc	___awmod@dividend,7,c
  6103  00177C  0615               	decf	___awmod@dividend+1,f,c
  6104  00177E  ECDC  F014         	call	___awmod	;wreg free
  6105  001782  C014  F022         	movff	?___awmod,___wmul@multiplier
  6106  001786  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  6107  00178A  EC31  F017         	call	___wmul	;wreg free
  6108  00178E  0EAA               	movlw	low __npowers_
  6109  001790  2422               	addwf	?___wmul,w,c
  6110  001792  6EF6               	movwf	tblptrl,c
  6111  001794  0EFE               	movlw	high __npowers_
  6112  001796  2023               	addwfc	?___wmul+1,w,c
  6113  001798  6EF7               	movwf	tblptrh,c
  6114  00179A                     	if	1	;There are 3 active tblptr bytes
  6115  00179A  6AF8               	clrf	tblptru,c
  6116  00179C  0E00               	movlw	low (__mediumconst shr (0+16))
  6117  00179E  22F8               	addwfc	tblptru,f,c
  6118  0017A0                     	endif
  6119  0017A0  0009               	tblrd		*+
  6120  0017A2  CFF5 F047          	movff	tablat,___ftmul@f2
  6121  0017A6  0009               	tblrd		*+
  6122  0017A8  CFF5 F048          	movff	tablat,___ftmul@f2+1
  6123  0017AC  000A               	tblrd		*-
  6124  0017AE  CFF5 F049          	movff	tablat,___ftmul@f2+2
  6125  0017B2  EC2E  F011         	call	___ftmul	;wreg free
  6126  0017B6  C044  F053         	movff	?___ftmul,?_scale
  6127  0017BA  C045  F054         	movff	?___ftmul+1,?_scale+1
  6128  0017BE  C046  F055         	movff	?___ftmul+2,?_scale+2
  6129  0017C2  0012               	return	
  6130  0017C4                     l448:
  6131                           
  6132                           ;doprnt.c: 432: else if(scl > 10)
  6133  0017C4  0100               	movlb	0	; () banked
  6134  0017C6  5183               	movf	scale@scl& (0+255),w,b
  6135  0017C8  0A80               	xorlw	128
  6136  0017CA  0F75               	addlw	-139
  6137  0017CC  A0D8               	btfss	status,0,c
  6138  0017CE  D05A               	goto	l451
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6142  0017D0  0E00               	movlw	0
  6143  0017D2  6E1D               	movwf	___awdiv@divisor+1,c
  6144  0017D4  0E0A               	movlw	10
  6145  0017D6  6E1C               	movwf	___awdiv@divisor,c
  6146  0017D8  5183               	movf	scale@scl& (0+255),w,b
  6147  0017DA  6E1A               	movwf	___awdiv@dividend,c
  6148  0017DC  6A1B               	clrf	___awdiv@dividend+1,c
  6149  0017DE  BE1A               	btfsc	___awdiv@dividend,7,c
  6150  0017E0  061B               	decf	___awdiv@dividend+1,f,c
  6151  0017E2  ECD8  F013         	call	___awdiv	;wreg free
  6152  0017E6  0E09               	movlw	9
  6153  0017E8  241A               	addwf	?___awdiv,w,c
  6154  0017EA  6E22               	movwf	___wmul@multiplier,c
  6155  0017EC  0E00               	movlw	0
  6156  0017EE  201B               	addwfc	?___awdiv+1,w,c
  6157  0017F0  6E23               	movwf	___wmul@multiplier+1,c
  6158  0017F2  0E00               	movlw	0
  6159  0017F4  6E25               	movwf	___wmul@multiplicand+1,c
  6160  0017F6  0E03               	movlw	3
  6161  0017F8  6E24               	movwf	___wmul@multiplicand,c
  6162  0017FA  EC31  F017         	call	___wmul	;wreg free
  6163  0017FE  0EAA               	movlw	low __npowers_
  6164  001800  2422               	addwf	?___wmul,w,c
  6165  001802  6EF6               	movwf	tblptrl,c
  6166  001804  0EFE               	movlw	high __npowers_
  6167  001806  2023               	addwfc	?___wmul+1,w,c
  6168  001808  6EF7               	movwf	tblptrh,c
  6169  00180A                     	if	1	;There are 3 active tblptr bytes
  6170  00180A  6AF8               	clrf	tblptru,c
  6171  00180C  0E00               	movlw	low (__mediumconst shr (0+16))
  6172  00180E  22F8               	addwfc	tblptru,f,c
  6173  001810                     	endif
  6174  001810  0009               	tblrd		*+
  6175  001812  CFF5 F044          	movff	tablat,___ftmul@f1
  6176  001816  0009               	tblrd		*+
  6177  001818  CFF5 F045          	movff	tablat,___ftmul@f1+1
  6178  00181C  000A               	tblrd		*-
  6179  00181E  CFF5 F046          	movff	tablat,___ftmul@f1+2
  6180  001822  0E00               	movlw	0
  6181  001824  6E25               	movwf	___wmul@multiplicand+1,c
  6182  001826  0E03               	movlw	3
  6183  001828  6E24               	movwf	___wmul@multiplicand,c
  6184  00182A  0E00               	movlw	0
  6185  00182C  6E17               	movwf	___awmod@divisor+1,c
  6186  00182E  0E0A               	movlw	10
  6187  001830  6E16               	movwf	___awmod@divisor,c
  6188  001832  0100               	movlb	0	; () banked
  6189  001834  5183               	movf	scale@scl& (0+255),w,b
  6190  001836  6E14               	movwf	___awmod@dividend,c
  6191  001838  6A15               	clrf	___awmod@dividend+1,c
  6192  00183A  BE14               	btfsc	___awmod@dividend,7,c
  6193  00183C  0615               	decf	___awmod@dividend+1,f,c
  6194  00183E  ECDC  F014         	call	___awmod	;wreg free
  6195  001842  C014  F022         	movff	?___awmod,___wmul@multiplier
  6196  001846  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  6197  00184A  EC31  F017         	call	___wmul	;wreg free
  6198  00184E  0EAA               	movlw	low __npowers_
  6199  001850  2422               	addwf	?___wmul,w,c
  6200  001852  6EF6               	movwf	tblptrl,c
  6201  001854  0EFE               	movlw	high __npowers_
  6202  001856  2023               	addwfc	?___wmul+1,w,c
  6203  001858  6EF7               	movwf	tblptrh,c
  6204  00185A                     	if	1	;There are 3 active tblptr bytes
  6205  00185A  6AF8               	clrf	tblptru,c
  6206  00185C  0E00               	movlw	low (__mediumconst shr (0+16))
  6207  00185E  22F8               	addwfc	tblptru,f,c
  6208  001860                     	endif
  6209  001860  0009               	tblrd		*+
  6210  001862  CFF5 F047          	movff	tablat,___ftmul@f2
  6211  001866  0009               	tblrd		*+
  6212  001868  CFF5 F048          	movff	tablat,___ftmul@f2+1
  6213  00186C  000A               	tblrd		*-
  6214  00186E  CFF5 F049          	movff	tablat,___ftmul@f2+2
  6215  001872  EC2E  F011         	call	___ftmul	;wreg free
  6216  001876  C044  F053         	movff	?___ftmul,?_scale
  6217  00187A  C045  F054         	movff	?___ftmul+1,?_scale+1
  6218  00187E  C046  F055         	movff	?___ftmul+2,?_scale+2
  6219  001882  0012               	return	
  6220  001884                     l451:
  6221                           
  6222                           ;doprnt.c: 434: return _npowers_[scl];
  6223  001884  0100               	movlb	0	; () banked
  6224  001886  5183               	movf	scale@scl& (0+255),w,b
  6225  001888  0D03               	mullw	3
  6226  00188A  0EAA               	movlw	low __npowers_
  6227  00188C  24F3               	addwf	prodl,w,c
  6228  00188E  6EF6               	movwf	tblptrl,c
  6229  001890  0EFE               	movlw	high __npowers_
  6230  001892  20F4               	addwfc	prodh,w,c
  6231  001894  6EF7               	movwf	tblptrh,c
  6232  001896                     	if	1	;There are 3 active tblptr bytes
  6233  001896  6AF8               	clrf	tblptru,c
  6234  001898  0E00               	movlw	low (__mediumconst shr (0+16))
  6235  00189A  22F8               	addwfc	tblptru,f,c
  6236  00189C                     	endif
  6237  00189C  0009               	tblrd		*+
  6238  00189E  CFF5 F053          	movff	tablat,?_scale
  6239  0018A2  0009               	tblrd		*+
  6240  0018A4  CFF5 F054          	movff	tablat,?_scale+1
  6241  0018A8  000A               	tblrd		*-
  6242  0018AA  CFF5 F055          	movff	tablat,?_scale+2
  6243                           
  6244                           ; BSR set to: 0
  6245  0018AE  0012               	return	
  6246  0018B0                     l447:
  6247                           
  6248                           ; BSR set to: 0
  6249                           ;doprnt.c: 435: }
  6250                           ;doprnt.c: 436: if(scl>=110)
  6251                           
  6252                           ; BSR set to: 0
  6253  0018B0  5183               	movf	scale@scl& (0+255),w,b
  6254  0018B2  0A80               	xorlw	128
  6255  0018B4  0F12               	addlw	-238
  6256  0018B6  A0D8               	btfss	status,0,c
  6257  0018B8  D09C               	goto	l452
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6261  0018BA  0E00               	movlw	0
  6262  0018BC  6E25               	movwf	___wmul@multiplicand+1,c
  6263  0018BE  0E03               	movlw	3
  6264  0018C0  6E24               	movwf	___wmul@multiplicand,c
  6265  0018C2  0E00               	movlw	0
  6266  0018C4  6E1D               	movwf	___awdiv@divisor+1,c
  6267  0018C6  0E0A               	movlw	10
  6268  0018C8  6E1C               	movwf	___awdiv@divisor,c
  6269  0018CA  0E00               	movlw	0
  6270  0018CC  6E17               	movwf	___awmod@divisor+1,c
  6271  0018CE  0E64               	movlw	100
  6272  0018D0  6E16               	movwf	___awmod@divisor,c
  6273  0018D2  5183               	movf	scale@scl& (0+255),w,b
  6274  0018D4  6E14               	movwf	___awmod@dividend,c
  6275  0018D6  6A15               	clrf	___awmod@dividend+1,c
  6276  0018D8  BE14               	btfsc	___awmod@dividend,7,c
  6277  0018DA  0615               	decf	___awmod@dividend+1,f,c
  6278  0018DC  ECDC  F014         	call	___awmod	;wreg free
  6279  0018E0  C014  F01A         	movff	?___awmod,___awdiv@dividend
  6280  0018E4  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  6281  0018E8  ECD8  F013         	call	___awdiv	;wreg free
  6282  0018EC  0E09               	movlw	9
  6283  0018EE  241A               	addwf	?___awdiv,w,c
  6284  0018F0  6E22               	movwf	___wmul@multiplier,c
  6285  0018F2  0E00               	movlw	0
  6286  0018F4  201B               	addwfc	?___awdiv+1,w,c
  6287  0018F6  6E23               	movwf	___wmul@multiplier+1,c
  6288  0018F8  EC31  F017         	call	___wmul	;wreg free
  6289  0018FC  0E83               	movlw	low __powers_
  6290  0018FE  2422               	addwf	?___wmul,w,c
  6291  001900  6EF6               	movwf	tblptrl,c
  6292  001902  0EFE               	movlw	high __powers_
  6293  001904  2023               	addwfc	?___wmul+1,w,c
  6294  001906  6EF7               	movwf	tblptrh,c
  6295  001908                     	if	1	;There are 3 active tblptr bytes
  6296  001908  6AF8               	clrf	tblptru,c
  6297  00190A  0E00               	movlw	low (__mediumconst shr (0+16))
  6298  00190C  22F8               	addwfc	tblptru,f,c
  6299  00190E                     	endif
  6300  00190E  0009               	tblrd		*+
  6301  001910  CFF5 F047          	movff	tablat,___ftmul@f2
  6302  001914  0009               	tblrd		*+
  6303  001916  CFF5 F048          	movff	tablat,___ftmul@f2+1
  6304  00191A  000A               	tblrd		*-
  6305  00191C  CFF5 F049          	movff	tablat,___ftmul@f2+2
  6306  001920  0E00               	movlw	0
  6307  001922  6E1D               	movwf	___awdiv@divisor+1,c
  6308  001924  0E64               	movlw	100
  6309  001926  6E1C               	movwf	___awdiv@divisor,c
  6310  001928  0100               	movlb	0	; () banked
  6311  00192A  5183               	movf	scale@scl& (0+255),w,b
  6312  00192C  6E1A               	movwf	___awdiv@dividend,c
  6313  00192E  6A1B               	clrf	___awdiv@dividend+1,c
  6314  001930  BE1A               	btfsc	___awdiv@dividend,7,c
  6315  001932  061B               	decf	___awdiv@dividend+1,f,c
  6316  001934  ECD8  F013         	call	___awdiv	;wreg free
  6317  001938  0E12               	movlw	18
  6318  00193A  241A               	addwf	?___awdiv,w,c
  6319  00193C  6E22               	movwf	___wmul@multiplier,c
  6320  00193E  0E00               	movlw	0
  6321  001940  201B               	addwfc	?___awdiv+1,w,c
  6322  001942  6E23               	movwf	___wmul@multiplier+1,c
  6323  001944  0E00               	movlw	0
  6324  001946  6E25               	movwf	___wmul@multiplicand+1,c
  6325  001948  0E03               	movlw	3
  6326  00194A  6E24               	movwf	___wmul@multiplicand,c
  6327  00194C  EC31  F017         	call	___wmul	;wreg free
  6328  001950  0E83               	movlw	low __powers_
  6329  001952  2422               	addwf	?___wmul,w,c
  6330  001954  6EF6               	movwf	tblptrl,c
  6331  001956  0EFE               	movlw	high __powers_
  6332  001958  2023               	addwfc	?___wmul+1,w,c
  6333  00195A  6EF7               	movwf	tblptrh,c
  6334  00195C                     	if	1	;There are 3 active tblptr bytes
  6335  00195C  6AF8               	clrf	tblptru,c
  6336  00195E  0E00               	movlw	low (__mediumconst shr (0+16))
  6337  001960  22F8               	addwfc	tblptru,f,c
  6338  001962                     	endif
  6339  001962  0009               	tblrd		*+
  6340  001964  CFF5 F044          	movff	tablat,___ftmul@f1
  6341  001968  0009               	tblrd		*+
  6342  00196A  CFF5 F045          	movff	tablat,___ftmul@f1+1
  6343  00196E  000A               	tblrd		*-
  6344  001970  CFF5 F046          	movff	tablat,___ftmul@f1+2
  6345  001974  EC2E  F011         	call	___ftmul	;wreg free
  6346  001978  C044  F080         	movff	?___ftmul,_scale$1911
  6347  00197C  C045  F081         	movff	?___ftmul+1,_scale$1911+1
  6348  001980  C046  F082         	movff	?___ftmul+2,_scale$1911+2
  6349                           
  6350                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6351  001984  C080  F044         	movff	_scale$1911,___ftmul@f1
  6352  001988  C081  F045         	movff	_scale$1911+1,___ftmul@f1+1
  6353  00198C  C082  F046         	movff	_scale$1911+2,___ftmul@f1+2
  6354  001990  0E00               	movlw	0
  6355  001992  6E25               	movwf	___wmul@multiplicand+1,c
  6356  001994  0E03               	movlw	3
  6357  001996  6E24               	movwf	___wmul@multiplicand,c
  6358  001998  0E00               	movlw	0
  6359  00199A  6E17               	movwf	___awmod@divisor+1,c
  6360  00199C  0E0A               	movlw	10
  6361  00199E  6E16               	movwf	___awmod@divisor,c
  6362  0019A0  0100               	movlb	0	; () banked
  6363  0019A2  5183               	movf	scale@scl& (0+255),w,b
  6364  0019A4  6E14               	movwf	___awmod@dividend,c
  6365  0019A6  6A15               	clrf	___awmod@dividend+1,c
  6366  0019A8  BE14               	btfsc	___awmod@dividend,7,c
  6367  0019AA  0615               	decf	___awmod@dividend+1,f,c
  6368  0019AC  ECDC  F014         	call	___awmod	;wreg free
  6369  0019B0  C014  F022         	movff	?___awmod,___wmul@multiplier
  6370  0019B4  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  6371  0019B8  EC31  F017         	call	___wmul	;wreg free
  6372  0019BC  0E83               	movlw	low __powers_
  6373  0019BE  2422               	addwf	?___wmul,w,c
  6374  0019C0  6EF6               	movwf	tblptrl,c
  6375  0019C2  0EFE               	movlw	high __powers_
  6376  0019C4  2023               	addwfc	?___wmul+1,w,c
  6377  0019C6  6EF7               	movwf	tblptrh,c
  6378  0019C8                     	if	1	;There are 3 active tblptr bytes
  6379  0019C8  6AF8               	clrf	tblptru,c
  6380  0019CA  0E00               	movlw	low (__mediumconst shr (0+16))
  6381  0019CC  22F8               	addwfc	tblptru,f,c
  6382  0019CE                     	endif
  6383  0019CE  0009               	tblrd		*+
  6384  0019D0  CFF5 F047          	movff	tablat,___ftmul@f2
  6385  0019D4  0009               	tblrd		*+
  6386  0019D6  CFF5 F048          	movff	tablat,___ftmul@f2+1
  6387  0019DA  000A               	tblrd		*-
  6388  0019DC  CFF5 F049          	movff	tablat,___ftmul@f2+2
  6389  0019E0  EC2E  F011         	call	___ftmul	;wreg free
  6390  0019E4  C044  F053         	movff	?___ftmul,?_scale
  6391  0019E8  C045  F054         	movff	?___ftmul+1,?_scale+1
  6392  0019EC  C046  F055         	movff	?___ftmul+2,?_scale+2
  6393  0019F0  0012               	return	
  6394  0019F2                     l452:
  6395                           
  6396                           ;doprnt.c: 438: else if(scl > 10)
  6397  0019F2  0100               	movlb	0	; () banked
  6398  0019F4  5183               	movf	scale@scl& (0+255),w,b
  6399  0019F6  0A80               	xorlw	128
  6400  0019F8  0F75               	addlw	-139
  6401  0019FA  A0D8               	btfss	status,0,c
  6402  0019FC  D05A               	goto	l454
  6403                           
  6404                           ; BSR set to: 0
  6405                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6406  0019FE  0E00               	movlw	0
  6407  001A00  6E1D               	movwf	___awdiv@divisor+1,c
  6408  001A02  0E0A               	movlw	10
  6409  001A04  6E1C               	movwf	___awdiv@divisor,c
  6410  001A06  5183               	movf	scale@scl& (0+255),w,b
  6411  001A08  6E1A               	movwf	___awdiv@dividend,c
  6412  001A0A  6A1B               	clrf	___awdiv@dividend+1,c
  6413  001A0C  BE1A               	btfsc	___awdiv@dividend,7,c
  6414  001A0E  061B               	decf	___awdiv@dividend+1,f,c
  6415  001A10  ECD8  F013         	call	___awdiv	;wreg free
  6416  001A14  0E09               	movlw	9
  6417  001A16  241A               	addwf	?___awdiv,w,c
  6418  001A18  6E22               	movwf	___wmul@multiplier,c
  6419  001A1A  0E00               	movlw	0
  6420  001A1C  201B               	addwfc	?___awdiv+1,w,c
  6421  001A1E  6E23               	movwf	___wmul@multiplier+1,c
  6422  001A20  0E00               	movlw	0
  6423  001A22  6E25               	movwf	___wmul@multiplicand+1,c
  6424  001A24  0E03               	movlw	3
  6425  001A26  6E24               	movwf	___wmul@multiplicand,c
  6426  001A28  EC31  F017         	call	___wmul	;wreg free
  6427  001A2C  0E83               	movlw	low __powers_
  6428  001A2E  2422               	addwf	?___wmul,w,c
  6429  001A30  6EF6               	movwf	tblptrl,c
  6430  001A32  0EFE               	movlw	high __powers_
  6431  001A34  2023               	addwfc	?___wmul+1,w,c
  6432  001A36  6EF7               	movwf	tblptrh,c
  6433  001A38                     	if	1	;There are 3 active tblptr bytes
  6434  001A38  6AF8               	clrf	tblptru,c
  6435  001A3A  0E00               	movlw	low (__mediumconst shr (0+16))
  6436  001A3C  22F8               	addwfc	tblptru,f,c
  6437  001A3E                     	endif
  6438  001A3E  0009               	tblrd		*+
  6439  001A40  CFF5 F044          	movff	tablat,___ftmul@f1
  6440  001A44  0009               	tblrd		*+
  6441  001A46  CFF5 F045          	movff	tablat,___ftmul@f1+1
  6442  001A4A  000A               	tblrd		*-
  6443  001A4C  CFF5 F046          	movff	tablat,___ftmul@f1+2
  6444  001A50  0E00               	movlw	0
  6445  001A52  6E25               	movwf	___wmul@multiplicand+1,c
  6446  001A54  0E03               	movlw	3
  6447  001A56  6E24               	movwf	___wmul@multiplicand,c
  6448  001A58  0E00               	movlw	0
  6449  001A5A  6E17               	movwf	___awmod@divisor+1,c
  6450  001A5C  0E0A               	movlw	10
  6451  001A5E  6E16               	movwf	___awmod@divisor,c
  6452  001A60  0100               	movlb	0	; () banked
  6453  001A62  5183               	movf	scale@scl& (0+255),w,b
  6454  001A64  6E14               	movwf	___awmod@dividend,c
  6455  001A66  6A15               	clrf	___awmod@dividend+1,c
  6456  001A68  BE14               	btfsc	___awmod@dividend,7,c
  6457  001A6A  0615               	decf	___awmod@dividend+1,f,c
  6458  001A6C  ECDC  F014         	call	___awmod	;wreg free
  6459  001A70  C014  F022         	movff	?___awmod,___wmul@multiplier
  6460  001A74  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  6461  001A78  EC31  F017         	call	___wmul	;wreg free
  6462  001A7C  0E83               	movlw	low __powers_
  6463  001A7E  2422               	addwf	?___wmul,w,c
  6464  001A80  6EF6               	movwf	tblptrl,c
  6465  001A82  0EFE               	movlw	high __powers_
  6466  001A84  2023               	addwfc	?___wmul+1,w,c
  6467  001A86  6EF7               	movwf	tblptrh,c
  6468  001A88                     	if	1	;There are 3 active tblptr bytes
  6469  001A88  6AF8               	clrf	tblptru,c
  6470  001A8A  0E00               	movlw	low (__mediumconst shr (0+16))
  6471  001A8C  22F8               	addwfc	tblptru,f,c
  6472  001A8E                     	endif
  6473  001A8E  0009               	tblrd		*+
  6474  001A90  CFF5 F047          	movff	tablat,___ftmul@f2
  6475  001A94  0009               	tblrd		*+
  6476  001A96  CFF5 F048          	movff	tablat,___ftmul@f2+1
  6477  001A9A  000A               	tblrd		*-
  6478  001A9C  CFF5 F049          	movff	tablat,___ftmul@f2+2
  6479  001AA0  EC2E  F011         	call	___ftmul	;wreg free
  6480  001AA4  C044  F053         	movff	?___ftmul,?_scale
  6481  001AA8  C045  F054         	movff	?___ftmul+1,?_scale+1
  6482  001AAC  C046  F055         	movff	?___ftmul+2,?_scale+2
  6483  001AB0  0012               	return	
  6484  001AB2                     l454:
  6485                           
  6486                           ;doprnt.c: 440: return _powers_[scl];
  6487  001AB2  0100               	movlb	0	; () banked
  6488  001AB4  5183               	movf	scale@scl& (0+255),w,b
  6489  001AB6  0D03               	mullw	3
  6490  001AB8  0E83               	movlw	low __powers_
  6491  001ABA  24F3               	addwf	prodl,w,c
  6492  001ABC  6EF6               	movwf	tblptrl,c
  6493  001ABE  0EFE               	movlw	high __powers_
  6494  001AC0  20F4               	addwfc	prodh,w,c
  6495  001AC2  6EF7               	movwf	tblptrh,c
  6496  001AC4                     	if	1	;There are 3 active tblptr bytes
  6497  001AC4  6AF8               	clrf	tblptru,c
  6498  001AC6  0E00               	movlw	low (__mediumconst shr (0+16))
  6499  001AC8  22F8               	addwfc	tblptru,f,c
  6500  001ACA                     	endif
  6501  001ACA  0009               	tblrd		*+
  6502  001ACC  CFF5 F053          	movff	tablat,?_scale
  6503  001AD0  0009               	tblrd		*+
  6504  001AD2  CFF5 F054          	movff	tablat,?_scale+1
  6505  001AD6  000A               	tblrd		*-
  6506  001AD8  CFF5 F055          	movff	tablat,?_scale+2
  6507  001ADC  0012               	return	
  6508  001ADE                     __end_of_scale:
  6509                           	opt stack 0
  6510                           tblptru	equ	0xFF8
  6511                           tblptrh	equ	0xFF7
  6512                           tblptrl	equ	0xFF6
  6513                           tablat	equ	0xFF5
  6514                           prodh	equ	0xFF4
  6515                           prodl	equ	0xFF3
  6516                           postinc0	equ	0xFEE
  6517                           wreg	equ	0xFE8
  6518                           postdec1	equ	0xFE5
  6519                           fsr1l	equ	0xFE1
  6520                           indf2	equ	0xFDF
  6521                           postinc2	equ	0xFDE
  6522                           postdec2	equ	0xFDD
  6523                           fsr2h	equ	0xFDA
  6524                           fsr2l	equ	0xFD9
  6525                           status	equ	0xFD8
  6526                           
  6527 ;; *************** function _isdigit *****************
  6528 ;; Defined at:
  6529 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;  c               1    wreg     unsigned char 
  6532 ;; Auto vars:     Size  Location     Type
  6533 ;;  c               1   21[COMRAM] unsigned char 
  6534 ;; Return value:  Size  Location     Type
  6535 ;;		None               void
  6536 ;; Registers used:
  6537 ;;		wreg, status,2, status,0
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6546 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6547 ;;Total ram usage:        3 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    2
  6550 ;; This function calls:
  6551 ;;		Nothing
  6552 ;; This function is called by:
  6553 ;;		_sprintf
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           	psect	text3
  6558  002F3C                     __ptext3:
  6559                           	opt stack 0
  6560  002F3C                     _isdigit:
  6561                           	opt stack 27
  6562                           
  6563                           ;incstack = 0
  6564                           ;isdigit@c stored from wreg
  6565  002F3C  6E16               	movwf	isdigit@c,c
  6566  002F3E  0E00               	movlw	0
  6567  002F40  6E15               	movwf	_isdigit$1523,c
  6568  002F42  0E3A               	movlw	58
  6569  002F44  6016               	cpfslt	isdigit@c,c
  6570  002F46  D005               	goto	l951
  6571  002F48  0E2F               	movlw	47
  6572  002F4A  6416               	cpfsgt	isdigit@c,c
  6573  002F4C  D002               	goto	l951
  6574  002F4E  0E01               	movlw	1
  6575  002F50  6E15               	movwf	_isdigit$1523,c
  6576  002F52                     l951:
  6577  002F52  C015  F014         	movff	_isdigit$1523,??_isdigit
  6578  002F56  3014               	rrcf	??_isdigit,w,c
  6579  002F58  0012               	return	
  6580  002F5A                     __end_of_isdigit:
  6581                           	opt stack 0
  6582                           tblptru	equ	0xFF8
  6583                           tblptrh	equ	0xFF7
  6584                           tblptrl	equ	0xFF6
  6585                           tablat	equ	0xFF5
  6586                           prodh	equ	0xFF4
  6587                           prodl	equ	0xFF3
  6588                           postinc0	equ	0xFEE
  6589                           wreg	equ	0xFE8
  6590                           postdec1	equ	0xFE5
  6591                           fsr1l	equ	0xFE1
  6592                           indf2	equ	0xFDF
  6593                           postinc2	equ	0xFDE
  6594                           postdec2	equ	0xFDD
  6595                           fsr2h	equ	0xFDA
  6596                           fsr2l	equ	0xFD9
  6597                           status	equ	0xFD8
  6598                           
  6599 ;; *************** function _fround *****************
  6600 ;; Defined at:
  6601 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;  prec            1    wreg     unsigned char 
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;  prec            1    6[BANK0 ] unsigned char 
  6606 ;; Return value:  Size  Location     Type
  6607 ;;                  3   82[COMRAM] unsigned char 
  6608 ;; Registers used:
  6609 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6615 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6618 ;;      Totals:         3       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6619 ;;Total ram usage:       10 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    4
  6622 ;; This function calls:
  6623 ;;		___awdiv
  6624 ;;		___awmod
  6625 ;;		___ftmul
  6626 ;;		___wmul
  6627 ;; This function is called by:
  6628 ;;		_sprintf
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632                           	psect	text4
  6633  001ADE                     __ptext4:
  6634                           	opt stack 0
  6635  001ADE                     _fround:
  6636                           	opt stack 25
  6637                           
  6638                           ;incstack = 0
  6639                           ;fround@prec stored from wreg
  6640  001ADE  0100               	movlb	0	; () banked
  6641  001AE0  6F86               	movwf	fround@prec& (0+255),b
  6642                           
  6643                           ;doprnt.c: 413: if(prec>=110)
  6644  001AE2  0E6D               	movlw	109
  6645  001AE4  0100               	movlb	0	; () banked
  6646  001AE6  6586               	cpfsgt	fround@prec& (0+255),b
  6647  001AE8  D0A8               	goto	l441
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6651  001AEA  0E00               	movlw	0
  6652  001AEC  6E25               	movwf	___wmul@multiplicand+1,c
  6653  001AEE  0E03               	movlw	3
  6654  001AF0  6E24               	movwf	___wmul@multiplicand,c
  6655  001AF2  0E00               	movlw	0
  6656  001AF4  6E1D               	movwf	___awdiv@divisor+1,c
  6657  001AF6  0E0A               	movlw	10
  6658  001AF8  6E1C               	movwf	___awdiv@divisor,c
  6659  001AFA  0E00               	movlw	0
  6660  001AFC  6E17               	movwf	___awmod@divisor+1,c
  6661  001AFE  0E64               	movlw	100
  6662  001B00  6E16               	movwf	___awmod@divisor,c
  6663  001B02  C086  F014         	movff	fround@prec,___awmod@dividend
  6664  001B06  6A15               	clrf	___awmod@dividend+1,c
  6665  001B08  ECDC  F014         	call	___awmod	;wreg free
  6666  001B0C  C014  F01A         	movff	?___awmod,___awdiv@dividend
  6667  001B10  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  6668  001B14  ECD8  F013         	call	___awdiv	;wreg free
  6669  001B18  0E09               	movlw	9
  6670  001B1A  241A               	addwf	?___awdiv,w,c
  6671  001B1C  6E22               	movwf	___wmul@multiplier,c
  6672  001B1E  0E00               	movlw	0
  6673  001B20  201B               	addwfc	?___awdiv+1,w,c
  6674  001B22  6E23               	movwf	___wmul@multiplier+1,c
  6675  001B24  EC31  F017         	call	___wmul	;wreg free
  6676  001B28  0EAA               	movlw	low __npowers_
  6677  001B2A  2422               	addwf	?___wmul,w,c
  6678  001B2C  6EF6               	movwf	tblptrl,c
  6679  001B2E  0EFE               	movlw	high __npowers_
  6680  001B30  2023               	addwfc	?___wmul+1,w,c
  6681  001B32  6EF7               	movwf	tblptrh,c
  6682  001B34                     	if	1	;There are 3 active tblptr bytes
  6683  001B34  6AF8               	clrf	tblptru,c
  6684  001B36  0E00               	movlw	low (__mediumconst shr (0+16))
  6685  001B38  22F8               	addwfc	tblptru,f,c
  6686  001B3A                     	endif
  6687  001B3A  0009               	tblrd		*+
  6688  001B3C  CFF5 F047          	movff	tablat,___ftmul@f2
  6689  001B40  0009               	tblrd		*+
  6690  001B42  CFF5 F048          	movff	tablat,___ftmul@f2+1
  6691  001B46  000A               	tblrd		*-
  6692  001B48  CFF5 F049          	movff	tablat,___ftmul@f2+2
  6693  001B4C  0E00               	movlw	0
  6694  001B4E  6E1D               	movwf	___awdiv@divisor+1,c
  6695  001B50  0E64               	movlw	100
  6696  001B52  6E1C               	movwf	___awdiv@divisor,c
  6697  001B54  C086  F01A         	movff	fround@prec,___awdiv@dividend
  6698  001B58  6A1B               	clrf	___awdiv@dividend+1,c
  6699  001B5A  ECD8  F013         	call	___awdiv	;wreg free
  6700  001B5E  0E12               	movlw	18
  6701  001B60  241A               	addwf	?___awdiv,w,c
  6702  001B62  6E22               	movwf	___wmul@multiplier,c
  6703  001B64  0E00               	movlw	0
  6704  001B66  201B               	addwfc	?___awdiv+1,w,c
  6705  001B68  6E23               	movwf	___wmul@multiplier+1,c
  6706  001B6A  0E00               	movlw	0
  6707  001B6C  6E25               	movwf	___wmul@multiplicand+1,c
  6708  001B6E  0E03               	movlw	3
  6709  001B70  6E24               	movwf	___wmul@multiplicand,c
  6710  001B72  EC31  F017         	call	___wmul	;wreg free
  6711  001B76  0EAA               	movlw	low __npowers_
  6712  001B78  2422               	addwf	?___wmul,w,c
  6713  001B7A  6EF6               	movwf	tblptrl,c
  6714  001B7C  0EFE               	movlw	high __npowers_
  6715  001B7E  2023               	addwfc	?___wmul+1,w,c
  6716  001B80  6EF7               	movwf	tblptrh,c
  6717  001B82                     	if	1	;There are 3 active tblptr bytes
  6718  001B82  6AF8               	clrf	tblptru,c
  6719  001B84  0E00               	movlw	low (__mediumconst shr (0+16))
  6720  001B86  22F8               	addwfc	tblptru,f,c
  6721  001B88                     	endif
  6722  001B88  0009               	tblrd		*+
  6723  001B8A  CFF5 F044          	movff	tablat,___ftmul@f1
  6724  001B8E  0009               	tblrd		*+
  6725  001B90  CFF5 F045          	movff	tablat,___ftmul@f1+1
  6726  001B94  000A               	tblrd		*-
  6727  001B96  CFF5 F046          	movff	tablat,___ftmul@f1+2
  6728  001B9A  EC2E  F011         	call	___ftmul	;wreg free
  6729  001B9E  C044  F083         	movff	?___ftmul,_fround$1909
  6730  001BA2  C045  F084         	movff	?___ftmul+1,_fround$1909+1
  6731  001BA6  C046  F085         	movff	?___ftmul+2,_fround$1909+2
  6732                           
  6733                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6734  001BAA  0E00               	movlw	0
  6735  001BAC  6E25               	movwf	___wmul@multiplicand+1,c
  6736  001BAE  0E03               	movlw	3
  6737  001BB0  6E24               	movwf	___wmul@multiplicand,c
  6738  001BB2  0E00               	movlw	0
  6739  001BB4  6E17               	movwf	___awmod@divisor+1,c
  6740  001BB6  0E0A               	movlw	10
  6741  001BB8  6E16               	movwf	___awmod@divisor,c
  6742  001BBA  C086  F014         	movff	fround@prec,___awmod@dividend
  6743  001BBE  6A15               	clrf	___awmod@dividend+1,c
  6744  001BC0  ECDC  F014         	call	___awmod	;wreg free
  6745  001BC4  C014  F022         	movff	?___awmod,___wmul@multiplier
  6746  001BC8  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  6747  001BCC  EC31  F017         	call	___wmul	;wreg free
  6748  001BD0  0EAA               	movlw	low __npowers_
  6749  001BD2  2422               	addwf	?___wmul,w,c
  6750  001BD4  6EF6               	movwf	tblptrl,c
  6751  001BD6  0EFE               	movlw	high __npowers_
  6752  001BD8  2023               	addwfc	?___wmul+1,w,c
  6753  001BDA  6EF7               	movwf	tblptrh,c
  6754  001BDC                     	if	1	;There are 3 active tblptr bytes
  6755  001BDC  6AF8               	clrf	tblptru,c
  6756  001BDE  0E00               	movlw	low (__mediumconst shr (0+16))
  6757  001BE0  22F8               	addwfc	tblptru,f,c
  6758  001BE2                     	endif
  6759  001BE2  0009               	tblrd		*+
  6760  001BE4  CFF5 F047          	movff	tablat,___ftmul@f2
  6761  001BE8  0009               	tblrd		*+
  6762  001BEA  CFF5 F048          	movff	tablat,___ftmul@f2+1
  6763  001BEE  000A               	tblrd		*-
  6764  001BF0  CFF5 F049          	movff	tablat,___ftmul@f2+2
  6765  001BF4  C083  F044         	movff	_fround$1909,___ftmul@f1
  6766  001BF8  C084  F045         	movff	_fround$1909+1,___ftmul@f1+1
  6767  001BFC  C085  F046         	movff	_fround$1909+2,___ftmul@f1+2
  6768  001C00  EC2E  F011         	call	___ftmul	;wreg free
  6769  001C04  C044  F080         	movff	?___ftmul,_fround$1910
  6770  001C08  C045  F081         	movff	?___ftmul+1,_fround$1910+1
  6771  001C0C  C046  F082         	movff	?___ftmul+2,_fround$1910+2
  6772                           
  6773                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6774  001C10  C080  F044         	movff	_fround$1910,___ftmul@f1
  6775  001C14  C081  F045         	movff	_fround$1910+1,___ftmul@f1+1
  6776  001C18  C082  F046         	movff	_fround$1910+2,___ftmul@f1+2
  6777  001C1C  0E00               	movlw	0
  6778  001C1E  6E47               	movwf	___ftmul@f2,c
  6779  001C20  0E00               	movlw	0
  6780  001C22  6E48               	movwf	___ftmul@f2+1,c
  6781  001C24  0E3F               	movlw	63
  6782  001C26  6E49               	movwf	___ftmul@f2+2,c
  6783  001C28  EC2E  F011         	call	___ftmul	;wreg free
  6784  001C2C  C044  F053         	movff	?___ftmul,?_fround
  6785  001C30  C045  F054         	movff	?___ftmul+1,?_fround+1
  6786  001C34  C046  F055         	movff	?___ftmul+2,?_fround+2
  6787  001C38  0012               	return	
  6788  001C3A                     l441:
  6789                           
  6790                           ;doprnt.c: 415: else if(prec > 10)
  6791  001C3A  0E0A               	movlw	10
  6792  001C3C  0100               	movlb	0	; () banked
  6793  001C3E  6586               	cpfsgt	fround@prec& (0+255),b
  6794  001C40  D069               	goto	l444
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6798  001C42  0E00               	movlw	0
  6799  001C44  6E25               	movwf	___wmul@multiplicand+1,c
  6800  001C46  0E03               	movlw	3
  6801  001C48  6E24               	movwf	___wmul@multiplicand,c
  6802  001C4A  0E00               	movlw	0
  6803  001C4C  6E17               	movwf	___awmod@divisor+1,c
  6804  001C4E  0E0A               	movlw	10
  6805  001C50  6E16               	movwf	___awmod@divisor,c
  6806  001C52  C086  F014         	movff	fround@prec,___awmod@dividend
  6807  001C56  6A15               	clrf	___awmod@dividend+1,c
  6808  001C58  ECDC  F014         	call	___awmod	;wreg free
  6809  001C5C  C014  F022         	movff	?___awmod,___wmul@multiplier
  6810  001C60  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  6811  001C64  EC31  F017         	call	___wmul	;wreg free
  6812  001C68  0EAA               	movlw	low __npowers_
  6813  001C6A  2422               	addwf	?___wmul,w,c
  6814  001C6C  6EF6               	movwf	tblptrl,c
  6815  001C6E  0EFE               	movlw	high __npowers_
  6816  001C70  2023               	addwfc	?___wmul+1,w,c
  6817  001C72  6EF7               	movwf	tblptrh,c
  6818  001C74                     	if	1	;There are 3 active tblptr bytes
  6819  001C74  6AF8               	clrf	tblptru,c
  6820  001C76  0E00               	movlw	low (__mediumconst shr (0+16))
  6821  001C78  22F8               	addwfc	tblptru,f,c
  6822  001C7A                     	endif
  6823  001C7A  0009               	tblrd		*+
  6824  001C7C  CFF5 F047          	movff	tablat,___ftmul@f2
  6825  001C80  0009               	tblrd		*+
  6826  001C82  CFF5 F048          	movff	tablat,___ftmul@f2+1
  6827  001C86  000A               	tblrd		*-
  6828  001C88  CFF5 F049          	movff	tablat,___ftmul@f2+2
  6829  001C8C  0E00               	movlw	0
  6830  001C8E  6E1D               	movwf	___awdiv@divisor+1,c
  6831  001C90  0E0A               	movlw	10
  6832  001C92  6E1C               	movwf	___awdiv@divisor,c
  6833  001C94  C086  F01A         	movff	fround@prec,___awdiv@dividend
  6834  001C98  6A1B               	clrf	___awdiv@dividend+1,c
  6835  001C9A  ECD8  F013         	call	___awdiv	;wreg free
  6836  001C9E  0E09               	movlw	9
  6837  001CA0  241A               	addwf	?___awdiv,w,c
  6838  001CA2  6E22               	movwf	___wmul@multiplier,c
  6839  001CA4  0E00               	movlw	0
  6840  001CA6  201B               	addwfc	?___awdiv+1,w,c
  6841  001CA8  6E23               	movwf	___wmul@multiplier+1,c
  6842  001CAA  0E00               	movlw	0
  6843  001CAC  6E25               	movwf	___wmul@multiplicand+1,c
  6844  001CAE  0E03               	movlw	3
  6845  001CB0  6E24               	movwf	___wmul@multiplicand,c
  6846  001CB2  EC31  F017         	call	___wmul	;wreg free
  6847  001CB6  0EAA               	movlw	low __npowers_
  6848  001CB8  2422               	addwf	?___wmul,w,c
  6849  001CBA  6EF6               	movwf	tblptrl,c
  6850  001CBC  0EFE               	movlw	high __npowers_
  6851  001CBE  2023               	addwfc	?___wmul+1,w,c
  6852  001CC0  6EF7               	movwf	tblptrh,c
  6853  001CC2                     	if	1	;There are 3 active tblptr bytes
  6854  001CC2  6AF8               	clrf	tblptru,c
  6855  001CC4  0E00               	movlw	low (__mediumconst shr (0+16))
  6856  001CC6  22F8               	addwfc	tblptru,f,c
  6857  001CC8                     	endif
  6858  001CC8  0009               	tblrd		*+
  6859  001CCA  CFF5 F044          	movff	tablat,___ftmul@f1
  6860  001CCE  0009               	tblrd		*+
  6861  001CD0  CFF5 F045          	movff	tablat,___ftmul@f1+1
  6862  001CD4  000A               	tblrd		*-
  6863  001CD6  CFF5 F046          	movff	tablat,___ftmul@f1+2
  6864  001CDA  EC2E  F011         	call	___ftmul	;wreg free
  6865  001CDE  C044  F083         	movff	?___ftmul,_fround$1909
  6866  001CE2  C045  F084         	movff	?___ftmul+1,_fround$1909+1
  6867  001CE6  C046  F085         	movff	?___ftmul+2,_fround$1909+2
  6868                           
  6869                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6870  001CEA  C083  F044         	movff	_fround$1909,___ftmul@f1
  6871  001CEE  C084  F045         	movff	_fround$1909+1,___ftmul@f1+1
  6872  001CF2  C085  F046         	movff	_fround$1909+2,___ftmul@f1+2
  6873  001CF6  0E00               	movlw	0
  6874  001CF8  6E47               	movwf	___ftmul@f2,c
  6875  001CFA  0E00               	movlw	0
  6876  001CFC  6E48               	movwf	___ftmul@f2+1,c
  6877  001CFE  0E3F               	movlw	63
  6878  001D00  6E49               	movwf	___ftmul@f2+2,c
  6879  001D02  EC2E  F011         	call	___ftmul	;wreg free
  6880  001D06  C044  F053         	movff	?___ftmul,?_fround
  6881  001D0A  C045  F054         	movff	?___ftmul+1,?_fround+1
  6882  001D0E  C046  F055         	movff	?___ftmul+2,?_fround+2
  6883  001D12  0012               	return	
  6884  001D14                     l444:
  6885                           
  6886                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6887  001D14  0100               	movlb	0	; () banked
  6888  001D16  5186               	movf	fround@prec& (0+255),w,b
  6889  001D18  0D03               	mullw	3
  6890  001D1A  0EAA               	movlw	low __npowers_
  6891  001D1C  24F3               	addwf	prodl,w,c
  6892  001D1E  6EF6               	movwf	tblptrl,c
  6893  001D20  0EFE               	movlw	high __npowers_
  6894  001D22  20F4               	addwfc	prodh,w,c
  6895  001D24  6EF7               	movwf	tblptrh,c
  6896  001D26                     	if	1	;There are 3 active tblptr bytes
  6897  001D26  6AF8               	clrf	tblptru,c
  6898  001D28  0E00               	movlw	low (__mediumconst shr (0+16))
  6899  001D2A  22F8               	addwfc	tblptru,f,c
  6900  001D2C                     	endif
  6901  001D2C  0009               	tblrd		*+
  6902  001D2E  CFF5 F044          	movff	tablat,___ftmul@f1
  6903  001D32  0009               	tblrd		*+
  6904  001D34  CFF5 F045          	movff	tablat,___ftmul@f1+1
  6905  001D38  000A               	tblrd		*-
  6906  001D3A  CFF5 F046          	movff	tablat,___ftmul@f1+2
  6907  001D3E  0E00               	movlw	0
  6908  001D40  6E47               	movwf	___ftmul@f2,c
  6909  001D42  0E00               	movlw	0
  6910  001D44  6E48               	movwf	___ftmul@f2+1,c
  6911  001D46  0E3F               	movlw	63
  6912  001D48  6E49               	movwf	___ftmul@f2+2,c
  6913  001D4A  EC2E  F011         	call	___ftmul	;wreg free
  6914  001D4E  C044  F053         	movff	?___ftmul,?_fround
  6915  001D52  C045  F054         	movff	?___ftmul+1,?_fround+1
  6916  001D56  C046  F055         	movff	?___ftmul+2,?_fround+2
  6917  001D5A  0012               	return	
  6918  001D5C                     __end_of_fround:
  6919                           	opt stack 0
  6920                           tblptru	equ	0xFF8
  6921                           tblptrh	equ	0xFF7
  6922                           tblptrl	equ	0xFF6
  6923                           tablat	equ	0xFF5
  6924                           prodh	equ	0xFF4
  6925                           prodl	equ	0xFF3
  6926                           postinc0	equ	0xFEE
  6927                           wreg	equ	0xFE8
  6928                           postdec1	equ	0xFE5
  6929                           fsr1l	equ	0xFE1
  6930                           indf2	equ	0xFDF
  6931                           postinc2	equ	0xFDE
  6932                           postdec2	equ	0xFDD
  6933                           fsr2h	equ	0xFDA
  6934                           fsr2l	equ	0xFD9
  6935                           status	equ	0xFD8
  6936                           
  6937 ;; *************** function ___ftmul *****************
  6938 ;; Defined at:
  6939 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;  f1              3   67[COMRAM] float 
  6942 ;;  f2              3   70[COMRAM] float 
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;  f3_as_produc    3   77[COMRAM] unsigned um
  6945 ;;  sign            1   81[COMRAM] unsigned char 
  6946 ;;  cntr            1   80[COMRAM] unsigned char 
  6947 ;;  exp             1   76[COMRAM] unsigned char 
  6948 ;; Return value:  Size  Location     Type
  6949 ;;                  3   67[COMRAM] float 
  6950 ;; Registers used:
  6951 ;;		wreg, status,2, status,0, cstack
  6952 ;; Tracked objects:
  6953 ;;		On entry : 0/0
  6954 ;;		On exit  : 0/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6957 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6958 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6959 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;Total ram usage:       15 bytes
  6962 ;; Hardware stack levels used:    1
  6963 ;; Hardware stack levels required when called:    3
  6964 ;; This function calls:
  6965 ;;		___ftpack
  6966 ;; This function is called by:
  6967 ;;		_main
  6968 ;;		_fround
  6969 ;;		_scale
  6970 ;;		_sprintf
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           	psect	text5
  6975  00225C                     __ptext5:
  6976                           	opt stack 0
  6977  00225C                     ___ftmul:
  6978                           	opt stack 25
  6979                           
  6980                           ;incstack = 0
  6981  00225C  C046  F04A         	movff	___ftmul@f1+2,??___ftmul
  6982  002260  6A4B               	clrf	(??___ftmul+1)& (0+255),c
  6983  002262  6A4C               	clrf	(??___ftmul+2)& (0+255),c
  6984  002264  3445               	rlcf	___ftmul@f1+1,w,c
  6985  002266  364A               	rlcf	??___ftmul& (0+255),f,c
  6986  002268  E301               	bnc	u6261
  6987  00226A  804B               	bsf	(??___ftmul+1)& (0+255),0,c
  6988  00226C                     u6261:
  6989  00226C  504A               	movf	??___ftmul,w,c
  6990  00226E  6E4D               	movwf	___ftmul@exp,c
  6991  002270  504D               	movf	___ftmul@exp,w,c
  6992  002272  A4D8               	btfss	status,2,c
  6993  002274  D007               	goto	l915
  6994  002276  0E00               	movlw	0
  6995  002278  6E44               	movwf	?___ftmul,c
  6996  00227A  0E00               	movlw	0
  6997  00227C  6E45               	movwf	?___ftmul+1,c
  6998  00227E  0E00               	movlw	0
  6999  002280  6E46               	movwf	?___ftmul+2,c
  7000  002282  0012               	return	
  7001  002284                     l915:
  7002  002284  C049  F04A         	movff	___ftmul@f2+2,??___ftmul
  7003  002288  6A4B               	clrf	(??___ftmul+1)& (0+255),c
  7004  00228A  6A4C               	clrf	(??___ftmul+2)& (0+255),c
  7005  00228C  3448               	rlcf	___ftmul@f2+1,w,c
  7006  00228E  364A               	rlcf	??___ftmul& (0+255),f,c
  7007  002290  E301               	bnc	u6281
  7008  002292  804B               	bsf	(??___ftmul+1)& (0+255),0,c
  7009  002294                     u6281:
  7010  002294  504A               	movf	??___ftmul,w,c
  7011  002296  6E52               	movwf	___ftmul@sign,c
  7012  002298  5052               	movf	___ftmul@sign,w,c
  7013  00229A  A4D8               	btfss	status,2,c
  7014  00229C  D007               	goto	l917
  7015  00229E  0E00               	movlw	0
  7016  0022A0  6E44               	movwf	?___ftmul,c
  7017  0022A2  0E00               	movlw	0
  7018  0022A4  6E45               	movwf	?___ftmul+1,c
  7019  0022A6  0E00               	movlw	0
  7020  0022A8  6E46               	movwf	?___ftmul+2,c
  7021  0022AA  0012               	return	
  7022  0022AC                     l917:
  7023  0022AC  5052               	movf	___ftmul@sign,w,c
  7024  0022AE  0F7B               	addlw	123
  7025  0022B0  264D               	addwf	___ftmul@exp,f,c
  7026  0022B2  C046  F052         	movff	___ftmul@f1+2,___ftmul@sign
  7027  0022B6  5049               	movf	___ftmul@f2+2,w,c
  7028  0022B8  1A52               	xorwf	___ftmul@sign,f,c
  7029  0022BA  0E80               	movlw	128
  7030  0022BC  1652               	andwf	___ftmul@sign,f,c
  7031  0022BE  8E45               	bsf	___ftmul@f1+1,7,c
  7032  0022C0  8E48               	bsf	___ftmul@f2+1,7,c
  7033  0022C2  0EFF               	movlw	255
  7034  0022C4  1647               	andwf	___ftmul@f2,f,c
  7035  0022C6  0EFF               	movlw	255
  7036  0022C8  1648               	andwf	___ftmul@f2+1,f,c
  7037  0022CA  0E00               	movlw	0
  7038  0022CC  1649               	andwf	___ftmul@f2+2,f,c
  7039  0022CE  0E00               	movlw	0
  7040  0022D0  6E4E               	movwf	___ftmul@f3_as_product,c
  7041  0022D2  0E00               	movlw	0
  7042  0022D4  6E4F               	movwf	___ftmul@f3_as_product+1,c
  7043  0022D6  0E00               	movlw	0
  7044  0022D8  6E50               	movwf	___ftmul@f3_as_product+2,c
  7045  0022DA  0E07               	movlw	7
  7046  0022DC  6E51               	movwf	___ftmul@cntr,c
  7047  0022DE  A044               	btfss	___ftmul@f1,0,c
  7048  0022E0  D006               	goto	l919
  7049  0022E2  5047               	movf	___ftmul@f2,w,c
  7050  0022E4  264E               	addwf	___ftmul@f3_as_product,f,c
  7051  0022E6  5048               	movf	___ftmul@f2+1,w,c
  7052  0022E8  224F               	addwfc	___ftmul@f3_as_product+1,f,c
  7053  0022EA  5049               	movf	___ftmul@f2+2,w,c
  7054  0022EC  2250               	addwfc	___ftmul@f3_as_product+2,f,c
  7055  0022EE                     l919:
  7056  0022EE  90D8               	bcf	status,0,c
  7057  0022F0  3246               	rrcf	___ftmul@f1+2,f,c
  7058  0022F2  3245               	rrcf	___ftmul@f1+1,f,c
  7059  0022F4  3244               	rrcf	___ftmul@f1,f,c
  7060  0022F6  90D8               	bcf	status,0,c
  7061  0022F8  3647               	rlcf	___ftmul@f2,f,c
  7062  0022FA  3648               	rlcf	___ftmul@f2+1,f,c
  7063  0022FC  3649               	rlcf	___ftmul@f2+2,f,c
  7064  0022FE  2E51               	decfsz	___ftmul@cntr,f,c
  7065  002300  D7EE               	goto	l918
  7066  002302  0E09               	movlw	9
  7067  002304  6E51               	movwf	___ftmul@cntr,c
  7068  002306  A044               	btfss	___ftmul@f1,0,c
  7069  002308  D006               	goto	l922
  7070  00230A  5047               	movf	___ftmul@f2,w,c
  7071  00230C  264E               	addwf	___ftmul@f3_as_product,f,c
  7072  00230E  5048               	movf	___ftmul@f2+1,w,c
  7073  002310  224F               	addwfc	___ftmul@f3_as_product+1,f,c
  7074  002312  5049               	movf	___ftmul@f2+2,w,c
  7075  002314  2250               	addwfc	___ftmul@f3_as_product+2,f,c
  7076  002316                     l922:
  7077  002316  90D8               	bcf	status,0,c
  7078  002318  3246               	rrcf	___ftmul@f1+2,f,c
  7079  00231A  3245               	rrcf	___ftmul@f1+1,f,c
  7080  00231C  3244               	rrcf	___ftmul@f1,f,c
  7081  00231E  90D8               	bcf	status,0,c
  7082  002320  3250               	rrcf	___ftmul@f3_as_product+2,f,c
  7083  002322  324F               	rrcf	___ftmul@f3_as_product+1,f,c
  7084  002324  324E               	rrcf	___ftmul@f3_as_product,f,c
  7085  002326  2E51               	decfsz	___ftmul@cntr,f,c
  7086  002328  D7EE               	goto	l921
  7087  00232A  C04E  F014         	movff	___ftmul@f3_as_product,___ftpack@arg
  7088  00232E  C04F  F015         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7089  002332  C050  F016         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7090  002336  C04D  F017         	movff	___ftmul@exp,___ftpack@exp
  7091  00233A  C052  F018         	movff	___ftmul@sign,___ftpack@sign
  7092  00233E  ECE3  F012         	call	___ftpack	;wreg free
  7093  002342  C014  F044         	movff	?___ftpack,?___ftmul
  7094  002346  C015  F045         	movff	?___ftpack+1,?___ftmul+1
  7095  00234A  C016  F046         	movff	?___ftpack+2,?___ftmul+2
  7096  00234E  0012               	return	
  7097  002350                     __end_of___ftmul:
  7098                           	opt stack 0
  7099                           tblptru	equ	0xFF8
  7100                           tblptrh	equ	0xFF7
  7101                           tblptrl	equ	0xFF6
  7102                           tablat	equ	0xFF5
  7103                           prodh	equ	0xFF4
  7104                           prodl	equ	0xFF3
  7105                           postinc0	equ	0xFEE
  7106                           wreg	equ	0xFE8
  7107                           postdec1	equ	0xFE5
  7108                           fsr1l	equ	0xFE1
  7109                           indf2	equ	0xFDF
  7110                           postinc2	equ	0xFDE
  7111                           postdec2	equ	0xFDD
  7112                           fsr2h	equ	0xFDA
  7113                           fsr2l	equ	0xFD9
  7114                           status	equ	0xFD8
  7115                           
  7116 ;; *************** function ___awmod *****************
  7117 ;; Defined at:
  7118 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;  dividend        2   19[COMRAM] int 
  7121 ;;  divisor         2   21[COMRAM] int 
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;  sign            1   24[COMRAM] unsigned char 
  7124 ;;  counter         1   23[COMRAM] unsigned char 
  7125 ;; Return value:  Size  Location     Type
  7126 ;;                  2   19[COMRAM] int 
  7127 ;; Registers used:
  7128 ;;		wreg, status,2, status,0
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7134 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;Total ram usage:        6 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    2
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		_main
  7145 ;;		_fround
  7146 ;;		_scale
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text6
  7151  0029B8                     __ptext6:
  7152                           	opt stack 0
  7153  0029B8                     ___awmod:
  7154                           	opt stack 26
  7155                           
  7156                           ;incstack = 0
  7157  0029B8  0E00               	movlw	0
  7158  0029BA  6E19               	movwf	___awmod@sign,c
  7159  0029BC  AE15               	btfss	___awmod@dividend+1,7,c
  7160  0029BE  D006               	goto	l768
  7161  0029C0  6C14               	negf	___awmod@dividend,c
  7162  0029C2  1E15               	comf	___awmod@dividend+1,f,c
  7163  0029C4  B0D8               	btfsc	status,0,c
  7164  0029C6  2A15               	incf	___awmod@dividend+1,f,c
  7165  0029C8  0E01               	movlw	1
  7166  0029CA  6E19               	movwf	___awmod@sign,c
  7167  0029CC                     l768:
  7168  0029CC  AE17               	btfss	___awmod@divisor+1,7,c
  7169  0029CE  D004               	goto	l769
  7170  0029D0  6C16               	negf	___awmod@divisor,c
  7171  0029D2  1E17               	comf	___awmod@divisor+1,f,c
  7172  0029D4  B0D8               	btfsc	status,0,c
  7173  0029D6  2A17               	incf	___awmod@divisor+1,f,c
  7174  0029D8                     l769:
  7175  0029D8  5016               	movf	___awmod@divisor,w,c
  7176  0029DA  1017               	iorwf	___awmod@divisor+1,w,c
  7177  0029DC  B4D8               	btfsc	status,2,c
  7178  0029DE  D018               	goto	l776
  7179  0029E0  0E01               	movlw	1
  7180  0029E2  6E18               	movwf	___awmod@counter,c
  7181  0029E4  D004               	goto	l771
  7182  0029E6  90D8               	bcf	status,0,c
  7183  0029E8  3616               	rlcf	___awmod@divisor,f,c
  7184  0029EA  3617               	rlcf	___awmod@divisor+1,f,c
  7185  0029EC  2A18               	incf	___awmod@counter,f,c
  7186  0029EE                     l771:
  7187  0029EE  AE17               	btfss	___awmod@divisor+1,7,c
  7188  0029F0  D7FA               	goto	l772
  7189  0029F2                     u6410:
  7190  0029F2  5016               	movf	___awmod@divisor,w,c
  7191  0029F4  5C14               	subwf	___awmod@dividend,w,c
  7192  0029F6  5017               	movf	___awmod@divisor+1,w,c
  7193  0029F8  5815               	subwfb	___awmod@dividend+1,w,c
  7194  0029FA  A0D8               	btfss	status,0,c
  7195  0029FC  D004               	goto	l775
  7196  0029FE  5016               	movf	___awmod@divisor,w,c
  7197  002A00  5E14               	subwf	___awmod@dividend,f,c
  7198  002A02  5017               	movf	___awmod@divisor+1,w,c
  7199  002A04  5A15               	subwfb	___awmod@dividend+1,f,c
  7200  002A06                     l775:
  7201  002A06  90D8               	bcf	status,0,c
  7202  002A08  3217               	rrcf	___awmod@divisor+1,f,c
  7203  002A0A  3216               	rrcf	___awmod@divisor,f,c
  7204  002A0C  2E18               	decfsz	___awmod@counter,f,c
  7205  002A0E  D7F1               	goto	u6410
  7206  002A10                     l776:
  7207  002A10  5019               	movf	___awmod@sign,w,c
  7208  002A12  B4D8               	btfsc	status,2,c
  7209  002A14  D004               	goto	l777
  7210  002A16  6C14               	negf	___awmod@dividend,c
  7211  002A18  1E15               	comf	___awmod@dividend+1,f,c
  7212  002A1A  B0D8               	btfsc	status,0,c
  7213  002A1C  2A15               	incf	___awmod@dividend+1,f,c
  7214  002A1E                     l777:
  7215  002A1E  C014  F014         	movff	___awmod@dividend,?___awmod
  7216  002A22  C015  F015         	movff	___awmod@dividend+1,?___awmod+1
  7217  002A26  0012               	return	
  7218  002A28                     __end_of___awmod:
  7219                           	opt stack 0
  7220                           tblptru	equ	0xFF8
  7221                           tblptrh	equ	0xFF7
  7222                           tblptrl	equ	0xFF6
  7223                           tablat	equ	0xFF5
  7224                           prodh	equ	0xFF4
  7225                           prodl	equ	0xFF3
  7226                           postinc0	equ	0xFEE
  7227                           wreg	equ	0xFE8
  7228                           postdec1	equ	0xFE5
  7229                           fsr1l	equ	0xFE1
  7230                           indf2	equ	0xFDF
  7231                           postinc2	equ	0xFDE
  7232                           postdec2	equ	0xFDD
  7233                           fsr2h	equ	0xFDA
  7234                           fsr2l	equ	0xFD9
  7235                           status	equ	0xFD8
  7236                           
  7237 ;; *************** function ___awdiv *****************
  7238 ;; Defined at:
  7239 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;  dividend        2   25[COMRAM] int 
  7242 ;;  divisor         2   27[COMRAM] int 
  7243 ;; Auto vars:     Size  Location     Type
  7244 ;;  quotient        2   31[COMRAM] int 
  7245 ;;  sign            1   30[COMRAM] unsigned char 
  7246 ;;  counter         1   29[COMRAM] unsigned char 
  7247 ;; Return value:  Size  Location     Type
  7248 ;;                  2   25[COMRAM] int 
  7249 ;; Registers used:
  7250 ;;		wreg, status,2, status,0
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7256 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7259 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7260 ;;Total ram usage:        8 bytes
  7261 ;; Hardware stack levels used:    1
  7262 ;; Hardware stack levels required when called:    2
  7263 ;; This function calls:
  7264 ;;		Nothing
  7265 ;; This function is called by:
  7266 ;;		_main
  7267 ;;		_fround
  7268 ;;		_scale
  7269 ;;		_sprintf
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272                           
  7273                           	psect	text7
  7274  0027B0                     __ptext7:
  7275                           	opt stack 0
  7276  0027B0                     ___awdiv:
  7277                           	opt stack 26
  7278                           
  7279                           ;incstack = 0
  7280  0027B0  0E00               	movlw	0
  7281  0027B2  6E1F               	movwf	___awdiv@sign,c
  7282  0027B4  AE1D               	btfss	___awdiv@divisor+1,7,c
  7283  0027B6  D006               	goto	l755
  7284  0027B8  6C1C               	negf	___awdiv@divisor,c
  7285  0027BA  1E1D               	comf	___awdiv@divisor+1,f,c
  7286  0027BC  B0D8               	btfsc	status,0,c
  7287  0027BE  2A1D               	incf	___awdiv@divisor+1,f,c
  7288  0027C0  0E01               	movlw	1
  7289  0027C2  6E1F               	movwf	___awdiv@sign,c
  7290  0027C4                     l755:
  7291  0027C4  AE1B               	btfss	___awdiv@dividend+1,7,c
  7292  0027C6  D006               	goto	l756
  7293  0027C8  6C1A               	negf	___awdiv@dividend,c
  7294  0027CA  1E1B               	comf	___awdiv@dividend+1,f,c
  7295  0027CC  B0D8               	btfsc	status,0,c
  7296  0027CE  2A1B               	incf	___awdiv@dividend+1,f,c
  7297  0027D0  0E01               	movlw	1
  7298  0027D2  1A1F               	xorwf	___awdiv@sign,f,c
  7299  0027D4                     l756:
  7300  0027D4  0E00               	movlw	0
  7301  0027D6  6E21               	movwf	___awdiv@quotient+1,c
  7302  0027D8  0E00               	movlw	0
  7303  0027DA  6E20               	movwf	___awdiv@quotient,c
  7304  0027DC  501C               	movf	___awdiv@divisor,w,c
  7305  0027DE  101D               	iorwf	___awdiv@divisor+1,w,c
  7306  0027E0  B4D8               	btfsc	status,2,c
  7307  0027E2  D01C               	goto	l763
  7308  0027E4  0E01               	movlw	1
  7309  0027E6  6E1E               	movwf	___awdiv@counter,c
  7310  0027E8  D004               	goto	l758
  7311  0027EA  90D8               	bcf	status,0,c
  7312  0027EC  361C               	rlcf	___awdiv@divisor,f,c
  7313  0027EE  361D               	rlcf	___awdiv@divisor+1,f,c
  7314  0027F0  2A1E               	incf	___awdiv@counter,f,c
  7315  0027F2                     l758:
  7316  0027F2  AE1D               	btfss	___awdiv@divisor+1,7,c
  7317  0027F4  D7FA               	goto	l759
  7318  0027F6                     u6350:
  7319  0027F6  90D8               	bcf	status,0,c
  7320  0027F8  3620               	rlcf	___awdiv@quotient,f,c
  7321  0027FA  3621               	rlcf	___awdiv@quotient+1,f,c
  7322  0027FC  501C               	movf	___awdiv@divisor,w,c
  7323  0027FE  5C1A               	subwf	___awdiv@dividend,w,c
  7324  002800  501D               	movf	___awdiv@divisor+1,w,c
  7325  002802  581B               	subwfb	___awdiv@dividend+1,w,c
  7326  002804  A0D8               	btfss	status,0,c
  7327  002806  D005               	goto	l762
  7328  002808  501C               	movf	___awdiv@divisor,w,c
  7329  00280A  5E1A               	subwf	___awdiv@dividend,f,c
  7330  00280C  501D               	movf	___awdiv@divisor+1,w,c
  7331  00280E  5A1B               	subwfb	___awdiv@dividend+1,f,c
  7332  002810  8020               	bsf	___awdiv@quotient,0,c
  7333  002812                     l762:
  7334  002812  90D8               	bcf	status,0,c
  7335  002814  321D               	rrcf	___awdiv@divisor+1,f,c
  7336  002816  321C               	rrcf	___awdiv@divisor,f,c
  7337  002818  2E1E               	decfsz	___awdiv@counter,f,c
  7338  00281A  D7ED               	goto	u6350
  7339  00281C                     l763:
  7340  00281C  501F               	movf	___awdiv@sign,w,c
  7341  00281E  B4D8               	btfsc	status,2,c
  7342  002820  D004               	goto	l764
  7343  002822  6C20               	negf	___awdiv@quotient,c
  7344  002824  1E21               	comf	___awdiv@quotient+1,f,c
  7345  002826  B0D8               	btfsc	status,0,c
  7346  002828  2A21               	incf	___awdiv@quotient+1,f,c
  7347  00282A                     l764:
  7348  00282A  C020  F01A         	movff	___awdiv@quotient,?___awdiv
  7349  00282E  C021  F01B         	movff	___awdiv@quotient+1,?___awdiv+1
  7350  002832  0012               	return	
  7351  002834                     __end_of___awdiv:
  7352                           	opt stack 0
  7353                           tblptru	equ	0xFF8
  7354                           tblptrh	equ	0xFF7
  7355                           tblptrl	equ	0xFF6
  7356                           tablat	equ	0xFF5
  7357                           prodh	equ	0xFF4
  7358                           prodl	equ	0xFF3
  7359                           postinc0	equ	0xFEE
  7360                           wreg	equ	0xFE8
  7361                           postdec1	equ	0xFE5
  7362                           fsr1l	equ	0xFE1
  7363                           indf2	equ	0xFDF
  7364                           postinc2	equ	0xFDE
  7365                           postdec2	equ	0xFDD
  7366                           fsr2h	equ	0xFDA
  7367                           fsr2l	equ	0xFD9
  7368                           status	equ	0xFD8
  7369                           
  7370 ;; *************** function __tdiv_to_l_ *****************
  7371 ;; Defined at:
  7372 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;  f1              3   19[COMRAM] float 
  7375 ;;  f2              3   22[COMRAM] float 
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;  quot            4   28[COMRAM] unsigned long 
  7378 ;;  exp1            1   33[COMRAM] unsigned char 
  7379 ;;  cntr            1   32[COMRAM] unsigned char 
  7380 ;; Return value:  Size  Location     Type
  7381 ;;                  4   19[COMRAM] unsigned long 
  7382 ;; Registers used:
  7383 ;;		wreg, status,2, status,0
  7384 ;; Tracked objects:
  7385 ;;		On entry : 0/0
  7386 ;;		On exit  : 0/0
  7387 ;;		Unchanged: 0/0
  7388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7389 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7390 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7391 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7392 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;Total ram usage:       15 bytes
  7394 ;; Hardware stack levels used:    1
  7395 ;; Hardware stack levels required when called:    2
  7396 ;; This function calls:
  7397 ;;		Nothing
  7398 ;; This function is called by:
  7399 ;;		_sprintf
  7400 ;; This function uses a non-reentrant model
  7401 ;;
  7402                           
  7403                           	psect	text8
  7404  001F0A                     __ptext8:
  7405                           	opt stack 0
  7406  001F0A                     __tdiv_to_l_:
  7407                           	opt stack 27
  7408                           
  7409                           ;incstack = 0
  7410  001F0A  C016  F01A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7411  001F0E  6A1B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7412  001F10  6A1C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7413  001F12  3415               	rlcf	__tdiv_to_l_@f1+1,w,c
  7414  001F14  361A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7415  001F16  E301               	bnc	u3621
  7416  001F18  801B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7417  001F1A                     u3621:
  7418  001F1A  501A               	movf	??__tdiv_to_l_,w,c
  7419  001F1C  6E22               	movwf	__tdiv_to_l_@exp1,c
  7420  001F1E  5022               	movf	__tdiv_to_l_@exp1,w,c
  7421  001F20  A4D8               	btfss	status,2,c
  7422  001F22  D009               	goto	l891
  7423  001F24  0E00               	movlw	0
  7424  001F26  6E14               	movwf	?__tdiv_to_l_,c
  7425  001F28  0E00               	movlw	0
  7426  001F2A  6E15               	movwf	?__tdiv_to_l_+1,c
  7427  001F2C  0E00               	movlw	0
  7428  001F2E  6E16               	movwf	?__tdiv_to_l_+2,c
  7429  001F30  0E00               	movlw	0
  7430  001F32  6E17               	movwf	?__tdiv_to_l_+3,c
  7431  001F34  0012               	return	
  7432  001F36                     l891:
  7433  001F36  C019  F01A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7434  001F3A  6A1B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7435  001F3C  6A1C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7436  001F3E  3418               	rlcf	__tdiv_to_l_@f2+1,w,c
  7437  001F40  361A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7438  001F42  E301               	bnc	u3641
  7439  001F44  801B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7440  001F46                     u3641:
  7441  001F46  501A               	movf	??__tdiv_to_l_,w,c
  7442  001F48  6E21               	movwf	__tdiv_to_l_@cntr,c
  7443  001F4A  5021               	movf	__tdiv_to_l_@cntr,w,c
  7444  001F4C  A4D8               	btfss	status,2,c
  7445  001F4E  D009               	goto	l893
  7446  001F50  0E00               	movlw	0
  7447  001F52  6E14               	movwf	?__tdiv_to_l_,c
  7448  001F54  0E00               	movlw	0
  7449  001F56  6E15               	movwf	?__tdiv_to_l_+1,c
  7450  001F58  0E00               	movlw	0
  7451  001F5A  6E16               	movwf	?__tdiv_to_l_+2,c
  7452  001F5C  0E00               	movlw	0
  7453  001F5E  6E17               	movwf	?__tdiv_to_l_+3,c
  7454  001F60  0012               	return	
  7455  001F62                     l893:
  7456  001F62  8E15               	bsf	__tdiv_to_l_@f1+1,7,c
  7457  001F64  0EFF               	movlw	255
  7458  001F66  1614               	andwf	__tdiv_to_l_@f1,f,c
  7459  001F68  0EFF               	movlw	255
  7460  001F6A  1615               	andwf	__tdiv_to_l_@f1+1,f,c
  7461  001F6C  0E00               	movlw	0
  7462  001F6E  1616               	andwf	__tdiv_to_l_@f1+2,f,c
  7463  001F70  8E18               	bsf	__tdiv_to_l_@f2+1,7,c
  7464  001F72  0EFF               	movlw	255
  7465  001F74  1617               	andwf	__tdiv_to_l_@f2,f,c
  7466  001F76  0EFF               	movlw	255
  7467  001F78  1618               	andwf	__tdiv_to_l_@f2+1,f,c
  7468  001F7A  0E00               	movlw	0
  7469  001F7C  1619               	andwf	__tdiv_to_l_@f2+2,f,c
  7470  001F7E  0E00               	movlw	0
  7471  001F80  6E1D               	movwf	__tdiv_to_l_@quot,c
  7472  001F82  0E00               	movlw	0
  7473  001F84  6E1E               	movwf	__tdiv_to_l_@quot+1,c
  7474  001F86  0E00               	movlw	0
  7475  001F88  6E1F               	movwf	__tdiv_to_l_@quot+2,c
  7476  001F8A  0E00               	movlw	0
  7477  001F8C  6E20               	movwf	__tdiv_to_l_@quot+3,c
  7478  001F8E  0E7F               	movlw	127
  7479  001F90  5E22               	subwf	__tdiv_to_l_@exp1,f,c
  7480  001F92  5021               	movf	__tdiv_to_l_@cntr,w,c
  7481  001F94  0F98               	addlw	152
  7482  001F96  5E22               	subwf	__tdiv_to_l_@exp1,f,c
  7483  001F98  0E18               	movlw	24
  7484  001F9A  6E21               	movwf	__tdiv_to_l_@cntr,c
  7485  001F9C                     l894:
  7486  001F9C  90D8               	bcf	status,0,c
  7487  001F9E  361D               	rlcf	__tdiv_to_l_@quot,f,c
  7488  001FA0  361E               	rlcf	__tdiv_to_l_@quot+1,f,c
  7489  001FA2  361F               	rlcf	__tdiv_to_l_@quot+2,f,c
  7490  001FA4  3620               	rlcf	__tdiv_to_l_@quot+3,f,c
  7491  001FA6  5017               	movf	__tdiv_to_l_@f2,w,c
  7492  001FA8  5C14               	subwf	__tdiv_to_l_@f1,w,c
  7493  001FAA  5018               	movf	__tdiv_to_l_@f2+1,w,c
  7494  001FAC  5815               	subwfb	__tdiv_to_l_@f1+1,w,c
  7495  001FAE  5019               	movf	__tdiv_to_l_@f2+2,w,c
  7496  001FB0  5816               	subwfb	__tdiv_to_l_@f1+2,w,c
  7497  001FB2  A0D8               	btfss	status,0,c
  7498  001FB4  D007               	goto	l895
  7499  001FB6  5017               	movf	__tdiv_to_l_@f2,w,c
  7500  001FB8  5E14               	subwf	__tdiv_to_l_@f1,f,c
  7501  001FBA  5018               	movf	__tdiv_to_l_@f2+1,w,c
  7502  001FBC  5A15               	subwfb	__tdiv_to_l_@f1+1,f,c
  7503  001FBE  5019               	movf	__tdiv_to_l_@f2+2,w,c
  7504  001FC0  5A16               	subwfb	__tdiv_to_l_@f1+2,f,c
  7505  001FC2  801D               	bsf	__tdiv_to_l_@quot,0,c
  7506  001FC4                     l895:
  7507  001FC4  90D8               	bcf	status,0,c
  7508  001FC6  3614               	rlcf	__tdiv_to_l_@f1,f,c
  7509  001FC8  3615               	rlcf	__tdiv_to_l_@f1+1,f,c
  7510  001FCA  3616               	rlcf	__tdiv_to_l_@f1+2,f,c
  7511  001FCC  2E21               	decfsz	__tdiv_to_l_@cntr,f,c
  7512  001FCE  D7E6               	goto	l894
  7513  001FD0  AE22               	btfss	__tdiv_to_l_@exp1,7,c
  7514  001FD2  D016               	goto	l897
  7515  001FD4  5022               	movf	__tdiv_to_l_@exp1,w,c
  7516  001FD6  0A80               	xorlw	128
  7517  001FD8  0F97               	addlw	151
  7518  001FDA  B0D8               	btfsc	status,0,c
  7519  001FDC  D009               	goto	l898
  7520  001FDE  0E00               	movlw	0
  7521  001FE0  6E14               	movwf	?__tdiv_to_l_,c
  7522  001FE2  0E00               	movlw	0
  7523  001FE4  6E15               	movwf	?__tdiv_to_l_+1,c
  7524  001FE6  0E00               	movlw	0
  7525  001FE8  6E16               	movwf	?__tdiv_to_l_+2,c
  7526  001FEA  0E00               	movlw	0
  7527  001FEC  6E17               	movwf	?__tdiv_to_l_+3,c
  7528  001FEE  0012               	return	
  7529  001FF0                     l898:
  7530  001FF0  90D8               	bcf	status,0,c
  7531  001FF2  3220               	rrcf	__tdiv_to_l_@quot+3,f,c
  7532  001FF4  321F               	rrcf	__tdiv_to_l_@quot+2,f,c
  7533  001FF6  321E               	rrcf	__tdiv_to_l_@quot+1,f,c
  7534  001FF8  321D               	rrcf	__tdiv_to_l_@quot,f,c
  7535  001FFA  3E22               	incfsz	__tdiv_to_l_@exp1,f,c
  7536  001FFC  D7F9               	goto	l898
  7537  001FFE  D015               	goto	u3700
  7538  002000                     l897:
  7539  002000  0E17               	movlw	23
  7540  002002  6422               	cpfsgt	__tdiv_to_l_@exp1,c
  7541  002004  D00F               	goto	l903
  7542  002006  0E00               	movlw	0
  7543  002008  6E14               	movwf	?__tdiv_to_l_,c
  7544  00200A  0E00               	movlw	0
  7545  00200C  6E15               	movwf	?__tdiv_to_l_+1,c
  7546  00200E  0E00               	movlw	0
  7547  002010  6E16               	movwf	?__tdiv_to_l_+2,c
  7548  002012  0E00               	movlw	0
  7549  002014  6E17               	movwf	?__tdiv_to_l_+3,c
  7550  002016  0012               	return	
  7551  002018  90D8               	bcf	status,0,c
  7552  00201A  361D               	rlcf	__tdiv_to_l_@quot,f,c
  7553  00201C  361E               	rlcf	__tdiv_to_l_@quot+1,f,c
  7554  00201E  361F               	rlcf	__tdiv_to_l_@quot+2,f,c
  7555  002020  3620               	rlcf	__tdiv_to_l_@quot+3,f,c
  7556  002022  0622               	decf	__tdiv_to_l_@exp1,f,c
  7557  002024                     l903:
  7558  002024  5022               	movf	__tdiv_to_l_@exp1,w,c
  7559  002026  A4D8               	btfss	status,2,c
  7560  002028  D7F7               	goto	l904
  7561  00202A                     u3700:
  7562  00202A  C01D  F014         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7563  00202E  C01E  F015         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7564  002032  C01F  F016         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7565  002036  C020  F017         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7566  00203A  0012               	return		;funcret
  7567  00203C                     __end_of__tdiv_to_l_:
  7568                           	opt stack 0
  7569                           tblptru	equ	0xFF8
  7570                           tblptrh	equ	0xFF7
  7571                           tblptrl	equ	0xFF6
  7572                           tablat	equ	0xFF5
  7573                           prodh	equ	0xFF4
  7574                           prodl	equ	0xFF3
  7575                           postinc0	equ	0xFEE
  7576                           wreg	equ	0xFE8
  7577                           postdec1	equ	0xFE5
  7578                           fsr1l	equ	0xFE1
  7579                           indf2	equ	0xFDF
  7580                           postinc2	equ	0xFDE
  7581                           postdec2	equ	0xFDD
  7582                           fsr2h	equ	0xFDA
  7583                           fsr2l	equ	0xFD9
  7584                           status	equ	0xFD8
  7585                           
  7586 ;; *************** function __div_to_l_ *****************
  7587 ;; Defined at:
  7588 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;  f1              3   19[COMRAM] unsigned long 
  7591 ;;  f2              3   22[COMRAM] unsigned long 
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;  quot            4   25[COMRAM] unsigned long 
  7594 ;;  exp1            1   30[COMRAM] unsigned char 
  7595 ;;  cntr            1   29[COMRAM] unsigned char 
  7596 ;; Return value:  Size  Location     Type
  7597 ;;                  4   19[COMRAM] unsigned long 
  7598 ;; Registers used:
  7599 ;;		wreg, status,2, status,0
  7600 ;; Tracked objects:
  7601 ;;		On entry : 0/0
  7602 ;;		On exit  : 0/0
  7603 ;;		Unchanged: 0/0
  7604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7605 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7606 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7609 ;;Total ram usage:       12 bytes
  7610 ;; Hardware stack levels used:    1
  7611 ;; Hardware stack levels required when called:    2
  7612 ;; This function calls:
  7613 ;;		Nothing
  7614 ;; This function is called by:
  7615 ;;		_sprintf
  7616 ;; This function uses a non-reentrant model
  7617 ;;
  7618                           
  7619                           	psect	text9
  7620  00203C                     __ptext9:
  7621                           	opt stack 0
  7622  00203C                     __div_to_l_:
  7623                           	opt stack 27
  7624                           
  7625                           ;incstack = 0
  7626  00203C  3416               	rlcf	__div_to_l_@f1+2,w,c
  7627  00203E  3417               	rlcf	__div_to_l_@f1+3,w,c
  7628  002040  6E1F               	movwf	__div_to_l_@exp1,c
  7629  002042  501F               	movf	__div_to_l_@exp1,w,c
  7630  002044  A4D8               	btfss	status,2,c
  7631  002046  D009               	goto	l787
  7632  002048  0E00               	movlw	0
  7633  00204A  6E14               	movwf	?__div_to_l_,c
  7634  00204C  0E00               	movlw	0
  7635  00204E  6E15               	movwf	?__div_to_l_+1,c
  7636  002050  0E00               	movlw	0
  7637  002052  6E16               	movwf	?__div_to_l_+2,c
  7638  002054  0E00               	movlw	0
  7639  002056  6E17               	movwf	?__div_to_l_+3,c
  7640  002058  0012               	return	
  7641  00205A                     l787:
  7642  00205A  3419               	rlcf	__div_to_l_@f2+2,w,c
  7643  00205C  341A               	rlcf	__div_to_l_@f2+3,w,c
  7644  00205E  6E1E               	movwf	__div_to_l_@cntr,c
  7645  002060  501E               	movf	__div_to_l_@cntr,w,c
  7646  002062  A4D8               	btfss	status,2,c
  7647  002064  D009               	goto	l789
  7648  002066  0E00               	movlw	0
  7649  002068  6E14               	movwf	?__div_to_l_,c
  7650  00206A  0E00               	movlw	0
  7651  00206C  6E15               	movwf	?__div_to_l_+1,c
  7652  00206E  0E00               	movlw	0
  7653  002070  6E16               	movwf	?__div_to_l_+2,c
  7654  002072  0E00               	movlw	0
  7655  002074  6E17               	movwf	?__div_to_l_+3,c
  7656  002076  0012               	return	
  7657  002078                     l789:
  7658  002078  8E16               	bsf	__div_to_l_@f1+2,7,c
  7659  00207A  0EFF               	movlw	255
  7660  00207C  1614               	andwf	__div_to_l_@f1,f,c
  7661  00207E  0EFF               	movlw	255
  7662  002080  1615               	andwf	__div_to_l_@f1+1,f,c
  7663  002082  0EFF               	movlw	255
  7664  002084  1616               	andwf	__div_to_l_@f1+2,f,c
  7665  002086  0E00               	movlw	0
  7666  002088  1617               	andwf	__div_to_l_@f1+3,f,c
  7667  00208A  8E19               	bsf	__div_to_l_@f2+2,7,c
  7668  00208C  0EFF               	movlw	255
  7669  00208E  1617               	andwf	__div_to_l_@f2,f,c
  7670  002090  0EFF               	movlw	255
  7671  002092  1618               	andwf	__div_to_l_@f2+1,f,c
  7672  002094  0EFF               	movlw	255
  7673  002096  1619               	andwf	__div_to_l_@f2+2,f,c
  7674  002098  0E00               	movlw	0
  7675  00209A  161A               	andwf	__div_to_l_@f2+3,f,c
  7676  00209C  0E00               	movlw	0
  7677  00209E  6E1A               	movwf	__div_to_l_@quot,c
  7678  0020A0  0E00               	movlw	0
  7679  0020A2  6E1B               	movwf	__div_to_l_@quot+1,c
  7680  0020A4  0E00               	movlw	0
  7681  0020A6  6E1C               	movwf	__div_to_l_@quot+2,c
  7682  0020A8  0E00               	movlw	0
  7683  0020AA  6E1D               	movwf	__div_to_l_@quot+3,c
  7684  0020AC  0E7F               	movlw	127
  7685  0020AE  5E1F               	subwf	__div_to_l_@exp1,f,c
  7686  0020B0  501E               	movf	__div_to_l_@cntr,w,c
  7687  0020B2  0FA0               	addlw	160
  7688  0020B4  5E1F               	subwf	__div_to_l_@exp1,f,c
  7689  0020B6  0E20               	movlw	32
  7690  0020B8  6E1E               	movwf	__div_to_l_@cntr,c
  7691  0020BA  90D8               	bcf	status,0,c
  7692  0020BC  361A               	rlcf	__div_to_l_@quot,f,c
  7693  0020BE  361B               	rlcf	__div_to_l_@quot+1,f,c
  7694  0020C0  361C               	rlcf	__div_to_l_@quot+2,f,c
  7695  0020C2  361D               	rlcf	__div_to_l_@quot+3,f,c
  7696  0020C4  5017               	movf	__div_to_l_@f2,w,c
  7697  0020C6  5C14               	subwf	__div_to_l_@f1,w,c
  7698  0020C8  5018               	movf	__div_to_l_@f2+1,w,c
  7699  0020CA  5815               	subwfb	__div_to_l_@f1+1,w,c
  7700  0020CC  5019               	movf	__div_to_l_@f2+2,w,c
  7701  0020CE  5816               	subwfb	__div_to_l_@f1+2,w,c
  7702  0020D0  501A               	movf	__div_to_l_@f2+3,w,c
  7703  0020D2  5817               	subwfb	__div_to_l_@f1+3,w,c
  7704  0020D4  A0D8               	btfss	status,0,c
  7705  0020D6  D009               	goto	l791
  7706  0020D8  5017               	movf	__div_to_l_@f2,w,c
  7707  0020DA  5E14               	subwf	__div_to_l_@f1,f,c
  7708  0020DC  5018               	movf	__div_to_l_@f2+1,w,c
  7709  0020DE  5A15               	subwfb	__div_to_l_@f1+1,f,c
  7710  0020E0  5019               	movf	__div_to_l_@f2+2,w,c
  7711  0020E2  5A16               	subwfb	__div_to_l_@f1+2,f,c
  7712  0020E4  501A               	movf	__div_to_l_@f2+3,w,c
  7713  0020E6  5A17               	subwfb	__div_to_l_@f1+3,f,c
  7714  0020E8  801A               	bsf	__div_to_l_@quot,0,c
  7715  0020EA                     l791:
  7716  0020EA  90D8               	bcf	status,0,c
  7717  0020EC  3614               	rlcf	__div_to_l_@f1,f,c
  7718  0020EE  3615               	rlcf	__div_to_l_@f1+1,f,c
  7719  0020F0  3616               	rlcf	__div_to_l_@f1+2,f,c
  7720  0020F2  3617               	rlcf	__div_to_l_@f1+3,f,c
  7721  0020F4  2E1E               	decfsz	__div_to_l_@cntr,f,c
  7722  0020F6  D7E1               	goto	l790
  7723  0020F8  AE1F               	btfss	__div_to_l_@exp1,7,c
  7724  0020FA  D016               	goto	l793
  7725  0020FC  501F               	movf	__div_to_l_@exp1,w,c
  7726  0020FE  0A80               	xorlw	128
  7727  002100  0F9F               	addlw	159
  7728  002102  B0D8               	btfsc	status,0,c
  7729  002104  D009               	goto	l794
  7730  002106  0E00               	movlw	0
  7731  002108  6E14               	movwf	?__div_to_l_,c
  7732  00210A  0E00               	movlw	0
  7733  00210C  6E15               	movwf	?__div_to_l_+1,c
  7734  00210E  0E00               	movlw	0
  7735  002110  6E16               	movwf	?__div_to_l_+2,c
  7736  002112  0E00               	movlw	0
  7737  002114  6E17               	movwf	?__div_to_l_+3,c
  7738  002116  0012               	return	
  7739  002118                     l794:
  7740  002118  90D8               	bcf	status,0,c
  7741  00211A  321D               	rrcf	__div_to_l_@quot+3,f,c
  7742  00211C  321C               	rrcf	__div_to_l_@quot+2,f,c
  7743  00211E  321B               	rrcf	__div_to_l_@quot+1,f,c
  7744  002120  321A               	rrcf	__div_to_l_@quot,f,c
  7745  002122  3E1F               	incfsz	__div_to_l_@exp1,f,c
  7746  002124  D7F9               	goto	l794
  7747  002126  D015               	goto	u3770
  7748  002128                     l793:
  7749  002128  0E1F               	movlw	31
  7750  00212A  641F               	cpfsgt	__div_to_l_@exp1,c
  7751  00212C  D00F               	goto	l799
  7752  00212E  0E00               	movlw	0
  7753  002130  6E14               	movwf	?__div_to_l_,c
  7754  002132  0E00               	movlw	0
  7755  002134  6E15               	movwf	?__div_to_l_+1,c
  7756  002136  0E00               	movlw	0
  7757  002138  6E16               	movwf	?__div_to_l_+2,c
  7758  00213A  0E00               	movlw	0
  7759  00213C  6E17               	movwf	?__div_to_l_+3,c
  7760  00213E  0012               	return	
  7761  002140  90D8               	bcf	status,0,c
  7762  002142  361A               	rlcf	__div_to_l_@quot,f,c
  7763  002144  361B               	rlcf	__div_to_l_@quot+1,f,c
  7764  002146  361C               	rlcf	__div_to_l_@quot+2,f,c
  7765  002148  361D               	rlcf	__div_to_l_@quot+3,f,c
  7766  00214A  061F               	decf	__div_to_l_@exp1,f,c
  7767  00214C                     l799:
  7768  00214C  501F               	movf	__div_to_l_@exp1,w,c
  7769  00214E  A4D8               	btfss	status,2,c
  7770  002150  D7F7               	goto	l800
  7771  002152                     u3770:
  7772  002152  C01A  F014         	movff	__div_to_l_@quot,?__div_to_l_
  7773  002156  C01B  F015         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7774  00215A  C01C  F016         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7775  00215E  C01D  F017         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7776  002162  0012               	return		;funcret
  7777  002164                     __end_of__div_to_l_:
  7778                           	opt stack 0
  7779                           tblptru	equ	0xFF8
  7780                           tblptrh	equ	0xFF7
  7781                           tblptrl	equ	0xFF6
  7782                           tablat	equ	0xFF5
  7783                           prodh	equ	0xFF4
  7784                           prodl	equ	0xFF3
  7785                           postinc0	equ	0xFEE
  7786                           wreg	equ	0xFE8
  7787                           postdec1	equ	0xFE5
  7788                           fsr1l	equ	0xFE1
  7789                           indf2	equ	0xFDF
  7790                           postinc2	equ	0xFDE
  7791                           postdec2	equ	0xFDD
  7792                           fsr2h	equ	0xFDA
  7793                           fsr2l	equ	0xFD9
  7794                           status	equ	0xFD8
  7795                           
  7796 ;; *************** function ___lltoft *****************
  7797 ;; Defined at:
  7798 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  7799 ;; Parameters:    Size  Location     Type
  7800 ;;  c               4   27[COMRAM] unsigned long 
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;  exp             1   35[COMRAM] unsigned char 
  7803 ;; Return value:  Size  Location     Type
  7804 ;;                  3   27[COMRAM] float 
  7805 ;; Registers used:
  7806 ;;		wreg, status,2, status,0, cstack
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7812 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7814 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7815 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7816 ;;Total ram usage:        9 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    3
  7819 ;; This function calls:
  7820 ;;		___ftpack
  7821 ;; This function is called by:
  7822 ;;		_sprintf
  7823 ;; This function uses a non-reentrant model
  7824 ;;
  7825                           
  7826                           	psect	text10
  7827  002B56                     __ptext10:
  7828                           	opt stack 0
  7829  002B56                     ___lltoft:
  7830                           	opt stack 26
  7831                           
  7832                           ;incstack = 0
  7833  002B56  0E8E               	movlw	142
  7834  002B58  6E24               	movwf	___lltoft@exp,c
  7835  002B5A  D006               	goto	l998
  7836  002B5C  90D8               	bcf	status,0,c
  7837  002B5E  321F               	rrcf	___lltoft@c+3,f,c
  7838  002B60  321E               	rrcf	___lltoft@c+2,f,c
  7839  002B62  321D               	rrcf	___lltoft@c+1,f,c
  7840  002B64  321C               	rrcf	___lltoft@c,f,c
  7841  002B66  2A24               	incf	___lltoft@exp,f,c
  7842  002B68                     l998:
  7843  002B68  0E00               	movlw	0
  7844  002B6A  141C               	andwf	___lltoft@c,w,c
  7845  002B6C  6E20               	movwf	??___lltoft& (0+255),c
  7846  002B6E  0E00               	movlw	0
  7847  002B70  141D               	andwf	___lltoft@c+1,w,c
  7848  002B72  6E21               	movwf	(??___lltoft+1)& (0+255),c
  7849  002B74  0E00               	movlw	0
  7850  002B76  141E               	andwf	___lltoft@c+2,w,c
  7851  002B78  6E22               	movwf	(??___lltoft+2)& (0+255),c
  7852  002B7A  0EFF               	movlw	255
  7853  002B7C  141F               	andwf	___lltoft@c+3,w,c
  7854  002B7E  6E23               	movwf	(??___lltoft+3)& (0+255),c
  7855  002B80  5020               	movf	??___lltoft,w,c
  7856  002B82  1021               	iorwf	??___lltoft+1,w,c
  7857  002B84  1022               	iorwf	??___lltoft+2,w,c
  7858  002B86  1023               	iorwf	??___lltoft+3,w,c
  7859  002B88  A4D8               	btfss	status,2,c
  7860  002B8A  D7E8               	goto	l999
  7861  002B8C  C01C  F014         	movff	___lltoft@c,___ftpack@arg
  7862  002B90  C01D  F015         	movff	___lltoft@c+1,___ftpack@arg+1
  7863  002B94  C01E  F016         	movff	___lltoft@c+2,___ftpack@arg+2
  7864  002B98  C024  F017         	movff	___lltoft@exp,___ftpack@exp
  7865  002B9C  0E00               	movlw	0
  7866  002B9E  6E18               	movwf	___ftpack@sign,c
  7867  002BA0  ECE3  F012         	call	___ftpack	;wreg free
  7868  002BA4  C014  F01C         	movff	?___ftpack,?___lltoft
  7869  002BA8  C015  F01D         	movff	?___ftpack+1,?___lltoft+1
  7870  002BAC  C016  F01E         	movff	?___ftpack+2,?___lltoft+2
  7871  002BB0  0012               	return	
  7872  002BB2                     __end_of___lltoft:
  7873                           	opt stack 0
  7874                           tblptru	equ	0xFF8
  7875                           tblptrh	equ	0xFF7
  7876                           tblptrl	equ	0xFF6
  7877                           tablat	equ	0xFF5
  7878                           prodh	equ	0xFF4
  7879                           prodl	equ	0xFF3
  7880                           postinc0	equ	0xFEE
  7881                           wreg	equ	0xFE8
  7882                           postdec1	equ	0xFE5
  7883                           fsr1l	equ	0xFE1
  7884                           indf2	equ	0xFDF
  7885                           postinc2	equ	0xFDE
  7886                           postdec2	equ	0xFDD
  7887                           fsr2h	equ	0xFDA
  7888                           fsr2l	equ	0xFD9
  7889                           status	equ	0xFD8
  7890                           
  7891 ;; *************** function ___llmod *****************
  7892 ;; Defined at:
  7893 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;  dividend        4   32[COMRAM] unsigned long 
  7896 ;;  divisor         4   36[COMRAM] unsigned long 
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;  counter         1   40[COMRAM] unsigned char 
  7899 ;; Return value:  Size  Location     Type
  7900 ;;                  4   32[COMRAM] unsigned long 
  7901 ;; Registers used:
  7902 ;;		wreg, status,2, status,0
  7903 ;; Tracked objects:
  7904 ;;		On entry : 0/0
  7905 ;;		On exit  : 0/0
  7906 ;;		Unchanged: 0/0
  7907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7908 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;Total ram usage:        9 bytes
  7913 ;; Hardware stack levels used:    1
  7914 ;; Hardware stack levels required when called:    2
  7915 ;; This function calls:
  7916 ;;		Nothing
  7917 ;; This function is called by:
  7918 ;;		_sprintf
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           	psect	text11
  7923  002A28                     __ptext11:
  7924                           	opt stack 0
  7925  002A28                     ___llmod:
  7926                           	opt stack 27
  7927                           
  7928                           ;incstack = 0
  7929  002A28  5025               	movf	___llmod@divisor,w,c
  7930  002A2A  1026               	iorwf	___llmod@divisor+1,w,c
  7931  002A2C  1027               	iorwf	___llmod@divisor+2,w,c
  7932  002A2E  1028               	iorwf	___llmod@divisor+3,w,c
  7933  002A30  B4D8               	btfsc	status,2,c
  7934  002A32  D024               	goto	l992
  7935  002A34  0E01               	movlw	1
  7936  002A36  6E29               	movwf	___llmod@counter,c
  7937  002A38  D006               	goto	l987
  7938  002A3A  90D8               	bcf	status,0,c
  7939  002A3C  3625               	rlcf	___llmod@divisor,f,c
  7940  002A3E  3626               	rlcf	___llmod@divisor+1,f,c
  7941  002A40  3627               	rlcf	___llmod@divisor+2,f,c
  7942  002A42  3628               	rlcf	___llmod@divisor+3,f,c
  7943  002A44  2A29               	incf	___llmod@counter,f,c
  7944  002A46                     l987:
  7945  002A46  AE28               	btfss	___llmod@divisor+3,7,c
  7946  002A48  D7F8               	goto	l988
  7947  002A4A                     u4010:
  7948  002A4A  5025               	movf	___llmod@divisor,w,c
  7949  002A4C  5C21               	subwf	___llmod@dividend,w,c
  7950  002A4E  5026               	movf	___llmod@divisor+1,w,c
  7951  002A50  5822               	subwfb	___llmod@dividend+1,w,c
  7952  002A52  5027               	movf	___llmod@divisor+2,w,c
  7953  002A54  5823               	subwfb	___llmod@dividend+2,w,c
  7954  002A56  5028               	movf	___llmod@divisor+3,w,c
  7955  002A58  5824               	subwfb	___llmod@dividend+3,w,c
  7956  002A5A  A0D8               	btfss	status,0,c
  7957  002A5C  D008               	goto	l991
  7958  002A5E  5025               	movf	___llmod@divisor,w,c
  7959  002A60  5E21               	subwf	___llmod@dividend,f,c
  7960  002A62  5026               	movf	___llmod@divisor+1,w,c
  7961  002A64  5A22               	subwfb	___llmod@dividend+1,f,c
  7962  002A66  5027               	movf	___llmod@divisor+2,w,c
  7963  002A68  5A23               	subwfb	___llmod@dividend+2,f,c
  7964  002A6A  5028               	movf	___llmod@divisor+3,w,c
  7965  002A6C  5A24               	subwfb	___llmod@dividend+3,f,c
  7966  002A6E                     l991:
  7967  002A6E  90D8               	bcf	status,0,c
  7968  002A70  3228               	rrcf	___llmod@divisor+3,f,c
  7969  002A72  3227               	rrcf	___llmod@divisor+2,f,c
  7970  002A74  3226               	rrcf	___llmod@divisor+1,f,c
  7971  002A76  3225               	rrcf	___llmod@divisor,f,c
  7972  002A78  2E29               	decfsz	___llmod@counter,f,c
  7973  002A7A  D7E7               	goto	u4010
  7974  002A7C                     l992:
  7975  002A7C  C021  F021         	movff	___llmod@dividend,?___llmod
  7976  002A80  C022  F022         	movff	___llmod@dividend+1,?___llmod+1
  7977  002A84  C023  F023         	movff	___llmod@dividend+2,?___llmod+2
  7978  002A88  C024  F024         	movff	___llmod@dividend+3,?___llmod+3
  7979  002A8C  0012               	return		;funcret
  7980  002A8E                     __end_of___llmod:
  7981                           	opt stack 0
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           postinc0	equ	0xFEE
  7989                           wreg	equ	0xFE8
  7990                           postdec1	equ	0xFE5
  7991                           fsr1l	equ	0xFE1
  7992                           indf2	equ	0xFDF
  7993                           postinc2	equ	0xFDE
  7994                           postdec2	equ	0xFDD
  7995                           fsr2h	equ	0xFDA
  7996                           fsr2l	equ	0xFD9
  7997                           status	equ	0xFD8
  7998                           
  7999 ;; *************** function ___lldiv *****************
  8000 ;; Defined at:
  8001 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;  dividend        4   19[COMRAM] unsigned long 
  8004 ;;  divisor         4   23[COMRAM] unsigned long 
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;  quotient        4   27[COMRAM] unsigned long 
  8007 ;;  counter         1   31[COMRAM] unsigned char 
  8008 ;; Return value:  Size  Location     Type
  8009 ;;                  4   19[COMRAM] unsigned long 
  8010 ;; Registers used:
  8011 ;;		wreg, status,2, status,0
  8012 ;; Tracked objects:
  8013 ;;		On entry : 0/0
  8014 ;;		On exit  : 0/0
  8015 ;;		Unchanged: 0/0
  8016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8017 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8018 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8020 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8021 ;;Total ram usage:       13 bytes
  8022 ;; Hardware stack levels used:    1
  8023 ;; Hardware stack levels required when called:    2
  8024 ;; This function calls:
  8025 ;;		Nothing
  8026 ;; This function is called by:
  8027 ;;		_sprintf
  8028 ;; This function uses a non-reentrant model
  8029 ;;
  8030                           
  8031                           	psect	text12
  8032  0028B6                     __ptext12:
  8033                           	opt stack 0
  8034  0028B6                     ___lldiv:
  8035                           	opt stack 27
  8036                           
  8037                           ;incstack = 0
  8038  0028B6  0E00               	movlw	0
  8039  0028B8  6E1C               	movwf	___lldiv@quotient,c
  8040  0028BA  0E00               	movlw	0
  8041  0028BC  6E1D               	movwf	___lldiv@quotient+1,c
  8042  0028BE  0E00               	movlw	0
  8043  0028C0  6E1E               	movwf	___lldiv@quotient+2,c
  8044  0028C2  0E00               	movlw	0
  8045  0028C4  6E1F               	movwf	___lldiv@quotient+3,c
  8046  0028C6  5018               	movf	___lldiv@divisor,w,c
  8047  0028C8  1019               	iorwf	___lldiv@divisor+1,w,c
  8048  0028CA  101A               	iorwf	___lldiv@divisor+2,w,c
  8049  0028CC  101B               	iorwf	___lldiv@divisor+3,w,c
  8050  0028CE  B4D8               	btfsc	status,2,c
  8051  0028D0  D02A               	goto	l982
  8052  0028D2  0E01               	movlw	1
  8053  0028D4  6E20               	movwf	___lldiv@counter,c
  8054  0028D6  D006               	goto	l977
  8055  0028D8  90D8               	bcf	status,0,c
  8056  0028DA  3618               	rlcf	___lldiv@divisor,f,c
  8057  0028DC  3619               	rlcf	___lldiv@divisor+1,f,c
  8058  0028DE  361A               	rlcf	___lldiv@divisor+2,f,c
  8059  0028E0  361B               	rlcf	___lldiv@divisor+3,f,c
  8060  0028E2  2A20               	incf	___lldiv@counter,f,c
  8061  0028E4                     l977:
  8062  0028E4  AE1B               	btfss	___lldiv@divisor+3,7,c
  8063  0028E6  D7F8               	goto	l978
  8064  0028E8                     u3980:
  8065  0028E8  90D8               	bcf	status,0,c
  8066  0028EA  361C               	rlcf	___lldiv@quotient,f,c
  8067  0028EC  361D               	rlcf	___lldiv@quotient+1,f,c
  8068  0028EE  361E               	rlcf	___lldiv@quotient+2,f,c
  8069  0028F0  361F               	rlcf	___lldiv@quotient+3,f,c
  8070  0028F2  5018               	movf	___lldiv@divisor,w,c
  8071  0028F4  5C14               	subwf	___lldiv@dividend,w,c
  8072  0028F6  5019               	movf	___lldiv@divisor+1,w,c
  8073  0028F8  5815               	subwfb	___lldiv@dividend+1,w,c
  8074  0028FA  501A               	movf	___lldiv@divisor+2,w,c
  8075  0028FC  5816               	subwfb	___lldiv@dividend+2,w,c
  8076  0028FE  501B               	movf	___lldiv@divisor+3,w,c
  8077  002900  5817               	subwfb	___lldiv@dividend+3,w,c
  8078  002902  A0D8               	btfss	status,0,c
  8079  002904  D009               	goto	l981
  8080  002906  5018               	movf	___lldiv@divisor,w,c
  8081  002908  5E14               	subwf	___lldiv@dividend,f,c
  8082  00290A  5019               	movf	___lldiv@divisor+1,w,c
  8083  00290C  5A15               	subwfb	___lldiv@dividend+1,f,c
  8084  00290E  501A               	movf	___lldiv@divisor+2,w,c
  8085  002910  5A16               	subwfb	___lldiv@dividend+2,f,c
  8086  002912  501B               	movf	___lldiv@divisor+3,w,c
  8087  002914  5A17               	subwfb	___lldiv@dividend+3,f,c
  8088  002916  801C               	bsf	___lldiv@quotient,0,c
  8089  002918                     l981:
  8090  002918  90D8               	bcf	status,0,c
  8091  00291A  321B               	rrcf	___lldiv@divisor+3,f,c
  8092  00291C  321A               	rrcf	___lldiv@divisor+2,f,c
  8093  00291E  3219               	rrcf	___lldiv@divisor+1,f,c
  8094  002920  3218               	rrcf	___lldiv@divisor,f,c
  8095  002922  2E20               	decfsz	___lldiv@counter,f,c
  8096  002924  D7E1               	goto	u3980
  8097  002926                     l982:
  8098  002926  C01C  F014         	movff	___lldiv@quotient,?___lldiv
  8099  00292A  C01D  F015         	movff	___lldiv@quotient+1,?___lldiv+1
  8100  00292E  C01E  F016         	movff	___lldiv@quotient+2,?___lldiv+2
  8101  002932  C01F  F017         	movff	___lldiv@quotient+3,?___lldiv+3
  8102  002936  0012               	return		;funcret
  8103  002938                     __end_of___lldiv:
  8104                           	opt stack 0
  8105                           tblptru	equ	0xFF8
  8106                           tblptrh	equ	0xFF7
  8107                           tblptrl	equ	0xFF6
  8108                           tablat	equ	0xFF5
  8109                           prodh	equ	0xFF4
  8110                           prodl	equ	0xFF3
  8111                           postinc0	equ	0xFEE
  8112                           wreg	equ	0xFE8
  8113                           postdec1	equ	0xFE5
  8114                           fsr1l	equ	0xFE1
  8115                           indf2	equ	0xFDF
  8116                           postinc2	equ	0xFDE
  8117                           postdec2	equ	0xFDD
  8118                           fsr2h	equ	0xFDA
  8119                           fsr2l	equ	0xFD9
  8120                           status	equ	0xFD8
  8121                           
  8122 ;; *************** function ___fttol *****************
  8123 ;; Defined at:
  8124 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  8125 ;; Parameters:    Size  Location     Type
  8126 ;;  f1              3    4[BANK0 ] float 
  8127 ;; Auto vars:     Size  Location     Type
  8128 ;;  lval            4   14[BANK0 ] unsigned long 
  8129 ;;  exp1            1   18[BANK0 ] unsigned char 
  8130 ;;  sign1           1   13[BANK0 ] unsigned char 
  8131 ;; Return value:  Size  Location     Type
  8132 ;;                  4    4[BANK0 ] long 
  8133 ;; Registers used:
  8134 ;;		wreg, status,2, status,0
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8140 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;Total ram usage:       15 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    2
  8147 ;; This function calls:
  8148 ;;		Nothing
  8149 ;; This function is called by:
  8150 ;;		_sprintf
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           	psect	text13
  8155  002164                     __ptext13:
  8156                           	opt stack 0
  8157  002164                     ___fttol:
  8158                           	opt stack 27
  8159                           
  8160                           ;incstack = 0
  8161  002164  C086  F088         	movff	___fttol@f1+2,??___fttol
  8162  002168  0100               	movlb	0	; () banked
  8163  00216A  6B89               	clrf	(??___fttol+1)& (0+255),b
  8164  00216C  6B8A               	clrf	(??___fttol+2)& (0+255),b
  8165  00216E  3585               	rlcf	(___fttol@f1+1)& (0+255),w,b
  8166  002170  3788               	rlcf	??___fttol& (0+255),f,b
  8167  002172  E301               	bnc	u6581
  8168  002174  8189               	bsf	(??___fttol+1)& (0+255),0,b
  8169  002176                     u6581:
  8170  002176  5188               	movf	??___fttol& (0+255),w,b
  8171  002178  6F92               	movwf	___fttol@exp1& (0+255),b
  8172  00217A  5192               	movf	___fttol@exp1& (0+255),w,b
  8173  00217C  A4D8               	btfss	status,2,c
  8174  00217E  D009               	goto	l936
  8175                           
  8176                           ; BSR set to: 0
  8177  002180  0E00               	movlw	0
  8178  002182  6F84               	movwf	?___fttol& (0+255),b
  8179  002184  0E00               	movlw	0
  8180  002186  6F85               	movwf	(?___fttol+1)& (0+255),b
  8181  002188  0E00               	movlw	0
  8182  00218A  6F86               	movwf	(?___fttol+2)& (0+255),b
  8183  00218C  0E00               	movlw	0
  8184  00218E  6F87               	movwf	(?___fttol+3)& (0+255),b
  8185                           
  8186                           ; BSR set to: 0
  8187  002190  0012               	return	
  8188  002192                     l936:
  8189                           
  8190                           ; BSR set to: 0
  8191                           
  8192                           ; BSR set to: 0
  8193  002192  0E17               	movlw	23
  8194  002194  6F88               	movwf	??___fttol& (0+255),b
  8195  002196  C084  F089         	movff	___fttol@f1,??___fttol+1
  8196  00219A  C085  F08A         	movff	___fttol@f1+1,??___fttol+2
  8197  00219E  C086  F08B         	movff	___fttol@f1+2,??___fttol+3
  8198  0021A2  2988               	incf	??___fttol& (0+255),w,b
  8199  0021A4  6F8C               	movwf	(??___fttol+4)& (0+255),b
  8200  0021A6  D004               	goto	u6600
  8201  0021A8                     u6605:
  8202  0021A8  90D8               	bcf	status,0,c
  8203  0021AA  338B               	rrcf	(??___fttol+3)& (0+255),f,b
  8204  0021AC  338A               	rrcf	(??___fttol+2)& (0+255),f,b
  8205  0021AE  3389               	rrcf	(??___fttol+1)& (0+255),f,b
  8206  0021B0                     u6600:
  8207  0021B0  2F8C               	decfsz	(??___fttol+4)& (0+255),f,b
  8208  0021B2  D7FA               	goto	u6605
  8209  0021B4  0100               	movlb	0	; () banked
  8210  0021B6  5189               	movf	(??___fttol+1)& (0+255),w,b
  8211  0021B8  6F8D               	movwf	___fttol@sign1& (0+255),b
  8212                           
  8213                           ; BSR set to: 0
  8214  0021BA  8F85               	bsf	(___fttol@f1+1)& (0+255),7,b
  8215                           
  8216                           ; BSR set to: 0
  8217  0021BC  0EFF               	movlw	255
  8218  0021BE  1784               	andwf	___fttol@f1& (0+255),f,b
  8219  0021C0  0EFF               	movlw	255
  8220  0021C2  1785               	andwf	(___fttol@f1+1)& (0+255),f,b
  8221  0021C4  0E00               	movlw	0
  8222  0021C6  1786               	andwf	(___fttol@f1+2)& (0+255),f,b
  8223                           
  8224                           ; BSR set to: 0
  8225  0021C8  5184               	movf	___fttol@f1& (0+255),w,b
  8226  0021CA  6F8E               	movwf	___fttol@lval& (0+255),b
  8227  0021CC  5185               	movf	(___fttol@f1+1)& (0+255),w,b
  8228  0021CE  6F8F               	movwf	(___fttol@lval+1)& (0+255),b
  8229  0021D0  5186               	movf	(___fttol@f1+2)& (0+255),w,b
  8230  0021D2  6F90               	movwf	(___fttol@lval+2)& (0+255),b
  8231  0021D4  6B91               	clrf	(___fttol@lval+3)& (0+255),b
  8232                           
  8233                           ; BSR set to: 0
  8234  0021D6  0E8E               	movlw	142
  8235  0021D8  5F92               	subwf	___fttol@exp1& (0+255),f,b
  8236                           
  8237                           ; BSR set to: 0
  8238  0021DA  AF92               	btfss	___fttol@exp1& (0+255),7,b
  8239  0021DC  D016               	goto	l938
  8240                           
  8241                           ; BSR set to: 0
  8242  0021DE  5192               	movf	___fttol@exp1& (0+255),w,b
  8243  0021E0  0A80               	xorlw	128
  8244  0021E2  0F8F               	addlw	143
  8245  0021E4  B0D8               	btfsc	status,0,c
  8246  0021E6  D009               	goto	l939
  8247                           
  8248                           ; BSR set to: 0
  8249  0021E8  0E00               	movlw	0
  8250  0021EA  6F84               	movwf	?___fttol& (0+255),b
  8251  0021EC  0E00               	movlw	0
  8252  0021EE  6F85               	movwf	(?___fttol+1)& (0+255),b
  8253  0021F0  0E00               	movlw	0
  8254  0021F2  6F86               	movwf	(?___fttol+2)& (0+255),b
  8255  0021F4  0E00               	movlw	0
  8256  0021F6  6F87               	movwf	(?___fttol+3)& (0+255),b
  8257                           
  8258                           ; BSR set to: 0
  8259  0021F8  0012               	return	
  8260  0021FA                     l939:
  8261                           
  8262                           ; BSR set to: 0
  8263                           
  8264                           ; BSR set to: 0
  8265                           
  8266                           ; BSR set to: 0
  8267  0021FA  90D8               	bcf	status,0,c
  8268  0021FC  3391               	rrcf	(___fttol@lval+3)& (0+255),f,b
  8269  0021FE  3390               	rrcf	(___fttol@lval+2)& (0+255),f,b
  8270  002200  338F               	rrcf	(___fttol@lval+1)& (0+255),f,b
  8271  002202  338E               	rrcf	___fttol@lval& (0+255),f,b
  8272                           
  8273                           ; BSR set to: 0
  8274  002204  3F92               	incfsz	___fttol@exp1& (0+255),f,b
  8275  002206  D7F9               	goto	l939
  8276                           
  8277                           ; BSR set to: 0
  8278  002208  D015               	goto	u6640
  8279  00220A                     l938:
  8280                           
  8281                           ; BSR set to: 0
  8282                           
  8283                           ; BSR set to: 0
  8284  00220A  0E17               	movlw	23
  8285  00220C  6592               	cpfsgt	___fttol@exp1& (0+255),b
  8286  00220E  D00F               	goto	l944
  8287                           
  8288                           ; BSR set to: 0
  8289  002210  0E00               	movlw	0
  8290  002212  6F84               	movwf	?___fttol& (0+255),b
  8291  002214  0E00               	movlw	0
  8292  002216  6F85               	movwf	(?___fttol+1)& (0+255),b
  8293  002218  0E00               	movlw	0
  8294  00221A  6F86               	movwf	(?___fttol+2)& (0+255),b
  8295  00221C  0E00               	movlw	0
  8296  00221E  6F87               	movwf	(?___fttol+3)& (0+255),b
  8297                           
  8298                           ; BSR set to: 0
  8299  002220  0012               	return	
  8300  002222                     
  8301                           ; BSR set to: 0
  8302                           
  8303                           ; BSR set to: 0
  8304  002222  90D8               	bcf	status,0,c
  8305  002224  378E               	rlcf	___fttol@lval& (0+255),f,b
  8306  002226  378F               	rlcf	(___fttol@lval+1)& (0+255),f,b
  8307  002228  3790               	rlcf	(___fttol@lval+2)& (0+255),f,b
  8308  00222A  3791               	rlcf	(___fttol@lval+3)& (0+255),f,b
  8309  00222C  0792               	decf	___fttol@exp1& (0+255),f,b
  8310  00222E                     l944:
  8311                           
  8312                           ; BSR set to: 0
  8313                           
  8314                           ; BSR set to: 0
  8315  00222E  5192               	movf	___fttol@exp1& (0+255),w,b
  8316  002230  A4D8               	btfss	status,2,c
  8317  002232  D7F7               	goto	l945
  8318  002234                     u6640:
  8319                           
  8320                           ; BSR set to: 0
  8321                           
  8322                           ; BSR set to: 0
  8323                           
  8324                           ; BSR set to: 0
  8325  002234  518D               	movf	___fttol@sign1& (0+255),w,b
  8326  002236  B4D8               	btfsc	status,2,c
  8327  002238  D008               	goto	l947
  8328                           
  8329                           ; BSR set to: 0
  8330  00223A  1F91               	comf	(___fttol@lval+3)& (0+255),f,b
  8331  00223C  1F90               	comf	(___fttol@lval+2)& (0+255),f,b
  8332  00223E  1F8F               	comf	(___fttol@lval+1)& (0+255),f,b
  8333  002240  6D8E               	negf	___fttol@lval& (0+255),b
  8334  002242  0E00               	movlw	0
  8335  002244  238F               	addwfc	(___fttol@lval+1)& (0+255),f,b
  8336  002246  2390               	addwfc	(___fttol@lval+2)& (0+255),f,b
  8337  002248  2391               	addwfc	(___fttol@lval+3)& (0+255),f,b
  8338  00224A                     l947:
  8339                           
  8340                           ; BSR set to: 0
  8341                           
  8342                           ; BSR set to: 0
  8343  00224A  C08E  F084         	movff	___fttol@lval,?___fttol
  8344  00224E  C08F  F085         	movff	___fttol@lval+1,?___fttol+1
  8345  002252  C090  F086         	movff	___fttol@lval+2,?___fttol+2
  8346  002256  C091  F087         	movff	___fttol@lval+3,?___fttol+3
  8347  00225A  0012               	return	
  8348  00225C                     __end_of___fttol:
  8349                           	opt stack 0
  8350                           tblptru	equ	0xFF8
  8351                           tblptrh	equ	0xFF7
  8352                           tblptrl	equ	0xFF6
  8353                           tablat	equ	0xFF5
  8354                           prodh	equ	0xFF4
  8355                           prodl	equ	0xFF3
  8356                           postinc0	equ	0xFEE
  8357                           wreg	equ	0xFE8
  8358                           postdec1	equ	0xFE5
  8359                           fsr1l	equ	0xFE1
  8360                           indf2	equ	0xFDF
  8361                           postinc2	equ	0xFDE
  8362                           postdec2	equ	0xFDD
  8363                           fsr2h	equ	0xFDA
  8364                           fsr2l	equ	0xFD9
  8365                           status	equ	0xFD8
  8366                           
  8367 ;; *************** function ___ftsub *****************
  8368 ;; Defined at:
  8369 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  8370 ;; Parameters:    Size  Location     Type
  8371 ;;  f1              3   19[BANK0 ] float 
  8372 ;;  f2              3   22[BANK0 ] float 
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;		None
  8375 ;; Return value:  Size  Location     Type
  8376 ;;                  3   19[BANK0 ] float 
  8377 ;; Registers used:
  8378 ;;		wreg, status,2, status,0, cstack
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8384 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8387 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;Total ram usage:        6 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; Hardware stack levels required when called:    4
  8391 ;; This function calls:
  8392 ;;		___ftadd
  8393 ;; This function is called by:
  8394 ;;		_sprintf
  8395 ;; This function uses a non-reentrant model
  8396 ;;
  8397                           
  8398                           	psect	text14
  8399  002D3E                     __ptext14:
  8400                           	opt stack 0
  8401  002D3E                     ___ftsub:
  8402                           	opt stack 25
  8403                           
  8404                           ; BSR set to: 0
  8405                           ;incstack = 0
  8406  002D3E  0100               	movlb	0	; () banked
  8407  002D40  5196               	movf	___ftsub@f2& (0+255),w,b
  8408  002D42  1197               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  8409  002D44  1198               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  8410  002D46  B4D8               	btfsc	status,2,c
  8411  002D48  D006               	goto	l932
  8412                           
  8413                           ; BSR set to: 0
  8414  002D4A  0E00               	movlw	0
  8415  002D4C  1B96               	xorwf	___ftsub@f2& (0+255),f,b
  8416  002D4E  0E00               	movlw	0
  8417  002D50  1B97               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  8418  002D52  0E80               	movlw	128
  8419  002D54  1B98               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  8420  002D56                     l932:
  8421                           
  8422                           ; BSR set to: 0
  8423                           
  8424                           ; BSR set to: 0
  8425  002D56  C093  F087         	movff	___ftsub@f1,___ftadd@f1
  8426  002D5A  C094  F088         	movff	___ftsub@f1+1,___ftadd@f1+1
  8427  002D5E  C095  F089         	movff	___ftsub@f1+2,___ftadd@f1+2
  8428  002D62  C096  F08A         	movff	___ftsub@f2,___ftadd@f2
  8429  002D66  C097  F08B         	movff	___ftsub@f2+1,___ftadd@f2+1
  8430  002D6A  C098  F08C         	movff	___ftsub@f2+2,___ftadd@f2+2
  8431  002D6E  ECAE  F00E         	call	___ftadd	;wreg free
  8432  002D72  C087  F093         	movff	?___ftadd,?___ftsub
  8433  002D76  C088  F094         	movff	?___ftadd+1,?___ftsub+1
  8434  002D7A  C089  F095         	movff	?___ftadd+2,?___ftsub+2
  8435  002D7E  0012               	return	
  8436  002D80                     __end_of___ftsub:
  8437                           	opt stack 0
  8438                           tblptru	equ	0xFF8
  8439                           tblptrh	equ	0xFF7
  8440                           tblptrl	equ	0xFF6
  8441                           tablat	equ	0xFF5
  8442                           prodh	equ	0xFF4
  8443                           prodl	equ	0xFF3
  8444                           postinc0	equ	0xFEE
  8445                           wreg	equ	0xFE8
  8446                           postdec1	equ	0xFE5
  8447                           fsr1l	equ	0xFE1
  8448                           indf2	equ	0xFDF
  8449                           postinc2	equ	0xFDE
  8450                           postdec2	equ	0xFDD
  8451                           fsr2h	equ	0xFDA
  8452                           fsr2l	equ	0xFD9
  8453                           status	equ	0xFD8
  8454                           
  8455 ;; *************** function ___ftadd *****************
  8456 ;; Defined at:
  8457 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8458 ;; Parameters:    Size  Location     Type
  8459 ;;  f1              3    7[BANK0 ] float 
  8460 ;;  f2              3   10[BANK0 ] float 
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  exp1            1   18[BANK0 ] unsigned char 
  8463 ;;  exp2            1   17[BANK0 ] unsigned char 
  8464 ;;  sign            1   16[BANK0 ] unsigned char 
  8465 ;; Return value:  Size  Location     Type
  8466 ;;                  3    7[BANK0 ] float 
  8467 ;; Registers used:
  8468 ;;		wreg, status,2, status,0, cstack
  8469 ;; Tracked objects:
  8470 ;;		On entry : 0/0
  8471 ;;		On exit  : 0/0
  8472 ;;		Unchanged: 0/0
  8473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8474 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8475 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;Total ram usage:       12 bytes
  8479 ;; Hardware stack levels used:    1
  8480 ;; Hardware stack levels required when called:    3
  8481 ;; This function calls:
  8482 ;;		___ftpack
  8483 ;; This function is called by:
  8484 ;;		_sprintf
  8485 ;;		___ftsub
  8486 ;; This function uses a non-reentrant model
  8487 ;;
  8488                           
  8489                           	psect	text15
  8490  001D5C                     __ptext15:
  8491                           	opt stack 0
  8492  001D5C                     ___ftadd:
  8493                           	opt stack 25
  8494                           
  8495                           ;incstack = 0
  8496  001D5C  C089  F08D         	movff	___ftadd@f1+2,??___ftadd
  8497  001D60  0100               	movlb	0	; () banked
  8498  001D62  6B8E               	clrf	(??___ftadd+1)& (0+255),b
  8499  001D64  6B8F               	clrf	(??___ftadd+2)& (0+255),b
  8500  001D66  3588               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  8501  001D68  378D               	rlcf	??___ftadd& (0+255),f,b
  8502  001D6A  E301               	bnc	u6051
  8503  001D6C  818E               	bsf	(??___ftadd+1)& (0+255),0,b
  8504  001D6E                     u6051:
  8505  001D6E  518D               	movf	??___ftadd& (0+255),w,b
  8506  001D70  6F92               	movwf	___ftadd@exp1& (0+255),b
  8507  001D72  C08C  F08D         	movff	___ftadd@f2+2,??___ftadd
  8508  001D76  6B8E               	clrf	(??___ftadd+1)& (0+255),b
  8509  001D78  6B8F               	clrf	(??___ftadd+2)& (0+255),b
  8510  001D7A  358B               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8511  001D7C  378D               	rlcf	??___ftadd& (0+255),f,b
  8512  001D7E  E301               	bnc	u6061
  8513  001D80  818E               	bsf	(??___ftadd+1)& (0+255),0,b
  8514  001D82                     u6061:
  8515  001D82  518D               	movf	??___ftadd& (0+255),w,b
  8516  001D84  6F91               	movwf	___ftadd@exp2& (0+255),b
  8517                           
  8518                           ; BSR set to: 0
  8519  001D86  5192               	movf	___ftadd@exp1& (0+255),w,b
  8520  001D88  B4D8               	btfsc	status,2,c
  8521  001D8A  D00B               	goto	u6090
  8522                           
  8523                           ; BSR set to: 0
  8524  001D8C  5191               	movf	___ftadd@exp2& (0+255),w,b
  8525  001D8E  5D92               	subwf	___ftadd@exp1& (0+255),w,b
  8526  001D90  B0D8               	btfsc	status,0,c
  8527  001D92  D00E               	goto	l850
  8528                           
  8529                           ; BSR set to: 0
  8530  001D94  5192               	movf	___ftadd@exp1& (0+255),w,b
  8531  001D96  0800               	sublw	0
  8532  001D98  2591               	addwf	___ftadd@exp2& (0+255),w,b
  8533  001D9A  6F8D               	movwf	??___ftadd& (0+255),b
  8534  001D9C  0E18               	movlw	24
  8535  001D9E  658D               	cpfsgt	??___ftadd& (0+255),b
  8536  001DA0  D007               	goto	l850
  8537  001DA2                     u6090:
  8538                           
  8539                           ; BSR set to: 0
  8540  001DA2  C08A  F087         	movff	___ftadd@f2,?___ftadd
  8541  001DA6  C08B  F088         	movff	___ftadd@f2+1,?___ftadd+1
  8542  001DAA  C08C  F089         	movff	___ftadd@f2+2,?___ftadd+2
  8543  001DAE  0012               	return	
  8544  001DB0                     l850:
  8545                           
  8546                           ; BSR set to: 0
  8547                           
  8548                           ; BSR set to: 0
  8549  001DB0  5191               	movf	___ftadd@exp2& (0+255),w,b
  8550  001DB2  B4D8               	btfsc	status,2,c
  8551  001DB4  D00B               	goto	u6120
  8552                           
  8553                           ; BSR set to: 0
  8554  001DB6  5192               	movf	___ftadd@exp1& (0+255),w,b
  8555  001DB8  5D91               	subwf	___ftadd@exp2& (0+255),w,b
  8556  001DBA  B0D8               	btfsc	status,0,c
  8557  001DBC  D00E               	goto	l854
  8558                           
  8559                           ; BSR set to: 0
  8560  001DBE  5191               	movf	___ftadd@exp2& (0+255),w,b
  8561  001DC0  0800               	sublw	0
  8562  001DC2  2592               	addwf	___ftadd@exp1& (0+255),w,b
  8563  001DC4  6F8D               	movwf	??___ftadd& (0+255),b
  8564  001DC6  0E18               	movlw	24
  8565  001DC8  658D               	cpfsgt	??___ftadd& (0+255),b
  8566  001DCA  D007               	goto	l854
  8567  001DCC                     u6120:
  8568                           
  8569                           ; BSR set to: 0
  8570  001DCC  C087  F087         	movff	___ftadd@f1,?___ftadd
  8571  001DD0  C088  F088         	movff	___ftadd@f1+1,?___ftadd+1
  8572  001DD4  C089  F089         	movff	___ftadd@f1+2,?___ftadd+2
  8573  001DD8  0012               	return	
  8574  001DDA                     l854:
  8575                           
  8576                           ; BSR set to: 0
  8577                           
  8578                           ; BSR set to: 0
  8579  001DDA  0E06               	movlw	6
  8580  001DDC  6F90               	movwf	___ftadd@sign& (0+255),b
  8581                           
  8582                           ; BSR set to: 0
  8583  001DDE  BF89               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  8584                           
  8585                           ; BSR set to: 0
  8586  001DE0  8F90               	bsf	___ftadd@sign& (0+255),7,b
  8587                           
  8588                           ; BSR set to: 0
  8589                           
  8590                           ; BSR set to: 0
  8591  001DE2  BF8C               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  8592                           
  8593                           ; BSR set to: 0
  8594  001DE4  8D90               	bsf	___ftadd@sign& (0+255),6,b
  8595                           
  8596                           ; BSR set to: 0
  8597  001DE6  8F88               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8598                           
  8599                           ; BSR set to: 0
  8600  001DE8  0EFF               	movlw	255
  8601  001DEA  1787               	andwf	___ftadd@f1& (0+255),f,b
  8602  001DEC  0EFF               	movlw	255
  8603  001DEE  1788               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8604  001DF0  0E00               	movlw	0
  8605  001DF2  1789               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8606  001DF4  8F8B               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8607                           
  8608                           ; BSR set to: 0
  8609  001DF6  0EFF               	movlw	255
  8610  001DF8  178A               	andwf	___ftadd@f2& (0+255),f,b
  8611  001DFA  0EFF               	movlw	255
  8612  001DFC  178B               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8613  001DFE  0E00               	movlw	0
  8614  001E00  178C               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8615                           
  8616                           ; BSR set to: 0
  8617  001E02  5191               	movf	___ftadd@exp2& (0+255),w,b
  8618  001E04  5D92               	subwf	___ftadd@exp1& (0+255),w,b
  8619  001E06  B0D8               	btfsc	status,0,c
  8620  001E08  D01B               	goto	l859
  8621  001E0A                     u6150:
  8622                           
  8623                           ; BSR set to: 0
  8624                           
  8625                           ; BSR set to: 0
  8626  001E0A  90D8               	bcf	status,0,c
  8627  001E0C  378A               	rlcf	___ftadd@f2& (0+255),f,b
  8628  001E0E  378B               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8629  001E10  378C               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8630  001E12  0791               	decf	___ftadd@exp2& (0+255),f,b
  8631                           
  8632                           ; BSR set to: 0
  8633  001E14  5192               	movf	___ftadd@exp1& (0+255),w,b
  8634  001E16  1991               	xorwf	___ftadd@exp2& (0+255),w,b
  8635  001E18  B4D8               	btfsc	status,2,c
  8636  001E1A  D00D               	goto	l864
  8637                           
  8638                           ; BSR set to: 0
  8639  001E1C  0790               	decf	___ftadd@sign& (0+255),f,b
  8640  001E1E  C090  F08D         	movff	___ftadd@sign,??___ftadd
  8641  001E22  0E07               	movlw	7
  8642  001E24  178D               	andwf	??___ftadd& (0+255),f,b
  8643  001E26  B4D8               	btfsc	status,2,c
  8644  001E28  D006               	goto	l864
  8645  001E2A  D7EF               	goto	u6150
  8646  001E2C                     
  8647                           ; BSR set to: 0
  8648                           
  8649                           ; BSR set to: 0
  8650  001E2C  90D8               	bcf	status,0,c
  8651  001E2E  3389               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8652  001E30  3388               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8653  001E32  3387               	rrcf	___ftadd@f1& (0+255),f,b
  8654  001E34  2B92               	incf	___ftadd@exp1& (0+255),f,b
  8655  001E36                     l864:
  8656                           
  8657                           ; BSR set to: 0
  8658                           
  8659                           ; BSR set to: 0
  8660  001E36  5191               	movf	___ftadd@exp2& (0+255),w,b
  8661  001E38  1992               	xorwf	___ftadd@exp1& (0+255),w,b
  8662  001E3A  B4D8               	btfsc	status,2,c
  8663  001E3C  D01F               	goto	u6220
  8664  001E3E  D7F6               	goto	l865
  8665  001E40                     l859:
  8666                           
  8667                           ; BSR set to: 0
  8668                           
  8669                           ; BSR set to: 0
  8670  001E40  5192               	movf	___ftadd@exp1& (0+255),w,b
  8671  001E42  5D91               	subwf	___ftadd@exp2& (0+255),w,b
  8672  001E44  B0D8               	btfsc	status,0,c
  8673  001E46  D01A               	goto	u6220
  8674  001E48                     u6190:
  8675                           
  8676                           ; BSR set to: 0
  8677                           
  8678                           ; BSR set to: 0
  8679  001E48  90D8               	bcf	status,0,c
  8680  001E4A  3787               	rlcf	___ftadd@f1& (0+255),f,b
  8681  001E4C  3788               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8682  001E4E  3789               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8683  001E50  0792               	decf	___ftadd@exp1& (0+255),f,b
  8684                           
  8685                           ; BSR set to: 0
  8686  001E52  5192               	movf	___ftadd@exp1& (0+255),w,b
  8687  001E54  1991               	xorwf	___ftadd@exp2& (0+255),w,b
  8688  001E56  B4D8               	btfsc	status,2,c
  8689  001E58  D00D               	goto	l873
  8690                           
  8691                           ; BSR set to: 0
  8692  001E5A  0790               	decf	___ftadd@sign& (0+255),f,b
  8693  001E5C  C090  F08D         	movff	___ftadd@sign,??___ftadd
  8694  001E60  0E07               	movlw	7
  8695  001E62  178D               	andwf	??___ftadd& (0+255),f,b
  8696  001E64  B4D8               	btfsc	status,2,c
  8697  001E66  D006               	goto	l873
  8698  001E68  D7EF               	goto	u6190
  8699  001E6A                     
  8700                           ; BSR set to: 0
  8701                           
  8702                           ; BSR set to: 0
  8703  001E6A  90D8               	bcf	status,0,c
  8704  001E6C  338C               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8705  001E6E  338B               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8706  001E70  338A               	rrcf	___ftadd@f2& (0+255),f,b
  8707  001E72  2B91               	incf	___ftadd@exp2& (0+255),f,b
  8708  001E74                     l873:
  8709                           
  8710                           ; BSR set to: 0
  8711                           
  8712                           ; BSR set to: 0
  8713  001E74  5191               	movf	___ftadd@exp2& (0+255),w,b
  8714  001E76  1992               	xorwf	___ftadd@exp1& (0+255),w,b
  8715  001E78  A4D8               	btfss	status,2,c
  8716  001E7A  D7F7               	goto	l874
  8717  001E7C                     u6220:
  8718                           
  8719                           ; BSR set to: 0
  8720                           
  8721                           ; BSR set to: 0
  8722                           
  8723                           ; BSR set to: 0
  8724  001E7C  AF90               	btfss	___ftadd@sign& (0+255),7,b
  8725  001E7E  D00C               	goto	l876
  8726                           
  8727                           ; BSR set to: 0
  8728  001E80  0EFF               	movlw	255
  8729  001E82  1B87               	xorwf	___ftadd@f1& (0+255),f,b
  8730  001E84  0EFF               	movlw	255
  8731  001E86  1B88               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8732  001E88  0EFF               	movlw	255
  8733  001E8A  1B89               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8734  001E8C  0E01               	movlw	1
  8735  001E8E  2787               	addwf	___ftadd@f1& (0+255),f,b
  8736  001E90  0E00               	movlw	0
  8737  001E92  2388               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8738  001E94  0E00               	movlw	0
  8739  001E96  2389               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8740  001E98                     l876:
  8741                           
  8742                           ; BSR set to: 0
  8743  001E98  AD90               	btfss	___ftadd@sign& (0+255),6,b
  8744  001E9A  D00C               	goto	l877
  8745                           
  8746                           ; BSR set to: 0
  8747  001E9C  0EFF               	movlw	255
  8748  001E9E  1B8A               	xorwf	___ftadd@f2& (0+255),f,b
  8749  001EA0  0EFF               	movlw	255
  8750  001EA2  1B8B               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8751  001EA4  0EFF               	movlw	255
  8752  001EA6  1B8C               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8753  001EA8  0E01               	movlw	1
  8754  001EAA  278A               	addwf	___ftadd@f2& (0+255),f,b
  8755  001EAC  0E00               	movlw	0
  8756  001EAE  238B               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8757  001EB0  0E00               	movlw	0
  8758  001EB2  238C               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8759  001EB4                     l877:
  8760                           
  8761                           ; BSR set to: 0
  8762                           
  8763                           ; BSR set to: 0
  8764  001EB4  0E00               	movlw	0
  8765  001EB6  6F90               	movwf	___ftadd@sign& (0+255),b
  8766                           
  8767                           ; BSR set to: 0
  8768  001EB8  5187               	movf	___ftadd@f1& (0+255),w,b
  8769  001EBA  278A               	addwf	___ftadd@f2& (0+255),f,b
  8770  001EBC  5188               	movf	(___ftadd@f1+1)& (0+255),w,b
  8771  001EBE  238B               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8772  001EC0  5189               	movf	(___ftadd@f1+2)& (0+255),w,b
  8773  001EC2  238C               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8774                           
  8775                           ; BSR set to: 0
  8776  001EC4  AF8C               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8777  001EC6  D00E               	goto	l878
  8778                           
  8779                           ; BSR set to: 0
  8780  001EC8  0EFF               	movlw	255
  8781  001ECA  1B8A               	xorwf	___ftadd@f2& (0+255),f,b
  8782  001ECC  0EFF               	movlw	255
  8783  001ECE  1B8B               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8784  001ED0  0EFF               	movlw	255
  8785  001ED2  1B8C               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8786  001ED4  0E01               	movlw	1
  8787  001ED6  278A               	addwf	___ftadd@f2& (0+255),f,b
  8788  001ED8  0E00               	movlw	0
  8789  001EDA  238B               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8790  001EDC  0E00               	movlw	0
  8791  001EDE  238C               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8792                           
  8793                           ; BSR set to: 0
  8794  001EE0  0E01               	movlw	1
  8795  001EE2  6F90               	movwf	___ftadd@sign& (0+255),b
  8796  001EE4                     l878:
  8797                           
  8798                           ; BSR set to: 0
  8799                           
  8800                           ; BSR set to: 0
  8801  001EE4  C08A  F014         	movff	___ftadd@f2,___ftpack@arg
  8802  001EE8  C08B  F015         	movff	___ftadd@f2+1,___ftpack@arg+1
  8803  001EEC  C08C  F016         	movff	___ftadd@f2+2,___ftpack@arg+2
  8804  001EF0  C092  F017         	movff	___ftadd@exp1,___ftpack@exp
  8805  001EF4  C090  F018         	movff	___ftadd@sign,___ftpack@sign
  8806  001EF8  ECE3  F012         	call	___ftpack	;wreg free
  8807  001EFC  C014  F087         	movff	?___ftpack,?___ftadd
  8808  001F00  C015  F088         	movff	?___ftpack+1,?___ftadd+1
  8809  001F04  C016  F089         	movff	?___ftpack+2,?___ftadd+2
  8810  001F08  0012               	return	
  8811  001F0A                     __end_of___ftadd:
  8812                           	opt stack 0
  8813                           tblptru	equ	0xFF8
  8814                           tblptrh	equ	0xFF7
  8815                           tblptrl	equ	0xFF6
  8816                           tablat	equ	0xFF5
  8817                           prodh	equ	0xFF4
  8818                           prodl	equ	0xFF3
  8819                           postinc0	equ	0xFEE
  8820                           wreg	equ	0xFE8
  8821                           postdec1	equ	0xFE5
  8822                           fsr1l	equ	0xFE1
  8823                           indf2	equ	0xFDF
  8824                           postinc2	equ	0xFDE
  8825                           postdec2	equ	0xFDD
  8826                           fsr2h	equ	0xFDA
  8827                           fsr2l	equ	0xFD9
  8828                           status	equ	0xFD8
  8829                           
  8830 ;; *************** function ___ftneg *****************
  8831 ;; Defined at:
  8832 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  8833 ;; Parameters:    Size  Location     Type
  8834 ;;  f1              3   19[COMRAM] float 
  8835 ;; Auto vars:     Size  Location     Type
  8836 ;;		None
  8837 ;; Return value:  Size  Location     Type
  8838 ;;                  3   19[COMRAM] float 
  8839 ;; Registers used:
  8840 ;;		wreg, status,2, status,0
  8841 ;; Tracked objects:
  8842 ;;		On entry : 0/0
  8843 ;;		On exit  : 0/0
  8844 ;;		Unchanged: 0/0
  8845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8846 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8849 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8850 ;;Total ram usage:        3 bytes
  8851 ;; Hardware stack levels used:    1
  8852 ;; Hardware stack levels required when called:    2
  8853 ;; This function calls:
  8854 ;;		Nothing
  8855 ;; This function is called by:
  8856 ;;		_sprintf
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           	psect	text16
  8861  002EAE                     __ptext16:
  8862                           	opt stack 0
  8863  002EAE                     ___ftneg:
  8864                           	opt stack 27
  8865                           
  8866                           ;incstack = 0
  8867  002EAE  5014               	movf	___ftneg@f1,w,c
  8868  002EB0  1015               	iorwf	___ftneg@f1+1,w,c
  8869  002EB2  1016               	iorwf	___ftneg@f1+2,w,c
  8870  002EB4  B4D8               	btfsc	status,2,c
  8871  002EB6  D006               	goto	l926
  8872  002EB8  0E00               	movlw	0
  8873  002EBA  1A14               	xorwf	___ftneg@f1,f,c
  8874  002EBC  0E00               	movlw	0
  8875  002EBE  1A15               	xorwf	___ftneg@f1+1,f,c
  8876  002EC0  0E80               	movlw	128
  8877  002EC2  1A16               	xorwf	___ftneg@f1+2,f,c
  8878  002EC4                     l926:
  8879  002EC4  C014  F014         	movff	___ftneg@f1,?___ftneg
  8880  002EC8  C015  F015         	movff	___ftneg@f1+1,?___ftneg+1
  8881  002ECC  C016  F016         	movff	___ftneg@f1+2,?___ftneg+2
  8882  002ED0  0012               	return		;funcret
  8883  002ED2                     __end_of___ftneg:
  8884                           	opt stack 0
  8885                           tblptru	equ	0xFF8
  8886                           tblptrh	equ	0xFF7
  8887                           tblptrl	equ	0xFF6
  8888                           tablat	equ	0xFF5
  8889                           prodh	equ	0xFF4
  8890                           prodl	equ	0xFF3
  8891                           postinc0	equ	0xFEE
  8892                           wreg	equ	0xFE8
  8893                           postdec1	equ	0xFE5
  8894                           fsr1l	equ	0xFE1
  8895                           indf2	equ	0xFDF
  8896                           postinc2	equ	0xFDE
  8897                           postdec2	equ	0xFDD
  8898                           fsr2h	equ	0xFDA
  8899                           fsr2l	equ	0xFD9
  8900                           status	equ	0xFD8
  8901                           
  8902 ;; *************** function ___ftge *****************
  8903 ;; Defined at:
  8904 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;  ff1             3   19[COMRAM] float 
  8907 ;;  ff2             3   22[COMRAM] float 
  8908 ;; Auto vars:     Size  Location     Type
  8909 ;;		None
  8910 ;; Return value:  Size  Location     Type
  8911 ;;		None               void
  8912 ;; Registers used:
  8913 ;;		wreg, status,2, status,0
  8914 ;; Tracked objects:
  8915 ;;		On entry : 0/0
  8916 ;;		On exit  : 0/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8919 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;Total ram usage:        9 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; Hardware stack levels required when called:    2
  8926 ;; This function calls:
  8927 ;;		Nothing
  8928 ;; This function is called by:
  8929 ;;		_sprintf
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           	psect	text17
  8934  002720                     __ptext17:
  8935                           	opt stack 0
  8936  002720                     ___ftge:
  8937                           	opt stack 27
  8938                           
  8939                           ;incstack = 0
  8940  002720  AE16               	btfss	___ftge@ff1+2,7,c
  8941  002722  D016               	goto	l908
  8942  002724  C014  F01A         	movff	___ftge@ff1,??___ftge
  8943  002728  C015  F01B         	movff	___ftge@ff1+1,??___ftge+1
  8944  00272C  C016  F01C         	movff	___ftge@ff1+2,??___ftge+2
  8945  002730  1E1A               	comf	??___ftge,f,c
  8946  002732  1E1B               	comf	??___ftge+1,f,c
  8947  002734  1E1C               	comf	??___ftge+2,f,c
  8948  002736  2A1A               	incf	??___ftge,f,c
  8949  002738  0E00               	movlw	0
  8950  00273A  221B               	addwfc	??___ftge+1,f,c
  8951  00273C  221C               	addwfc	??___ftge+2,f,c
  8952  00273E  0E00               	movlw	0
  8953  002740  241A               	addwf	??___ftge,w,c
  8954  002742  6E14               	movwf	___ftge@ff1,c
  8955  002744  0E00               	movlw	0
  8956  002746  201B               	addwfc	??___ftge+1,w,c
  8957  002748  6E15               	movwf	___ftge@ff1+1,c
  8958  00274A  0E80               	movlw	128
  8959  00274C  201C               	addwfc	??___ftge+2,w,c
  8960  00274E  6E16               	movwf	___ftge@ff1+2,c
  8961  002750                     l908:
  8962  002750  AE19               	btfss	___ftge@ff2+2,7,c
  8963  002752  D016               	goto	l909
  8964  002754  C017  F01A         	movff	___ftge@ff2,??___ftge
  8965  002758  C018  F01B         	movff	___ftge@ff2+1,??___ftge+1
  8966  00275C  C019  F01C         	movff	___ftge@ff2+2,??___ftge+2
  8967  002760  1E1A               	comf	??___ftge,f,c
  8968  002762  1E1B               	comf	??___ftge+1,f,c
  8969  002764  1E1C               	comf	??___ftge+2,f,c
  8970  002766  2A1A               	incf	??___ftge,f,c
  8971  002768  0E00               	movlw	0
  8972  00276A  221B               	addwfc	??___ftge+1,f,c
  8973  00276C  221C               	addwfc	??___ftge+2,f,c
  8974  00276E  0E00               	movlw	0
  8975  002770  241A               	addwf	??___ftge,w,c
  8976  002772  6E17               	movwf	___ftge@ff2,c
  8977  002774  0E00               	movlw	0
  8978  002776  201B               	addwfc	??___ftge+1,w,c
  8979  002778  6E18               	movwf	___ftge@ff2+1,c
  8980  00277A  0E80               	movlw	128
  8981  00277C  201C               	addwfc	??___ftge+2,w,c
  8982  00277E  6E19               	movwf	___ftge@ff2+2,c
  8983  002780                     l909:
  8984  002780  0E00               	movlw	0
  8985  002782  1A14               	xorwf	___ftge@ff1,f,c
  8986  002784  0E00               	movlw	0
  8987  002786  1A15               	xorwf	___ftge@ff1+1,f,c
  8988  002788  0E80               	movlw	128
  8989  00278A  1A16               	xorwf	___ftge@ff1+2,f,c
  8990  00278C  0E00               	movlw	0
  8991  00278E  1A17               	xorwf	___ftge@ff2,f,c
  8992  002790  0E00               	movlw	0
  8993  002792  1A18               	xorwf	___ftge@ff2+1,f,c
  8994  002794  0E80               	movlw	128
  8995  002796  1A19               	xorwf	___ftge@ff2+2,f,c
  8996  002798  5017               	movf	___ftge@ff2,w,c
  8997  00279A  5C14               	subwf	___ftge@ff1,w,c
  8998  00279C  5018               	movf	___ftge@ff2+1,w,c
  8999  00279E  5815               	subwfb	___ftge@ff1+1,w,c
  9000  0027A0  5019               	movf	___ftge@ff2+2,w,c
  9001  0027A2  5816               	subwfb	___ftge@ff1+2,w,c
  9002  0027A4  B0D8               	btfsc	status,0,c
  9003  0027A6  D002               	goto	l3048
  9004  0027A8  90D8               	bcf	status,0,c
  9005  0027AA  0012               	return	
  9006  0027AC                     l3048:
  9007  0027AC  80D8               	bsf	status,0,c
  9008  0027AE  0012               	return	
  9009  0027B0                     __end_of___ftge:
  9010                           	opt stack 0
  9011                           tblptru	equ	0xFF8
  9012                           tblptrh	equ	0xFF7
  9013                           tblptrl	equ	0xFF6
  9014                           tablat	equ	0xFF5
  9015                           prodh	equ	0xFF4
  9016                           prodl	equ	0xFF3
  9017                           postinc0	equ	0xFEE
  9018                           wreg	equ	0xFE8
  9019                           postdec1	equ	0xFE5
  9020                           fsr1l	equ	0xFE1
  9021                           indf2	equ	0xFDF
  9022                           postinc2	equ	0xFDE
  9023                           postdec2	equ	0xFDD
  9024                           fsr2h	equ	0xFDA
  9025                           fsr2l	equ	0xFD9
  9026                           status	equ	0xFD8
  9027                           
  9028 ;; *************** function _setupSerial *****************
  9029 ;; Defined at:
  9030 ;;		line 3 in file "my_s.c"
  9031 ;; Parameters:    Size  Location     Type
  9032 ;;		None
  9033 ;; Auto vars:     Size  Location     Type
  9034 ;;  dummy           1   19[COMRAM] unsigned char 
  9035 ;; Return value:  Size  Location     Type
  9036 ;;                  1    wreg      void 
  9037 ;; Registers used:
  9038 ;;		wreg, status,2
  9039 ;; Tracked objects:
  9040 ;;		On entry : 0/0
  9041 ;;		On exit  : 0/0
  9042 ;;		Unchanged: 0/0
  9043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9047 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9048 ;;Total ram usage:        1 bytes
  9049 ;; Hardware stack levels used:    1
  9050 ;; Hardware stack levels required when called:    2
  9051 ;; This function calls:
  9052 ;;		Nothing
  9053 ;; This function is called by:
  9054 ;;		_main
  9055 ;; This function uses a non-reentrant model
  9056 ;;
  9057                           
  9058                           	psect	text18
  9059  002ED2                     __ptext18:
  9060                           	opt stack 0
  9061  002ED2                     _setupSerial:
  9062                           	opt stack 28
  9063                           
  9064                           ;my_s.c: 4: unsigned char dummy;
  9065                           ;my_s.c: 5: BAUDCONbits.BRG16 = 0;
  9066                           
  9067                           ;incstack = 0
  9068  002ED2  96B8               	bcf	4024,3,c	;volatile
  9069                           
  9070                           ;my_s.c: 6: TXSTA = 0;
  9071  002ED4  0E00               	movlw	0
  9072  002ED6  6EAC               	movwf	4012,c	;volatile
  9073                           
  9074                           ;my_s.c: 7: SPBRG = 25;
  9075  002ED8  0E19               	movlw	25
  9076  002EDA  6EAF               	movwf	4015,c	;volatile
  9077                           
  9078                           ;my_s.c: 8: SPBRGH = 0;
  9079  002EDC  0E00               	movlw	0
  9080  002EDE  6EB0               	movwf	4016,c	;volatile
  9081                           
  9082                           ;my_s.c: 9: TXSTAbits.BRGH = 1;
  9083  002EE0  84AC               	bsf	4012,2,c	;volatile
  9084                           
  9085                           ;my_s.c: 10: TXSTAbits.TXEN = 1;
  9086  002EE2  8AAC               	bsf	4012,5,c	;volatile
  9087                           
  9088                           ;my_s.c: 12: RCSTA = 0;
  9089  002EE4  0E00               	movlw	0
  9090  002EE6  6EAB               	movwf	4011,c	;volatile
  9091                           
  9092                           ;my_s.c: 13: RCSTAbits.CREN = 1;
  9093  002EE8  88AB               	bsf	4011,4,c	;volatile
  9094                           
  9095                           ;my_s.c: 14: RCSTAbits.SPEN = 1;
  9096  002EEA  8EAB               	bsf	4011,7,c	;volatile
  9097                           
  9098                           ;my_s.c: 15: ;
  9099                           ;my_s.c: 16: dummy = RCREG;
  9100  002EEC  CFAE F014          	movff	4014,setupSerial@dummy	;volatile
  9101                           
  9102                           ;my_s.c: 17: dummy = RCREG;
  9103  002EF0  CFAE F014          	movff	4014,setupSerial@dummy	;volatile
  9104  002EF4  0012               	return	
  9105  002EF6                     __end_of_setupSerial:
  9106                           	opt stack 0
  9107                           tblptru	equ	0xFF8
  9108                           tblptrh	equ	0xFF7
  9109                           tblptrl	equ	0xFF6
  9110                           tablat	equ	0xFF5
  9111                           prodh	equ	0xFF4
  9112                           prodl	equ	0xFF3
  9113                           postinc0	equ	0xFEE
  9114                           wreg	equ	0xFE8
  9115                           postdec1	equ	0xFE5
  9116                           fsr1l	equ	0xFE1
  9117                           indf2	equ	0xFDF
  9118                           postinc2	equ	0xFDE
  9119                           postdec2	equ	0xFDD
  9120                           fsr2h	equ	0xFDA
  9121                           fsr2l	equ	0xFD9
  9122                           status	equ	0xFD8
  9123                           
  9124 ;; *************** function _setupPorts *****************
  9125 ;; Defined at:
  9126 ;;		line 153 in file "HW_CLK.c"
  9127 ;; Parameters:    Size  Location     Type
  9128 ;;		None
  9129 ;; Auto vars:     Size  Location     Type
  9130 ;;		None
  9131 ;; Return value:  Size  Location     Type
  9132 ;;                  1    wreg      void 
  9133 ;; Registers used:
  9134 ;;		wreg, status,2
  9135 ;; Tracked objects:
  9136 ;;		On entry : 0/0
  9137 ;;		On exit  : 0/0
  9138 ;;		Unchanged: 0/0
  9139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;Total ram usage:        0 bytes
  9145 ;; Hardware stack levels used:    1
  9146 ;; Hardware stack levels required when called:    2
  9147 ;; This function calls:
  9148 ;;		Nothing
  9149 ;; This function is called by:
  9150 ;;		_main
  9151 ;; This function uses a non-reentrant model
  9152 ;;
  9153                           
  9154                           	psect	text19
  9155  002F5A                     __ptext19:
  9156                           	opt stack 0
  9157  002F5A                     _setupPorts:
  9158                           	opt stack 28
  9159                           
  9160                           ;HW_CLK.c: 155: ADCON0 = 0;
  9161                           
  9162                           ;incstack = 0
  9163  002F5A  0E00               	movlw	0
  9164  002F5C  6EC2               	movwf	4034,c	;volatile
  9165                           
  9166                           ;HW_CLK.c: 156: ADCON1 = 0b00001100;
  9167  002F5E  0E0C               	movlw	12
  9168  002F60  6EC1               	movwf	4033,c	;volatile
  9169                           
  9170                           ;HW_CLK.c: 158: TRISB = 0xFF;
  9171  002F62  6893               	setf	3987,c	;volatile
  9172                           
  9173                           ;HW_CLK.c: 159: TRISC = 0x80;
  9174  002F64  0E80               	movlw	128
  9175  002F66  6E94               	movwf	3988,c	;volatile
  9176                           
  9177                           ;HW_CLK.c: 160: TRISA = 0xFF;
  9178  002F68  6892               	setf	3986,c	;volatile
  9179                           
  9180                           ;HW_CLK.c: 161: TRISD = 0x00;
  9181  002F6A  0E00               	movlw	0
  9182  002F6C  6E95               	movwf	3989,c	;volatile
  9183                           
  9184                           ;HW_CLK.c: 162: TRISE = 0x00;
  9185  002F6E  0E00               	movlw	0
  9186  002F70  6E96               	movwf	3990,c	;volatile
  9187  002F72  0012               	return		;funcret
  9188  002F74                     __end_of_setupPorts:
  9189                           	opt stack 0
  9190                           tblptru	equ	0xFF8
  9191                           tblptrh	equ	0xFF7
  9192                           tblptrl	equ	0xFF6
  9193                           tablat	equ	0xFF5
  9194                           prodh	equ	0xFF4
  9195                           prodl	equ	0xFF3
  9196                           postinc0	equ	0xFEE
  9197                           wreg	equ	0xFE8
  9198                           postdec1	equ	0xFE5
  9199                           fsr1l	equ	0xFE1
  9200                           indf2	equ	0xFDF
  9201                           postinc2	equ	0xFDE
  9202                           postdec2	equ	0xFDD
  9203                           fsr2h	equ	0xFDA
  9204                           fsr2l	equ	0xFD9
  9205                           status	equ	0xFD8
  9206                           
  9207 ;; *************** function _send_string_no_lib *****************
  9208 ;; Defined at:
  9209 ;;		line 47 in file "my_s.c"
  9210 ;; Parameters:    Size  Location     Type
  9211 ;;  p               2   20[COMRAM] PTR unsigned char 
  9212 ;;		 -> STR_29(8), STR_28(7), STR_27(8), STR_26(7), 
  9213 ;;		 -> STR_25(8), STR_24(7), STR_23(8), STR_22(7), 
  9214 ;;		 -> STR_21(8), STR_20(7), STR_19(8), STR_18(7), 
  9215 ;;		 -> STR_17(8), STR_16(7), STR_15(8), STR_14(7), 
  9216 ;;		 -> STR_13(5), STR_12(4), STR_11(5), STR_10(4), 
  9217 ;;		 -> main@Buffer(32), 
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;		None
  9220 ;; Return value:  Size  Location     Type
  9221 ;;                  1    wreg      void 
  9222 ;; Registers used:
  9223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9224 ;; Tracked objects:
  9225 ;;		On entry : 0/0
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9229 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;Total ram usage:        2 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    3
  9236 ;; This function calls:
  9237 ;;		_send_byte_no_lib
  9238 ;; This function is called by:
  9239 ;;		_main
  9240 ;; This function uses a non-reentrant model
  9241 ;;
  9242                           
  9243                           	psect	text20
  9244  002BB2                     __ptext20:
  9245                           	opt stack 0
  9246  002BB2                     _send_string_no_lib:
  9247                           	opt stack 27
  9248                           
  9249                           ;my_s.c: 48: while (*p) {
  9250                           
  9251                           ;incstack = 0
  9252  002BB2  D015               	goto	l43
  9253  002BB4                     
  9254                           ;my_s.c: 49: send_byte_no_lib(*p);
  9255  002BB4  C015  FFF6         	movff	send_string_no_lib@p,tblptrl
  9256  002BB8  C016  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  9257  002BBC  0E00               	movlw	low (__mediumconst shr (0+16))
  9258  002BBE  6EF8               	movwf	tblptru,c
  9259  002BC0  0E0F               	movlw	(high __ramtop+-1)
  9260  002BC2  64F7               	cpfsgt	tblptrh,c
  9261  002BC4  D003               	bra	u4047
  9262  002BC6  0008               	tblrd		*
  9263  002BC8  50F5               	movf	tablat,w,c
  9264  002BCA  D005               	bra	u4040
  9265  002BCC                     u4047:
  9266  002BCC  CFF6 FFE9          	movff	tblptrl,fsr0l
  9267  002BD0  CFF7 FFEA          	movff	tblptrh,fsr0h
  9268  002BD4  50EF               	movf	indf0,w,c
  9269  002BD6                     u4040:
  9270  002BD6  ECE6  F017         	call	_send_byte_no_lib
  9271                           
  9272                           ;my_s.c: 50: p++;
  9273  002BDA  4A15               	infsnz	send_string_no_lib@p,f,c
  9274  002BDC  2A16               	incf	send_string_no_lib@p+1,f,c
  9275  002BDE                     l43:
  9276  002BDE  C015  FFF6         	movff	send_string_no_lib@p,tblptrl
  9277  002BE2  C016  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  9278  002BE6  0E00               	movlw	low (__mediumconst shr (0+16))
  9279  002BE8  6EF8               	movwf	tblptru,c
  9280  002BEA  0E0F               	movlw	(high __ramtop+-1)
  9281  002BEC  64F7               	cpfsgt	tblptrh,c
  9282  002BEE  D003               	bra	u4057
  9283  002BF0  0008               	tblrd		*
  9284  002BF2  50F5               	movf	tablat,w,c
  9285  002BF4  D005               	bra	u4050
  9286  002BF6                     u4057:
  9287  002BF6  CFF6 FFE9          	movff	tblptrl,fsr0l
  9288  002BFA  CFF7 FFEA          	movff	tblptrh,fsr0h
  9289  002BFE  50EF               	movf	indf0,w,c
  9290  002C00                     u4050:
  9291  002C00  0900               	iorlw	0
  9292  002C02  B4D8               	btfsc	status,2,c
  9293  002C04  0012               	return	
  9294  002C06  D7D6               	goto	l44
  9295  002C08                     __end_of_send_string_no_lib:
  9296                           	opt stack 0
  9297                           tblptru	equ	0xFF8
  9298                           tblptrh	equ	0xFF7
  9299                           tblptrl	equ	0xFF6
  9300                           tablat	equ	0xFF5
  9301                           prodh	equ	0xFF4
  9302                           prodl	equ	0xFF3
  9303                           indf0	equ	0xFEF
  9304                           postinc0	equ	0xFEE
  9305                           fsr0h	equ	0xFEA
  9306                           fsr0l	equ	0xFE9
  9307                           wreg	equ	0xFE8
  9308                           postdec1	equ	0xFE5
  9309                           fsr1l	equ	0xFE1
  9310                           indf2	equ	0xFDF
  9311                           postinc2	equ	0xFDE
  9312                           postdec2	equ	0xFDD
  9313                           fsr2h	equ	0xFDA
  9314                           fsr2l	equ	0xFD9
  9315                           status	equ	0xFD8
  9316                           
  9317 ;; *************** function _send_byte_no_lib *****************
  9318 ;; Defined at:
  9319 ;;		line 39 in file "my_s.c"
  9320 ;; Parameters:    Size  Location     Type
  9321 ;;  c               1    wreg     unsigned char 
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;  c               1   19[COMRAM] unsigned char 
  9324 ;; Return value:  Size  Location     Type
  9325 ;;                  1    wreg      void 
  9326 ;; Registers used:
  9327 ;;		wreg
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9334 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9336 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9337 ;;Total ram usage:        1 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:    2
  9340 ;; This function calls:
  9341 ;;		Nothing
  9342 ;; This function is called by:
  9343 ;;		_send_string_no_lib
  9344 ;; This function uses a non-reentrant model
  9345 ;;
  9346                           
  9347                           	psect	text21
  9348  002FCC                     __ptext21:
  9349                           	opt stack 0
  9350  002FCC                     _send_byte_no_lib:
  9351                           	opt stack 27
  9352                           
  9353                           ;incstack = 0
  9354                           ;send_byte_no_lib@c stored from wreg
  9355  002FCC  6E14               	movwf	send_byte_no_lib@c,c
  9356                           
  9357                           ;my_s.c: 40: while (!TXSTAbits.TRMT)
  9358  002FCE  D001               	goto	l37
  9359  002FD0                     l38:
  9360  002FD0  0004               	clrwdt		;# 
  9361  002FD2                     l37:
  9362  002FD2  A2AC               	btfss	4012,1,c	;volatile
  9363  002FD4  D7FD               	goto	l38
  9364                           
  9365                           ;my_s.c: 43: }
  9366                           ;my_s.c: 44: TXREG = c;
  9367  002FD6  C014  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  9368  002FDA  0012               	return		;funcret
  9369  002FDC                     __end_of_send_byte_no_lib:
  9370                           	opt stack 0
  9371                           tblptru	equ	0xFF8
  9372                           tblptrh	equ	0xFF7
  9373                           tblptrl	equ	0xFF6
  9374                           tablat	equ	0xFF5
  9375                           prodh	equ	0xFF4
  9376                           prodl	equ	0xFF3
  9377                           indf0	equ	0xFEF
  9378                           postinc0	equ	0xFEE
  9379                           fsr0h	equ	0xFEA
  9380                           fsr0l	equ	0xFE9
  9381                           wreg	equ	0xFE8
  9382                           postdec1	equ	0xFE5
  9383                           fsr1l	equ	0xFE1
  9384                           indf2	equ	0xFDF
  9385                           postinc2	equ	0xFDE
  9386                           postdec2	equ	0xFDD
  9387                           fsr2h	equ	0xFDA
  9388                           fsr2l	equ	0xFD9
  9389                           status	equ	0xFD8
  9390                           
  9391 ;; *************** function _read_adc_voltage *****************
  9392 ;; Defined at:
  9393 ;;		line 48 in file "my_adc.c"
  9394 ;; Parameters:    Size  Location     Type
  9395 ;;  channel         1    wreg     unsigned char 
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;  channel         1   64[COMRAM] unsigned char 
  9398 ;;  voltage         3   61[COMRAM] float 
  9399 ;;  raw_value       2   65[COMRAM] int 
  9400 ;; Return value:  Size  Location     Type
  9401 ;;                  3   58[COMRAM] float 
  9402 ;; Registers used:
  9403 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9404 ;; Tracked objects:
  9405 ;;		On entry : 0/0
  9406 ;;		On exit  : 0/0
  9407 ;;		Unchanged: 0/0
  9408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9409 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9410 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9412 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9413 ;;Total ram usage:        9 bytes
  9414 ;; Hardware stack levels used:    1
  9415 ;; Hardware stack levels required when called:    4
  9416 ;; This function calls:
  9417 ;;		___awtoft
  9418 ;;		___ftdiv
  9419 ;;		___wmul
  9420 ;;		_read_adc_raw_no_lib
  9421 ;; This function is called by:
  9422 ;;		_main
  9423 ;; This function uses a non-reentrant model
  9424 ;;
  9425                           
  9426                           	psect	text22
  9427  002A8E                     __ptext22:
  9428                           	opt stack 0
  9429  002A8E                     _read_adc_voltage:
  9430                           	opt stack 26
  9431                           
  9432                           ;incstack = 0
  9433                           ;read_adc_voltage@channel stored from wreg
  9434  002A8E  6E41               	movwf	read_adc_voltage@channel,c
  9435                           
  9436                           ;my_adc.c: 49: int raw_value;
  9437                           ;my_adc.c: 50: float voltage;
  9438                           ;my_adc.c: 51: raw_value = read_adc_raw_no_lib(channel);
  9439  002A90  5041               	movf	read_adc_voltage@channel,w,c
  9440  002A92  ECE1  F016         	call	_read_adc_raw_no_lib
  9441  002A96  C014  F042         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  9442  002A9A  C015  F043         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  9443                           
  9444                           ;my_adc.c: 52: voltage = (raw_value * 5) / 1023.0;
  9445  002A9E  C042  F022         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  9446  002AA2  C043  F023         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  9447  002AA6  0E00               	movlw	0
  9448  002AA8  6E25               	movwf	___wmul@multiplicand+1,c
  9449  002AAA  0E05               	movlw	5
  9450  002AAC  6E24               	movwf	___wmul@multiplicand,c
  9451  002AAE  EC31  F017         	call	___wmul	;wreg free
  9452  002AB2  C022  F028         	movff	?___wmul,___awtoft@c
  9453  002AB6  C023  F029         	movff	?___wmul+1,___awtoft@c+1
  9454  002ABA  ECFE  F016         	call	___awtoft	;wreg free
  9455  002ABE  C028  F02C         	movff	?___awtoft,___ftdiv@f1
  9456  002AC2  C029  F02D         	movff	?___awtoft+1,___ftdiv@f1+1
  9457  002AC6  C02A  F02E         	movff	?___awtoft+2,___ftdiv@f1+2
  9458  002ACA  0EC0               	movlw	192
  9459  002ACC  6E2F               	movwf	___ftdiv@f2,c
  9460  002ACE  0E7F               	movlw	127
  9461  002AD0  6E30               	movwf	___ftdiv@f2+1,c
  9462  002AD2  0E44               	movlw	68
  9463  002AD4  6E31               	movwf	___ftdiv@f2+2,c
  9464  002AD6  ECA8  F011         	call	___ftdiv	;wreg free
  9465  002ADA  C02C  F03E         	movff	?___ftdiv,read_adc_voltage@voltage
  9466  002ADE  C02D  F03F         	movff	?___ftdiv+1,read_adc_voltage@voltage+1
  9467  002AE2  C02E  F040         	movff	?___ftdiv+2,read_adc_voltage@voltage+2
  9468                           
  9469                           ;my_adc.c: 53: return voltage;
  9470  002AE6  C03E  F03B         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  9471  002AEA  C03F  F03C         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  9472  002AEE  C040  F03D         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  9473  002AF2  0012               	return	
  9474  002AF4                     __end_of_read_adc_voltage:
  9475                           	opt stack 0
  9476                           tblptru	equ	0xFF8
  9477                           tblptrh	equ	0xFF7
  9478                           tblptrl	equ	0xFF6
  9479                           tablat	equ	0xFF5
  9480                           prodh	equ	0xFF4
  9481                           prodl	equ	0xFF3
  9482                           indf0	equ	0xFEF
  9483                           postinc0	equ	0xFEE
  9484                           fsr0h	equ	0xFEA
  9485                           fsr0l	equ	0xFE9
  9486                           wreg	equ	0xFE8
  9487                           postdec1	equ	0xFE5
  9488                           fsr1l	equ	0xFE1
  9489                           indf2	equ	0xFDF
  9490                           postinc2	equ	0xFDE
  9491                           postdec2	equ	0xFDD
  9492                           fsr2h	equ	0xFDA
  9493                           fsr2l	equ	0xFD9
  9494                           status	equ	0xFD8
  9495                           
  9496 ;; *************** function _read_adc_raw_no_lib *****************
  9497 ;; Defined at:
  9498 ;;		line 32 in file "my_adc.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;  channel         1    wreg     unsigned char 
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;  channel         1   25[COMRAM] unsigned char 
  9503 ;;  raw_value       2   23[COMRAM] int 
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  2   19[COMRAM] int 
  9506 ;; Registers used:
  9507 ;;		wreg, status,2, status,0
  9508 ;; Tracked objects:
  9509 ;;		On entry : 0/0
  9510 ;;		On exit  : 0/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9513 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9514 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9515 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;Total ram usage:        7 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:    2
  9520 ;; This function calls:
  9521 ;;		Nothing
  9522 ;; This function is called by:
  9523 ;;		_read_adc_voltage
  9524 ;; This function uses a non-reentrant model
  9525 ;;
  9526                           
  9527                           	psect	text23
  9528  002DC2                     __ptext23:
  9529                           	opt stack 0
  9530  002DC2                     _read_adc_raw_no_lib:
  9531                           	opt stack 27
  9532                           
  9533                           ;incstack = 0
  9534                           ;read_adc_raw_no_lib@channel stored from wreg
  9535  002DC2  6E1A               	movwf	read_adc_raw_no_lib@channel,c
  9536                           
  9537                           ;my_adc.c: 33: int raw_value;
  9538                           ;my_adc.c: 34: ADCON0bits.CHS = channel;
  9539  002DC4  C01A  F016         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  9540  002DC8  4616               	rlncf	??_read_adc_raw_no_lib,f,c
  9541  002DCA  4616               	rlncf	??_read_adc_raw_no_lib,f,c
  9542  002DCC  50C2               	movf	4034,w,c	;volatile
  9543  002DCE  1816               	xorwf	??_read_adc_raw_no_lib,w,c
  9544  002DD0  0BC3               	andlw	-61
  9545  002DD2  1816               	xorwf	??_read_adc_raw_no_lib,w,c
  9546  002DD4  6EC2               	movwf	4034,c	;volatile
  9547                           
  9548                           ;my_adc.c: 37: ADCON0bits.GO = 1;
  9549  002DD6  82C2               	bsf	4034,1,c	;volatile
  9550  002DD8  B2C2               	btfsc	4034,1,c	;volatile
  9551  002DDA  D7FE               	goto	l128
  9552                           
  9553                           ;my_adc.c: 41: raw_value = ADRESH << 8 | ADRESL;
  9554  002DDC  50C3               	movf	4035,w,c	;volatile
  9555  002DDE  CFC4 F016          	movff	4036,??_read_adc_raw_no_lib	;volatile
  9556  002DE2  6A17               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  9557  002DE4  C016  F017         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  9558  002DE8  6A16               	clrf	??_read_adc_raw_no_lib,c
  9559  002DEA  1016               	iorwf	??_read_adc_raw_no_lib,w,c
  9560  002DEC  6E18               	movwf	read_adc_raw_no_lib@raw_value,c
  9561  002DEE  5017               	movf	??_read_adc_raw_no_lib+1,w,c
  9562  002DF0  6E19               	movwf	read_adc_raw_no_lib@raw_value+1,c
  9563                           
  9564                           ;my_adc.c: 45: return raw_value;
  9565  002DF2  C018  F014         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  9566  002DF6  C019  F015         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  9567  002DFA  0012               	return	
  9568  002DFC                     __end_of_read_adc_raw_no_lib:
  9569                           	opt stack 0
  9570                           tblptru	equ	0xFF8
  9571                           tblptrh	equ	0xFF7
  9572                           tblptrl	equ	0xFF6
  9573                           tablat	equ	0xFF5
  9574                           prodh	equ	0xFF4
  9575                           prodl	equ	0xFF3
  9576                           indf0	equ	0xFEF
  9577                           postinc0	equ	0xFEE
  9578                           fsr0h	equ	0xFEA
  9579                           fsr0l	equ	0xFE9
  9580                           wreg	equ	0xFE8
  9581                           postdec1	equ	0xFE5
  9582                           fsr1l	equ	0xFE1
  9583                           indf2	equ	0xFDF
  9584                           postinc2	equ	0xFDE
  9585                           postdec2	equ	0xFDD
  9586                           fsr2h	equ	0xFDA
  9587                           fsr2l	equ	0xFD9
  9588                           status	equ	0xFD8
  9589                           
  9590 ;; *************** function ___wmul *****************
  9591 ;; Defined at:
  9592 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9593 ;; Parameters:    Size  Location     Type
  9594 ;;  multiplier      2   33[COMRAM] unsigned int 
  9595 ;;  multiplicand    2   35[COMRAM] unsigned int 
  9596 ;; Auto vars:     Size  Location     Type
  9597 ;;  product         2   37[COMRAM] unsigned int 
  9598 ;; Return value:  Size  Location     Type
  9599 ;;                  2   33[COMRAM] unsigned int 
  9600 ;; Registers used:
  9601 ;;		wreg, status,2, status,0, prodl, prodh
  9602 ;; Tracked objects:
  9603 ;;		On entry : 0/0
  9604 ;;		On exit  : 0/0
  9605 ;;		Unchanged: 0/0
  9606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9607 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9608 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9610 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9611 ;;Total ram usage:        6 bytes
  9612 ;; Hardware stack levels used:    1
  9613 ;; Hardware stack levels required when called:    2
  9614 ;; This function calls:
  9615 ;;		Nothing
  9616 ;; This function is called by:
  9617 ;;		_read_adc_voltage
  9618 ;;		_fround
  9619 ;;		_scale
  9620 ;;		_sprintf
  9621 ;; This function uses a non-reentrant model
  9622 ;;
  9623                           
  9624                           	psect	text24
  9625  002E62                     __ptext24:
  9626                           	opt stack 0
  9627  002E62                     ___wmul:
  9628                           	opt stack 26
  9629                           
  9630                           ;incstack = 0
  9631  002E62  5022               	movf	___wmul@multiplier,w,c
  9632  002E64  0224               	mulwf	___wmul@multiplicand,c
  9633  002E66  CFF3 F026          	movff	prodl,___wmul@product
  9634  002E6A  CFF4 F027          	movff	prodh,___wmul@product+1
  9635  002E6E  5022               	movf	___wmul@multiplier,w,c
  9636  002E70  0225               	mulwf	___wmul@multiplicand+1,c
  9637  002E72  50F3               	movf	prodl,w,c
  9638  002E74  2627               	addwf	___wmul@product+1,f,c
  9639  002E76  5023               	movf	___wmul@multiplier+1,w,c
  9640  002E78  0224               	mulwf	___wmul@multiplicand,c
  9641  002E7A  50F3               	movf	prodl,w,c
  9642  002E7C  2627               	addwf	___wmul@product+1,f,c
  9643  002E7E  C026  F022         	movff	___wmul@product,?___wmul
  9644  002E82  C027  F023         	movff	___wmul@product+1,?___wmul+1
  9645  002E86  0012               	return	
  9646  002E88                     __end_of___wmul:
  9647                           	opt stack 0
  9648                           tblptru	equ	0xFF8
  9649                           tblptrh	equ	0xFF7
  9650                           tblptrl	equ	0xFF6
  9651                           tablat	equ	0xFF5
  9652                           prodh	equ	0xFF4
  9653                           prodl	equ	0xFF3
  9654                           indf0	equ	0xFEF
  9655                           postinc0	equ	0xFEE
  9656                           fsr0h	equ	0xFEA
  9657                           fsr0l	equ	0xFE9
  9658                           wreg	equ	0xFE8
  9659                           postdec1	equ	0xFE5
  9660                           fsr1l	equ	0xFE1
  9661                           indf2	equ	0xFDF
  9662                           postinc2	equ	0xFDE
  9663                           postdec2	equ	0xFDD
  9664                           fsr2h	equ	0xFDA
  9665                           fsr2l	equ	0xFD9
  9666                           status	equ	0xFD8
  9667                           
  9668 ;; *************** function ___ftdiv *****************
  9669 ;; Defined at:
  9670 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  9671 ;; Parameters:    Size  Location     Type
  9672 ;;  f1              3   43[COMRAM] float 
  9673 ;;  f2              3   46[COMRAM] float 
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;  f3              3   53[COMRAM] float 
  9676 ;;  sign            1   57[COMRAM] unsigned char 
  9677 ;;  exp             1   56[COMRAM] unsigned char 
  9678 ;;  cntr            1   52[COMRAM] unsigned char 
  9679 ;; Return value:  Size  Location     Type
  9680 ;;                  3   43[COMRAM] float 
  9681 ;; Registers used:
  9682 ;;		wreg, status,2, status,0, cstack
  9683 ;; Tracked objects:
  9684 ;;		On entry : 0/0
  9685 ;;		On exit  : 0/0
  9686 ;;		Unchanged: 0/0
  9687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9688 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9689 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9690 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9691 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9692 ;;Total ram usage:       15 bytes
  9693 ;; Hardware stack levels used:    1
  9694 ;; Hardware stack levels required when called:    3
  9695 ;; This function calls:
  9696 ;;		___ftpack
  9697 ;; This function is called by:
  9698 ;;		_read_adc_voltage
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702                           	psect	text25
  9703  002350                     __ptext25:
  9704                           	opt stack 0
  9705  002350                     ___ftdiv:
  9706                           	opt stack 26
  9707                           
  9708                           ;incstack = 0
  9709  002350  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  9710  002354  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9711  002356  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9712  002358  342D               	rlcf	___ftdiv@f1+1,w,c
  9713  00235A  3632               	rlcf	??___ftdiv& (0+255),f,c
  9714  00235C  E301               	bnc	u6511
  9715  00235E  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9716  002360                     u6511:
  9717  002360  5032               	movf	??___ftdiv,w,c
  9718  002362  6E39               	movwf	___ftdiv@exp,c
  9719  002364  5039               	movf	___ftdiv@exp,w,c
  9720  002366  A4D8               	btfss	status,2,c
  9721  002368  D007               	goto	l883
  9722  00236A  0E00               	movlw	0
  9723  00236C  6E2C               	movwf	?___ftdiv,c
  9724  00236E  0E00               	movlw	0
  9725  002370  6E2D               	movwf	?___ftdiv+1,c
  9726  002372  0E00               	movlw	0
  9727  002374  6E2E               	movwf	?___ftdiv+2,c
  9728  002376  0012               	return	
  9729  002378                     l883:
  9730  002378  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  9731  00237C  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9732  00237E  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9733  002380  3430               	rlcf	___ftdiv@f2+1,w,c
  9734  002382  3632               	rlcf	??___ftdiv& (0+255),f,c
  9735  002384  E301               	bnc	u6531
  9736  002386  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9737  002388                     u6531:
  9738  002388  5032               	movf	??___ftdiv,w,c
  9739  00238A  6E3A               	movwf	___ftdiv@sign,c
  9740  00238C  503A               	movf	___ftdiv@sign,w,c
  9741  00238E  A4D8               	btfss	status,2,c
  9742  002390  D007               	goto	l885
  9743  002392  0E00               	movlw	0
  9744  002394  6E2C               	movwf	?___ftdiv,c
  9745  002396  0E00               	movlw	0
  9746  002398  6E2D               	movwf	?___ftdiv+1,c
  9747  00239A  0E00               	movlw	0
  9748  00239C  6E2E               	movwf	?___ftdiv+2,c
  9749  00239E  0012               	return	
  9750  0023A0                     l885:
  9751  0023A0  0E00               	movlw	0
  9752  0023A2  6E36               	movwf	___ftdiv@f3,c
  9753  0023A4  0E00               	movlw	0
  9754  0023A6  6E37               	movwf	___ftdiv@f3+1,c
  9755  0023A8  0E00               	movlw	0
  9756  0023AA  6E38               	movwf	___ftdiv@f3+2,c
  9757  0023AC  503A               	movf	___ftdiv@sign,w,c
  9758  0023AE  0F89               	addlw	137
  9759  0023B0  5E39               	subwf	___ftdiv@exp,f,c
  9760  0023B2  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  9761  0023B6  5031               	movf	___ftdiv@f2+2,w,c
  9762  0023B8  1A3A               	xorwf	___ftdiv@sign,f,c
  9763  0023BA  0E80               	movlw	128
  9764  0023BC  163A               	andwf	___ftdiv@sign,f,c
  9765  0023BE  8E2D               	bsf	___ftdiv@f1+1,7,c
  9766  0023C0  0EFF               	movlw	255
  9767  0023C2  162C               	andwf	___ftdiv@f1,f,c
  9768  0023C4  0EFF               	movlw	255
  9769  0023C6  162D               	andwf	___ftdiv@f1+1,f,c
  9770  0023C8  0E00               	movlw	0
  9771  0023CA  162E               	andwf	___ftdiv@f1+2,f,c
  9772  0023CC  8E30               	bsf	___ftdiv@f2+1,7,c
  9773  0023CE  0EFF               	movlw	255
  9774  0023D0  162F               	andwf	___ftdiv@f2,f,c
  9775  0023D2  0EFF               	movlw	255
  9776  0023D4  1630               	andwf	___ftdiv@f2+1,f,c
  9777  0023D6  0E00               	movlw	0
  9778  0023D8  1631               	andwf	___ftdiv@f2+2,f,c
  9779  0023DA  0E18               	movlw	24
  9780  0023DC  6E35               	movwf	___ftdiv@cntr,c
  9781  0023DE  90D8               	bcf	status,0,c
  9782  0023E0  3636               	rlcf	___ftdiv@f3,f,c
  9783  0023E2  3637               	rlcf	___ftdiv@f3+1,f,c
  9784  0023E4  3638               	rlcf	___ftdiv@f3+2,f,c
  9785  0023E6  502F               	movf	___ftdiv@f2,w,c
  9786  0023E8  5C2C               	subwf	___ftdiv@f1,w,c
  9787  0023EA  5030               	movf	___ftdiv@f2+1,w,c
  9788  0023EC  582D               	subwfb	___ftdiv@f1+1,w,c
  9789  0023EE  5031               	movf	___ftdiv@f2+2,w,c
  9790  0023F0  582E               	subwfb	___ftdiv@f1+2,w,c
  9791  0023F2  A0D8               	btfss	status,0,c
  9792  0023F4  D007               	goto	l887
  9793  0023F6  502F               	movf	___ftdiv@f2,w,c
  9794  0023F8  5E2C               	subwf	___ftdiv@f1,f,c
  9795  0023FA  5030               	movf	___ftdiv@f2+1,w,c
  9796  0023FC  5A2D               	subwfb	___ftdiv@f1+1,f,c
  9797  0023FE  5031               	movf	___ftdiv@f2+2,w,c
  9798  002400  5A2E               	subwfb	___ftdiv@f1+2,f,c
  9799  002402  8036               	bsf	___ftdiv@f3,0,c
  9800  002404                     l887:
  9801  002404  90D8               	bcf	status,0,c
  9802  002406  362C               	rlcf	___ftdiv@f1,f,c
  9803  002408  362D               	rlcf	___ftdiv@f1+1,f,c
  9804  00240A  362E               	rlcf	___ftdiv@f1+2,f,c
  9805  00240C  2E35               	decfsz	___ftdiv@cntr,f,c
  9806  00240E  D7E7               	goto	l886
  9807  002410  C036  F014         	movff	___ftdiv@f3,___ftpack@arg
  9808  002414  C037  F015         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9809  002418  C038  F016         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9810  00241C  C039  F017         	movff	___ftdiv@exp,___ftpack@exp
  9811  002420  C03A  F018         	movff	___ftdiv@sign,___ftpack@sign
  9812  002424  ECE3  F012         	call	___ftpack	;wreg free
  9813  002428  C014  F02C         	movff	?___ftpack,?___ftdiv
  9814  00242C  C015  F02D         	movff	?___ftpack+1,?___ftdiv+1
  9815  002430  C016  F02E         	movff	?___ftpack+2,?___ftdiv+2
  9816  002434  0012               	return	
  9817  002436                     __end_of___ftdiv:
  9818                           	opt stack 0
  9819                           tblptru	equ	0xFF8
  9820                           tblptrh	equ	0xFF7
  9821                           tblptrl	equ	0xFF6
  9822                           tablat	equ	0xFF5
  9823                           prodh	equ	0xFF4
  9824                           prodl	equ	0xFF3
  9825                           indf0	equ	0xFEF
  9826                           postinc0	equ	0xFEE
  9827                           fsr0h	equ	0xFEA
  9828                           fsr0l	equ	0xFE9
  9829                           wreg	equ	0xFE8
  9830                           postdec1	equ	0xFE5
  9831                           fsr1l	equ	0xFE1
  9832                           indf2	equ	0xFDF
  9833                           postinc2	equ	0xFDE
  9834                           postdec2	equ	0xFDD
  9835                           fsr2h	equ	0xFDA
  9836                           fsr2l	equ	0xFD9
  9837                           status	equ	0xFD8
  9838                           
  9839 ;; *************** function ___awtoft *****************
  9840 ;; Defined at:
  9841 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  9842 ;; Parameters:    Size  Location     Type
  9843 ;;  c               2   39[COMRAM] int 
  9844 ;; Auto vars:     Size  Location     Type
  9845 ;;  sign            1   42[COMRAM] unsigned char 
  9846 ;; Return value:  Size  Location     Type
  9847 ;;                  3   39[COMRAM] float 
  9848 ;; Registers used:
  9849 ;;		wreg, status,2, status,0, cstack
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9855 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9859 ;;Total ram usage:        4 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:    3
  9862 ;; This function calls:
  9863 ;;		___ftpack
  9864 ;; This function is called by:
  9865 ;;		_read_adc_voltage
  9866 ;; This function uses a non-reentrant model
  9867 ;;
  9868                           
  9869                           	psect	text26
  9870  002DFC                     __ptext26:
  9871                           	opt stack 0
  9872  002DFC                     ___awtoft:
  9873                           	opt stack 26
  9874                           
  9875                           ;incstack = 0
  9876  002DFC  0E00               	movlw	0
  9877  002DFE  6E2B               	movwf	___awtoft@sign,c
  9878  002E00  AE29               	btfss	___awtoft@c+1,7,c
  9879  002E02  D006               	goto	l783
  9880  002E04  6C28               	negf	___awtoft@c,c
  9881  002E06  1E29               	comf	___awtoft@c+1,f,c
  9882  002E08  B0D8               	btfsc	status,0,c
  9883  002E0A  2A29               	incf	___awtoft@c+1,f,c
  9884  002E0C  0E01               	movlw	1
  9885  002E0E  6E2B               	movwf	___awtoft@sign,c
  9886  002E10                     l783:
  9887  002E10  C028  F014         	movff	___awtoft@c,___ftpack@arg
  9888  002E14  C029  F015         	movff	___awtoft@c+1,___ftpack@arg+1
  9889  002E18  6A16               	clrf	___ftpack@arg+2,c
  9890  002E1A  0E8E               	movlw	142
  9891  002E1C  6E17               	movwf	___ftpack@exp,c
  9892  002E1E  C02B  F018         	movff	___awtoft@sign,___ftpack@sign
  9893  002E22  ECE3  F012         	call	___ftpack	;wreg free
  9894  002E26  C014  F028         	movff	?___ftpack,?___awtoft
  9895  002E2A  C015  F029         	movff	?___ftpack+1,?___awtoft+1
  9896  002E2E  C016  F02A         	movff	?___ftpack+2,?___awtoft+2
  9897  002E32  0012               	return	
  9898  002E34                     __end_of___awtoft:
  9899                           	opt stack 0
  9900                           tblptru	equ	0xFF8
  9901                           tblptrh	equ	0xFF7
  9902                           tblptrl	equ	0xFF6
  9903                           tablat	equ	0xFF5
  9904                           prodh	equ	0xFF4
  9905                           prodl	equ	0xFF3
  9906                           indf0	equ	0xFEF
  9907                           postinc0	equ	0xFEE
  9908                           fsr0h	equ	0xFEA
  9909                           fsr0l	equ	0xFE9
  9910                           wreg	equ	0xFE8
  9911                           postdec1	equ	0xFE5
  9912                           fsr1l	equ	0xFE1
  9913                           indf2	equ	0xFDF
  9914                           postinc2	equ	0xFDE
  9915                           postdec2	equ	0xFDD
  9916                           fsr2h	equ	0xFDA
  9917                           fsr2l	equ	0xFD9
  9918                           status	equ	0xFD8
  9919                           
  9920 ;; *************** function ___ftpack *****************
  9921 ;; Defined at:
  9922 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9923 ;; Parameters:    Size  Location     Type
  9924 ;;  arg             3   19[COMRAM] unsigned um
  9925 ;;  exp             1   22[COMRAM] unsigned char 
  9926 ;;  sign            1   23[COMRAM] unsigned char 
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;		None
  9929 ;; Return value:  Size  Location     Type
  9930 ;;                  3   19[COMRAM] float 
  9931 ;; Registers used:
  9932 ;;		wreg, status,2, status,0
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9938 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9940 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9941 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9942 ;;Total ram usage:        8 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; Hardware stack levels required when called:    2
  9945 ;; This function calls:
  9946 ;;		Nothing
  9947 ;; This function is called by:
  9948 ;;		___awtoft
  9949 ;;		___ftadd
  9950 ;;		___ftdiv
  9951 ;;		___ftmul
  9952 ;;		___lltoft
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           	psect	text27
  9957  0025C6                     __ptext27:
  9958                           	opt stack 0
  9959  0025C6                     ___ftpack:
  9960                           	opt stack 25
  9961                           
  9962                           ;incstack = 0
  9963  0025C6  5017               	movf	___ftpack@exp,w,c
  9964  0025C8  B4D8               	btfsc	status,2,c
  9965  0025CA  D005               	goto	u5980
  9966  0025CC  5014               	movf	___ftpack@arg,w,c
  9967  0025CE  1015               	iorwf	___ftpack@arg+1,w,c
  9968  0025D0  1016               	iorwf	___ftpack@arg+2,w,c
  9969  0025D2  A4D8               	btfss	status,2,c
  9970  0025D4  D00C               	goto	l819
  9971  0025D6                     u5980:
  9972  0025D6  0E00               	movlw	0
  9973  0025D8  6E14               	movwf	?___ftpack,c
  9974  0025DA  0E00               	movlw	0
  9975  0025DC  6E15               	movwf	?___ftpack+1,c
  9976  0025DE  0E00               	movlw	0
  9977  0025E0  6E16               	movwf	?___ftpack+2,c
  9978  0025E2  0012               	return	
  9979  0025E4  2A17               	incf	___ftpack@exp,f,c
  9980  0025E6  90D8               	bcf	status,0,c
  9981  0025E8  3216               	rrcf	___ftpack@arg+2,f,c
  9982  0025EA  3215               	rrcf	___ftpack@arg+1,f,c
  9983  0025EC  3214               	rrcf	___ftpack@arg,f,c
  9984  0025EE                     l819:
  9985  0025EE  0E00               	movlw	0
  9986  0025F0  1414               	andwf	___ftpack@arg,w,c
  9987  0025F2  6E19               	movwf	??___ftpack& (0+255),c
  9988  0025F4  0E00               	movlw	0
  9989  0025F6  1415               	andwf	___ftpack@arg+1,w,c
  9990  0025F8  6E1A               	movwf	(??___ftpack+1)& (0+255),c
  9991  0025FA  0EFE               	movlw	254
  9992  0025FC  1416               	andwf	___ftpack@arg+2,w,c
  9993  0025FE  6E1B               	movwf	(??___ftpack+2)& (0+255),c
  9994  002600  5019               	movf	??___ftpack,w,c
  9995  002602  101A               	iorwf	??___ftpack+1,w,c
  9996  002604  101B               	iorwf	??___ftpack+2,w,c
  9997  002606  B4D8               	btfsc	status,2,c
  9998  002608  D00C               	goto	l822
  9999  00260A  D7EC               	goto	l820
 10000  00260C  2A17               	incf	___ftpack@exp,f,c
 10001  00260E  0E01               	movlw	1
 10002  002610  2614               	addwf	___ftpack@arg,f,c
 10003  002612  0E00               	movlw	0
 10004  002614  2215               	addwfc	___ftpack@arg+1,f,c
 10005  002616  0E00               	movlw	0
 10006  002618  2216               	addwfc	___ftpack@arg+2,f,c
 10007  00261A  90D8               	bcf	status,0,c
 10008  00261C  3216               	rrcf	___ftpack@arg+2,f,c
 10009  00261E  3215               	rrcf	___ftpack@arg+1,f,c
 10010  002620  3214               	rrcf	___ftpack@arg,f,c
 10011  002622                     l822:
 10012  002622  0E00               	movlw	0
 10013  002624  1414               	andwf	___ftpack@arg,w,c
 10014  002626  6E19               	movwf	??___ftpack& (0+255),c
 10015  002628  0E00               	movlw	0
 10016  00262A  1415               	andwf	___ftpack@arg+1,w,c
 10017  00262C  6E1A               	movwf	(??___ftpack+1)& (0+255),c
 10018  00262E  0EFF               	movlw	255
 10019  002630  1416               	andwf	___ftpack@arg+2,w,c
 10020  002632  6E1B               	movwf	(??___ftpack+2)& (0+255),c
 10021  002634  5019               	movf	??___ftpack,w,c
 10022  002636  101A               	iorwf	??___ftpack+1,w,c
 10023  002638  101B               	iorwf	??___ftpack+2,w,c
 10024  00263A  B4D8               	btfsc	status,2,c
 10025  00263C  D006               	goto	l825
 10026  00263E  D7E6               	goto	l823
 10027  002640  0617               	decf	___ftpack@exp,f,c
 10028  002642  90D8               	bcf	status,0,c
 10029  002644  3614               	rlcf	___ftpack@arg,f,c
 10030  002646  3615               	rlcf	___ftpack@arg+1,f,c
 10031  002648  3616               	rlcf	___ftpack@arg+2,f,c
 10032  00264A                     l825:
 10033  00264A  BE15               	btfsc	___ftpack@arg+1,7,c
 10034  00264C  D003               	goto	u6020
 10035  00264E  0E02               	movlw	2
 10036  002650  6017               	cpfslt	___ftpack@exp,c
 10037  002652  D7F6               	goto	l826
 10038  002654                     u6020:
 10039  002654  A017               	btfss	___ftpack@exp,0,c
 10040  002656  9E15               	bcf	___ftpack@arg+1,7,c
 10041  002658  90D8               	bcf	status,0,c
 10042  00265A  3217               	rrcf	___ftpack@exp,f,c
 10043  00265C  5017               	movf	___ftpack@exp,w,c
 10044  00265E  1216               	iorwf	___ftpack@arg+2,f,c
 10045  002660  5018               	movf	___ftpack@sign,w,c
 10046  002662  A4D8               	btfss	status,2,c
 10047  002664  8E16               	bsf	___ftpack@arg+2,7,c
 10048  002666  C014  F014         	movff	___ftpack@arg,?___ftpack
 10049  00266A  C015  F015         	movff	___ftpack@arg+1,?___ftpack+1
 10050  00266E  C016  F016         	movff	___ftpack@arg+2,?___ftpack+2
 10051  002672  0012               	return	
 10052  002674                     __end_of___ftpack:
 10053                           	opt stack 0
 10054                           tblptru	equ	0xFF8
 10055                           tblptrh	equ	0xFF7
 10056                           tblptrl	equ	0xFF6
 10057                           tablat	equ	0xFF5
 10058                           prodh	equ	0xFF4
 10059                           prodl	equ	0xFF3
 10060                           indf0	equ	0xFEF
 10061                           postinc0	equ	0xFEE
 10062                           fsr0h	equ	0xFEA
 10063                           fsr0l	equ	0xFE9
 10064                           wreg	equ	0xFE8
 10065                           postdec1	equ	0xFE5
 10066                           fsr1l	equ	0xFE1
 10067                           indf2	equ	0xFDF
 10068                           postinc2	equ	0xFDE
 10069                           postdec2	equ	0xFDD
 10070                           fsr2h	equ	0xFDA
 10071                           fsr2l	equ	0xFD9
 10072                           status	equ	0xFD8
 10073                           
 10074 ;; *************** function _lcd_puts *****************
 10075 ;; Defined at:
 10076 ;;		line 120 in file "lcd_x8.c"
 10077 ;; Parameters:    Size  Location     Type
 10078 ;;  s               2   33[COMRAM] PTR unsigned char 
 10079 ;;		 -> main@Buffer(32), array(16), 
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;		None
 10082 ;; Return value:  Size  Location     Type
 10083 ;;                  1    wreg      void 
 10084 ;; Registers used:
 10085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10091 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10095 ;;Total ram usage:        2 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    7
 10098 ;; This function calls:
 10099 ;;		_lcd_putc
 10100 ;; This function is called by:
 10101 ;;		_main
 10102 ;; This function uses a non-reentrant model
 10103 ;;
 10104                           
 10105                           	psect	text28
 10106  002EF6                     __ptext28:
 10107                           	opt stack 0
 10108  002EF6                     _lcd_puts:
 10109                           	opt stack 23
 10110                           
 10111                           ;lcd_x8.c: 121: while (*s) {
 10112                           
 10113                           ;incstack = 0
 10114  002EF6  D009               	goto	l102
 10115  002EF8                     
 10116                           ;lcd_x8.c: 122: lcd_putc(*s);
 10117  002EF8  C022  FFD9         	movff	lcd_puts@s,fsr2l
 10118  002EFC  C023  FFDA         	movff	lcd_puts@s+1,fsr2h
 10119  002F00  50DF               	movf	indf2,w,c
 10120  002F02  EC04  F016         	call	_lcd_putc
 10121                           
 10122                           ;lcd_x8.c: 123: s++;
 10123  002F06  4A22               	infsnz	lcd_puts@s,f,c
 10124  002F08  2A23               	incf	lcd_puts@s+1,f,c
 10125  002F0A                     l102:
 10126  002F0A  C022  FFD9         	movff	lcd_puts@s,fsr2l
 10127  002F0E  C023  FFDA         	movff	lcd_puts@s+1,fsr2h
 10128  002F12  50DF               	movf	indf2,w,c
 10129  002F14  B4D8               	btfsc	status,2,c
 10130  002F16  0012               	return	
 10131  002F18  D7EF               	goto	l103
 10132  002F1A                     __end_of_lcd_puts:
 10133                           	opt stack 0
 10134                           tblptru	equ	0xFF8
 10135                           tblptrh	equ	0xFF7
 10136                           tblptrl	equ	0xFF6
 10137                           tablat	equ	0xFF5
 10138                           prodh	equ	0xFF4
 10139                           prodl	equ	0xFF3
 10140                           indf0	equ	0xFEF
 10141                           postinc0	equ	0xFEE
 10142                           fsr0h	equ	0xFEA
 10143                           fsr0l	equ	0xFE9
 10144                           wreg	equ	0xFE8
 10145                           postdec1	equ	0xFE5
 10146                           fsr1l	equ	0xFE1
 10147                           indf2	equ	0xFDF
 10148                           postinc2	equ	0xFDE
 10149                           postdec2	equ	0xFDD
 10150                           fsr2h	equ	0xFDA
 10151                           fsr2l	equ	0xFD9
 10152                           status	equ	0xFD8
 10153                           
 10154 ;; *************** function _lcd_putc *****************
 10155 ;; Defined at:
 10156 ;;		line 106 in file "lcd_x8.c"
 10157 ;; Parameters:    Size  Location     Type
 10158 ;;  c               1    wreg     unsigned char 
 10159 ;; Auto vars:     Size  Location     Type
 10160 ;;  c               1   32[COMRAM] unsigned char 
 10161 ;; Return value:  Size  Location     Type
 10162 ;;                  1    wreg      void 
 10163 ;; Registers used:
 10164 ;;		wreg, status,2, status,0, cstack
 10165 ;; Tracked objects:
 10166 ;;		On entry : 0/0
 10167 ;;		On exit  : 0/0
 10168 ;;		Unchanged: 0/0
 10169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10171 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10173 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10174 ;;Total ram usage:        1 bytes
 10175 ;; Hardware stack levels used:    1
 10176 ;; Hardware stack levels required when called:    6
 10177 ;; This function calls:
 10178 ;;		_delay_ms
 10179 ;;		_lcd_gotoxy
 10180 ;;		_lcd_send_byte
 10181 ;; This function is called by:
 10182 ;;		_lcd_puts
 10183 ;;		_main
 10184 ;; This function uses a non-reentrant model
 10185 ;;
 10186                           
 10187                           	psect	text29
 10188  002C08                     __ptext29:
 10189                           	opt stack 0
 10190  002C08                     _lcd_putc:
 10191                           	opt stack 23
 10192                           
 10193                           ;incstack = 0
 10194                           ;lcd_putc@c stored from wreg
 10195  002C08  6E21               	movwf	lcd_putc@c,c
 10196                           
 10197                           ;lcd_x8.c: 107: switch (c) {
 10198  002C0A  D01E               	goto	l93
 10199  002C0C  0E01               	movlw	1
 10200  002C0E  6E1C               	movwf	lcd_send_byte@n,c
 10201  002C10  0E00               	movlw	0
 10202  002C12  EC58  F016         	call	_lcd_send_byte
 10203                           
 10204                           ;lcd_x8.c: 109: delay_ms(2);
 10205  002C16  0E00               	movlw	0
 10206  002C18  6E15               	movwf	delay_ms@n+1,c
 10207  002C1A  0E02               	movlw	2
 10208  002C1C  6E14               	movwf	delay_ms@n,c
 10209  002C1E  EC44  F017         	call	_delay_ms	;wreg free
 10210                           
 10211                           ;lcd_x8.c: 110: break;
 10212  002C22  0012               	return	
 10213  002C24  0E02               	movlw	2
 10214  002C26  6E1E               	movwf	lcd_gotoxy@y,c
 10215  002C28  0E01               	movlw	1
 10216  002C2A  ECC0  F016         	call	_lcd_gotoxy
 10217                           
 10218                           ;lcd_x8.c: 112: break;
 10219  002C2E  0012               	return	
 10220  002C30  0E10               	movlw	16
 10221  002C32  6E1C               	movwf	lcd_send_byte@n,c
 10222  002C34  0E00               	movlw	0
 10223  002C36  EC58  F016         	call	_lcd_send_byte
 10224                           
 10225                           ;lcd_x8.c: 114: break;
 10226  002C3A  0012               	return	
 10227  002C3C  C021  F01C         	movff	lcd_putc@c,lcd_send_byte@n
 10228  002C40  0E01               	movlw	1
 10229  002C42  EC58  F016         	call	_lcd_send_byte
 10230                           
 10231                           ;lcd_x8.c: 117: }
 10232                           
 10233                           ;lcd_x8.c: 116: break;
 10234  002C46  0012               	return	
 10235  002C48                     l93:
 10236  002C48  5021               	movf	lcd_putc@c,w,c
 10237                           
 10238                           ; Switch size 1, requested type "space"
 10239                           ; Number of cases is 3, Range of values is 8 to 12
 10240                           ; switch strategies available:
 10241                           ; Name         Instructions Cycles
 10242                           ; simple_byte           10     6 (average)
 10243                           ;	Chosen strategy is simple_byte
 10244  002C4A  0A08               	xorlw	8	; case 8
 10245  002C4C  B4D8               	btfsc	status,2,c
 10246  002C4E  D7F0               	goto	l97
 10247  002C50  0A02               	xorlw	2	; case 10
 10248  002C52  B4D8               	btfsc	status,2,c
 10249  002C54  D7E7               	goto	l96
 10250  002C56  0A06               	xorlw	6	; case 12
 10251  002C58  B4D8               	btfsc	status,2,c
 10252  002C5A  D7D8               	goto	l94
 10253  002C5C  D7EF               	goto	l98
 10254  002C5E                     __end_of_lcd_putc:
 10255                           	opt stack 0
 10256                           tblptru	equ	0xFF8
 10257                           tblptrh	equ	0xFF7
 10258                           tblptrl	equ	0xFF6
 10259                           tablat	equ	0xFF5
 10260                           prodh	equ	0xFF4
 10261                           prodl	equ	0xFF3
 10262                           indf0	equ	0xFEF
 10263                           postinc0	equ	0xFEE
 10264                           fsr0h	equ	0xFEA
 10265                           fsr0l	equ	0xFE9
 10266                           wreg	equ	0xFE8
 10267                           postdec1	equ	0xFE5
 10268                           fsr1l	equ	0xFE1
 10269                           indf2	equ	0xFDF
 10270                           postinc2	equ	0xFDE
 10271                           postdec2	equ	0xFDD
 10272                           fsr2h	equ	0xFDA
 10273                           fsr2l	equ	0xFD9
 10274                           status	equ	0xFD8
 10275                           
 10276 ;; *************** function _lcd_gotoxy *****************
 10277 ;; Defined at:
 10278 ;;		line 89 in file "lcd_x8.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;  x               1    wreg     unsigned char 
 10281 ;;  y               1   29[COMRAM] unsigned char 
 10282 ;; Auto vars:     Size  Location     Type
 10283 ;;  x               1   30[COMRAM] unsigned char 
 10284 ;;  address         1   31[COMRAM] unsigned char 
 10285 ;; Return value:  Size  Location     Type
 10286 ;;                  1    wreg      void 
 10287 ;; Registers used:
 10288 ;;		wreg, status,2, status,0, cstack
 10289 ;; Tracked objects:
 10290 ;;		On entry : 0/0
 10291 ;;		On exit  : 0/0
 10292 ;;		Unchanged: 0/0
 10293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10294 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10295 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10297 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10298 ;;Total ram usage:        3 bytes
 10299 ;; Hardware stack levels used:    1
 10300 ;; Hardware stack levels required when called:    5
 10301 ;; This function calls:
 10302 ;;		_lcd_send_byte
 10303 ;; This function is called by:
 10304 ;;		_lcd_putc
 10305 ;;		_main
 10306 ;; This function uses a non-reentrant model
 10307 ;;
 10308                           
 10309                           	psect	text30
 10310  002D80                     __ptext30:
 10311                           	opt stack 0
 10312  002D80                     _lcd_gotoxy:
 10313                           	opt stack 23
 10314                           
 10315                           ;incstack = 0
 10316                           ;lcd_gotoxy@x stored from wreg
 10317  002D80  6E1F               	movwf	lcd_gotoxy@x,c
 10318                           
 10319                           ;lcd_x8.c: 90: unsigned char address;
 10320                           ;lcd_x8.c: 92: switch (y) {
 10321  002D82  D009               	goto	l84
 10322  002D84  0E80               	movlw	128
 10323  002D86  D005               	goto	L8
 10324  002D88  0EC0               	movlw	192
 10325  002D8A  D003               	goto	L8
 10326  002D8C  0E90               	movlw	144
 10327  002D8E  D001               	goto	L8
 10328  002D90  0ED0               	movlw	208
 10329  002D92                     L8:
 10330  002D92  6E20               	movwf	lcd_gotoxy@address,c
 10331                           
 10332                           ;lcd_x8.c: 101: }
 10333                           
 10334                           ;lcd_x8.c: 100: break;
 10335  002D94  D00D               	goto	l86
 10336  002D96                     l84:
 10337  002D96  501E               	movf	lcd_gotoxy@y,w,c
 10338                           
 10339                           ; Switch size 1, requested type "space"
 10340                           ; Number of cases is 4, Range of values is 1 to 4
 10341                           ; switch strategies available:
 10342                           ; Name         Instructions Cycles
 10343                           ; simple_byte           13     7 (average)
 10344                           ;	Chosen strategy is simple_byte
 10345  002D98  0A01               	xorlw	1	; case 1
 10346  002D9A  B4D8               	btfsc	status,2,c
 10347  002D9C  D7F3               	goto	l85
 10348  002D9E  0A03               	xorlw	3	; case 2
 10349  002DA0  B4D8               	btfsc	status,2,c
 10350  002DA2  D7F2               	goto	l87
 10351  002DA4  0A01               	xorlw	1	; case 3
 10352  002DA6  B4D8               	btfsc	status,2,c
 10353  002DA8  D7F1               	goto	l88
 10354  002DAA  0A07               	xorlw	7	; case 4
 10355  002DAC  B4D8               	btfsc	status,2,c
 10356  002DAE  D7F0               	goto	l89
 10357  002DB0                     l86:
 10358                           
 10359                           ;lcd_x8.c: 102: address += x - 1;
 10360  002DB0  041F               	decf	lcd_gotoxy@x,w,c
 10361  002DB2  2620               	addwf	lcd_gotoxy@address,f,c
 10362                           
 10363                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
 10364  002DB4  5020               	movf	lcd_gotoxy@address,w,c
 10365  002DB6  0980               	iorlw	128
 10366  002DB8  6E1C               	movwf	lcd_send_byte@n,c
 10367  002DBA  0E00               	movlw	0
 10368  002DBC  EC58  F016         	call	_lcd_send_byte
 10369  002DC0  0012               	return		;funcret
 10370  002DC2                     __end_of_lcd_gotoxy:
 10371                           	opt stack 0
 10372                           tblptru	equ	0xFF8
 10373                           tblptrh	equ	0xFF7
 10374                           tblptrl	equ	0xFF6
 10375                           tablat	equ	0xFF5
 10376                           prodh	equ	0xFF4
 10377                           prodl	equ	0xFF3
 10378                           indf0	equ	0xFEF
 10379                           postinc0	equ	0xFEE
 10380                           fsr0h	equ	0xFEA
 10381                           fsr0l	equ	0xFE9
 10382                           wreg	equ	0xFE8
 10383                           postdec1	equ	0xFE5
 10384                           fsr1l	equ	0xFE1
 10385                           indf2	equ	0xFDF
 10386                           postinc2	equ	0xFDE
 10387                           postdec2	equ	0xFDD
 10388                           fsr2h	equ	0xFDA
 10389                           fsr2l	equ	0xFD9
 10390                           status	equ	0xFD8
 10391                           
 10392 ;; *************** function _lcd_init *****************
 10393 ;; Defined at:
 10394 ;;		line 56 in file "lcd_x8.c"
 10395 ;; Parameters:    Size  Location     Type
 10396 ;;		None
 10397 ;; Auto vars:     Size  Location     Type
 10398 ;;  i               1   29[COMRAM] unsigned char 
 10399 ;; Return value:  Size  Location     Type
 10400 ;;                  1    wreg      void 
 10401 ;; Registers used:
 10402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10403 ;; Tracked objects:
 10404 ;;		On entry : 0/0
 10405 ;;		On exit  : 0/0
 10406 ;;		Unchanged: 0/0
 10407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10409 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10411 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10412 ;;Total ram usage:        1 bytes
 10413 ;; Hardware stack levels used:    1
 10414 ;; Hardware stack levels required when called:    5
 10415 ;; This function calls:
 10416 ;;		_delay_ms
 10417 ;;		_lcd_send_byte
 10418 ;;		_lcd_send_nibble
 10419 ;; This function is called by:
 10420 ;;		_main
 10421 ;; This function uses a non-reentrant model
 10422 ;;
 10423                           
 10424                           	psect	text31
 10425  002AF4                     __ptext31:
 10426                           	opt stack 0
 10427  002AF4                     _lcd_init:
 10428                           	opt stack 25
 10429                           
 10430                           ;lcd_x8.c: 58: unsigned char i;
 10431                           ;lcd_x8.c: 61: PORTEbits.RE2 = 0;
 10432                           
 10433                           ;incstack = 0
 10434  002AF4  9484               	bcf	3972,2,c	;volatile
 10435                           
 10436                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
 10437  002AF6  9284               	bcf	3972,1,c	;volatile
 10438                           
 10439                           ;lcd_x8.c: 65: delay_ms(25);
 10440  002AF8  0E00               	movlw	0
 10441  002AFA  6E15               	movwf	delay_ms@n+1,c
 10442  002AFC  0E19               	movlw	25
 10443  002AFE  6E14               	movwf	delay_ms@n,c
 10444  002B00  EC44  F017         	call	_delay_ms	;wreg free
 10445                           
 10446                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
 10447  002B04  0E01               	movlw	1
 10448  002B06  6E1E               	movwf	lcd_init@i,c
 10449  002B08                     l3780:
 10450  002B08  0E03               	movlw	3
 10451  002B0A  641E               	cpfsgt	lcd_init@i,c
 10452  002B0C  D001               	goto	l77
 10453  002B0E  D00B               	goto	u4080
 10454  002B10                     l77:
 10455                           
 10456                           ;lcd_x8.c: 67: lcd_send_nibble(3);
 10457  002B10  0E03               	movlw	3
 10458  002B12  EC8D  F017         	call	_lcd_send_nibble
 10459                           
 10460                           ;lcd_x8.c: 69: delay_ms(6);
 10461  002B16  0E00               	movlw	0
 10462  002B18  6E15               	movwf	delay_ms@n+1,c
 10463  002B1A  0E06               	movlw	6
 10464  002B1C  6E14               	movwf	delay_ms@n,c
 10465  002B1E  EC44  F017         	call	_delay_ms	;wreg free
 10466  002B22  2A1E               	incf	lcd_init@i,f,c
 10467  002B24  D7F1               	goto	l3780
 10468  002B26                     u4080:
 10469                           
 10470                           ;lcd_x8.c: 70: }
 10471                           ;lcd_x8.c: 72: lcd_send_nibble(2);
 10472  002B26  0E02               	movlw	2
 10473  002B28  EC8D  F017         	call	_lcd_send_nibble
 10474                           
 10475                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
 10476  002B2C  0E00               	movlw	0
 10477  002B2E  6E1E               	movwf	lcd_init@i,c
 10478  002B30                     l3794:
 10479  002B30  0E03               	movlw	3
 10480  002B32  641E               	cpfsgt	lcd_init@i,c
 10481  002B34  D001               	goto	l79
 10482  002B36  0012               	return	
 10483  002B38                     l79:
 10484                           
 10485                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
 10486  002B38  501E               	movf	lcd_init@i,w,c
 10487  002B3A  0D01               	mullw	1
 10488  002B3C  0ECF               	movlw	low _LCD_INIT_STRING
 10489  002B3E  24F3               	addwf	prodl,w,c
 10490  002B40  6ED9               	movwf	fsr2l,c
 10491  002B42  0E00               	movlw	high _LCD_INIT_STRING
 10492  002B44  20F4               	addwfc	prodh,w,c
 10493  002B46  6EDA               	movwf	fsr2h,c
 10494  002B48  50DF               	movf	indf2,w,c
 10495  002B4A  6E1C               	movwf	lcd_send_byte@n,c
 10496  002B4C  0E00               	movlw	0
 10497  002B4E  EC58  F016         	call	_lcd_send_byte
 10498  002B52  2A1E               	incf	lcd_init@i,f,c
 10499  002B54  D7ED               	goto	l3794
 10500  002B56                     __end_of_lcd_init:
 10501                           	opt stack 0
 10502                           tblptru	equ	0xFF8
 10503                           tblptrh	equ	0xFF7
 10504                           tblptrl	equ	0xFF6
 10505                           tablat	equ	0xFF5
 10506                           prodh	equ	0xFF4
 10507                           prodl	equ	0xFF3
 10508                           indf0	equ	0xFEF
 10509                           postinc0	equ	0xFEE
 10510                           fsr0h	equ	0xFEA
 10511                           fsr0l	equ	0xFE9
 10512                           wreg	equ	0xFE8
 10513                           postdec1	equ	0xFE5
 10514                           fsr1l	equ	0xFE1
 10515                           indf2	equ	0xFDF
 10516                           postinc2	equ	0xFDE
 10517                           postdec2	equ	0xFDD
 10518                           fsr2h	equ	0xFDA
 10519                           fsr2l	equ	0xFD9
 10520                           status	equ	0xFD8
 10521                           
 10522 ;; *************** function _lcd_send_byte *****************
 10523 ;; Defined at:
 10524 ;;		line 39 in file "lcd_x8.c"
 10525 ;; Parameters:    Size  Location     Type
 10526 ;;  cm_data         1    wreg     unsigned char 
 10527 ;;  n               1   27[COMRAM] unsigned char 
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;  cm_data         1   28[COMRAM] unsigned char 
 10530 ;; Return value:  Size  Location     Type
 10531 ;;                  1    wreg      void 
 10532 ;; Registers used:
 10533 ;;		wreg, status,2, status,0, cstack
 10534 ;; Tracked objects:
 10535 ;;		On entry : 0/0
 10536 ;;		On exit  : 0/0
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10539 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;Total ram usage:        2 bytes
 10544 ;; Hardware stack levels used:    1
 10545 ;; Hardware stack levels required when called:    4
 10546 ;; This function calls:
 10547 ;;		_delay_cycles
 10548 ;;		_delay_ms
 10549 ;;		_lcd_send_nibble
 10550 ;; This function is called by:
 10551 ;;		_lcd_init
 10552 ;;		_lcd_gotoxy
 10553 ;;		_lcd_putc
 10554 ;;		_Lcd_Shift_Right
 10555 ;;		_Lcd_Shift_Left
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559                           	psect	text32
 10560  002CB0                     __ptext32:
 10561                           	opt stack 0
 10562  002CB0                     _lcd_send_byte:
 10563                           	opt stack 24
 10564                           
 10565                           ;incstack = 0
 10566                           ;lcd_send_byte@cm_data stored from wreg
 10567  002CB0  6E1D               	movwf	lcd_send_byte@cm_data,c
 10568                           
 10569                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
 10570  002CB2  B01D               	btfsc	lcd_send_byte@cm_data,0,c
 10571  002CB4  D002               	bra	u3025
 10572  002CB6  9484               	bcf	3972,2,c	;volatile
 10573  002CB8  D001               	bra	u3026
 10574  002CBA                     u3025:
 10575  002CBA  8484               	bsf	3972,2,c	;volatile
 10576  002CBC                     u3026:
 10577                           
 10578                           ;lcd_x8.c: 44: delay_cycles(1);
 10579  002CBC  0E01               	movlw	1
 10580  002CBE  EC1A  F017         	call	_delay_cycles
 10581                           
 10582                           ;lcd_x8.c: 46: delay_cycles(1);
 10583  002CC2  0E01               	movlw	1
 10584  002CC4  EC1A  F017         	call	_delay_cycles
 10585                           
 10586                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
 10587  002CC8  9284               	bcf	3972,1,c	;volatile
 10588                           
 10589                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
 10590  002CCA  381C               	swapf	lcd_send_byte@n,w,c
 10591  002CCC  0B0F               	andlw	15
 10592  002CCE  EC8D  F017         	call	_lcd_send_nibble
 10593                           
 10594                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
 10595  002CD2  501C               	movf	lcd_send_byte@n,w,c
 10596  002CD4  0B0F               	andlw	15
 10597  002CD6  EC8D  F017         	call	_lcd_send_nibble
 10598                           
 10599                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
 10600  002CDA  501D               	movf	lcd_send_byte@cm_data,w,c
 10601  002CDC  B4D8               	btfsc	status,2,c
 10602  002CDE  D005               	goto	l72
 10603  002CE0  0E32               	movlw	50
 10604  002CE2                     u8227:
 10605  002CE2  0004               	clrwdt	
 10606  002CE4  2EE8               	decfsz	wreg,f,c
 10607  002CE6  D7FD               	bra	u8227
 10608  002CE8  0012               	return	
 10609  002CEA                     l72:
 10610                           
 10611                           ;lcd_x8.c: 51: else
 10612                           ;lcd_x8.c: 52: delay_ms(2);
 10613  002CEA  0E00               	movlw	0
 10614  002CEC  6E15               	movwf	delay_ms@n+1,c
 10615  002CEE  0E02               	movlw	2
 10616  002CF0  6E14               	movwf	delay_ms@n,c
 10617  002CF2  EC44  F017         	call	_delay_ms	;wreg free
 10618  002CF6  0012               	return	
 10619  002CF8                     __end_of_lcd_send_byte:
 10620                           	opt stack 0
 10621                           tblptru	equ	0xFF8
 10622                           tblptrh	equ	0xFF7
 10623                           tblptrl	equ	0xFF6
 10624                           tablat	equ	0xFF5
 10625                           prodh	equ	0xFF4
 10626                           prodl	equ	0xFF3
 10627                           indf0	equ	0xFEF
 10628                           postinc0	equ	0xFEE
 10629                           fsr0h	equ	0xFEA
 10630                           fsr0l	equ	0xFE9
 10631                           wreg	equ	0xFE8
 10632                           postdec1	equ	0xFE5
 10633                           fsr1l	equ	0xFE1
 10634                           indf2	equ	0xFDF
 10635                           postinc2	equ	0xFDE
 10636                           postdec2	equ	0xFDD
 10637                           fsr2h	equ	0xFDA
 10638                           fsr2l	equ	0xFD9
 10639                           status	equ	0xFD8
 10640                           
 10641 ;; *************** function _lcd_send_nibble *****************
 10642 ;; Defined at:
 10643 ;;		line 29 in file "lcd_x8.c"
 10644 ;; Parameters:    Size  Location     Type
 10645 ;;  n               1    wreg     unsigned char 
 10646 ;; Auto vars:     Size  Location     Type
 10647 ;;  n               1   26[COMRAM] unsigned char 
 10648 ;; Return value:  Size  Location     Type
 10649 ;;                  1    wreg      void 
 10650 ;; Registers used:
 10651 ;;		wreg, status,2, status,0, cstack
 10652 ;; Tracked objects:
 10653 ;;		On entry : 0/0
 10654 ;;		On exit  : 0/0
 10655 ;;		Unchanged: 0/0
 10656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10658 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10660 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10661 ;;Total ram usage:        2 bytes
 10662 ;; Hardware stack levels used:    1
 10663 ;; Hardware stack levels required when called:    3
 10664 ;; This function calls:
 10665 ;;		_delay_cycles
 10666 ;; This function is called by:
 10667 ;;		_lcd_send_byte
 10668 ;;		_lcd_init
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           	psect	text33
 10673  002F1A                     __ptext33:
 10674                           	opt stack 0
 10675  002F1A                     _lcd_send_nibble:
 10676                           	opt stack 24
 10677                           
 10678                           ;incstack = 0
 10679                           ;lcd_send_nibble@n stored from wreg
 10680  002F1A  6E1B               	movwf	lcd_send_nibble@n,c
 10681                           
 10682                           ;lcd_x8.c: 31: lcd.data = n;
 10683  002F1C  C01B  F01A         	movff	lcd_send_nibble@n,??_lcd_send_nibble
 10684  002F20  3A1A               	swapf	??_lcd_send_nibble,f,c
 10685  002F22  5083               	movf	3971,w,c
 10686  002F24  181A               	xorwf	??_lcd_send_nibble,w,c
 10687  002F26  0B0F               	andlw	-241
 10688  002F28  181A               	xorwf	??_lcd_send_nibble,w,c
 10689  002F2A  6E83               	movwf	3971,c
 10690                           
 10691                           ;lcd_x8.c: 33: delay_cycles(1);
 10692  002F2C  0E01               	movlw	1
 10693  002F2E  EC1A  F017         	call	_delay_cycles
 10694                           
 10695                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
 10696  002F32  8284               	bsf	3972,1,c	;volatile
 10697                           
 10698                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
 10699  002F34  0004               	clrwdt	
 10700  002F36  F000               	nop		;2 cycle nop
 10701                           
 10702                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
 10703  002F38  9284               	bcf	3972,1,c	;volatile
 10704  002F3A  0012               	return		;funcret
 10705  002F3C                     __end_of_lcd_send_nibble:
 10706                           	opt stack 0
 10707                           tblptru	equ	0xFF8
 10708                           tblptrh	equ	0xFF7
 10709                           tblptrl	equ	0xFF6
 10710                           tablat	equ	0xFF5
 10711                           prodh	equ	0xFF4
 10712                           prodl	equ	0xFF3
 10713                           indf0	equ	0xFEF
 10714                           postinc0	equ	0xFEE
 10715                           fsr0h	equ	0xFEA
 10716                           fsr0l	equ	0xFE9
 10717                           wreg	equ	0xFE8
 10718                           postdec1	equ	0xFE5
 10719                           fsr1l	equ	0xFE1
 10720                           indf2	equ	0xFDF
 10721                           postinc2	equ	0xFDE
 10722                           postdec2	equ	0xFDD
 10723                           fsr2h	equ	0xFDA
 10724                           fsr2l	equ	0xFD9
 10725                           status	equ	0xFD8
 10726                           
 10727 ;; *************** function _delay_cycles *****************
 10728 ;; Defined at:
 10729 ;;		line 20 in file "lcd_x8.c"
 10730 ;; Parameters:    Size  Location     Type
 10731 ;;  n               1    wreg     unsigned char 
 10732 ;; Auto vars:     Size  Location     Type
 10733 ;;  n               1   22[COMRAM] unsigned char 
 10734 ;;  x               2   23[COMRAM] int 
 10735 ;; Return value:  Size  Location     Type
 10736 ;;                  1    wreg      void 
 10737 ;; Registers used:
 10738 ;;		wreg, status,2, status,0
 10739 ;; Tracked objects:
 10740 ;;		On entry : 0/0
 10741 ;;		On exit  : 0/0
 10742 ;;		Unchanged: 0/0
 10743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10745 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10746 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10747 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10748 ;;Total ram usage:        6 bytes
 10749 ;; Hardware stack levels used:    1
 10750 ;; Hardware stack levels required when called:    2
 10751 ;; This function calls:
 10752 ;;		Nothing
 10753 ;; This function is called by:
 10754 ;;		_lcd_send_nibble
 10755 ;;		_lcd_send_byte
 10756 ;; This function uses a non-reentrant model
 10757 ;;
 10758                           
 10759                           	psect	text34
 10760  002E34                     __ptext34:
 10761                           	opt stack 0
 10762  002E34                     _delay_cycles:
 10763                           	opt stack 24
 10764                           
 10765                           ;incstack = 0
 10766                           ;delay_cycles@n stored from wreg
 10767  002E34  6E17               	movwf	delay_cycles@n,c
 10768                           
 10769                           ;lcd_x8.c: 21: int x;
 10770                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
 10771  002E36  0E00               	movlw	0
 10772  002E38  6E19               	movwf	delay_cycles@x+1,c
 10773  002E3A  0E00               	movlw	0
 10774  002E3C  6E18               	movwf	delay_cycles@x,c
 10775  002E3E  D003               	goto	l63
 10776  002E40                     l64:
 10777  002E40  0004               	clrwdt		;# 
 10778  002E42  4A18               	infsnz	delay_cycles@x,f,c
 10779  002E44  2A19               	incf	delay_cycles@x+1,f,c
 10780  002E46                     l63:
 10781  002E46  5017               	movf	delay_cycles@n,w,c
 10782  002E48  6E14               	movwf	??_delay_cycles& (0+255),c
 10783  002E4A  6A15               	clrf	(??_delay_cycles+1)& (0+255),c
 10784  002E4C  5018               	movf	delay_cycles@x,w,c
 10785  002E4E  5C14               	subwf	??_delay_cycles,w,c
 10786  002E50  5015               	movf	??_delay_cycles+1,w,c
 10787  002E52  0A80               	xorlw	128
 10788  002E54  6E16               	movwf	(??_delay_cycles+2)& (0+255),c
 10789  002E56  5019               	movf	delay_cycles@x+1,w,c
 10790  002E58  0A80               	xorlw	128
 10791  002E5A  5816               	subwfb	(??_delay_cycles+2)& (0+255),w,c
 10792  002E5C  A0D8               	btfss	status,0,c
 10793  002E5E  0012               	return	
 10794  002E60  D7EF               	goto	l64
 10795  002E62                     __end_of_delay_cycles:
 10796                           	opt stack 0
 10797                           tblptru	equ	0xFF8
 10798                           tblptrh	equ	0xFF7
 10799                           tblptrl	equ	0xFF6
 10800                           tablat	equ	0xFF5
 10801                           prodh	equ	0xFF4
 10802                           prodl	equ	0xFF3
 10803                           indf0	equ	0xFEF
 10804                           postinc0	equ	0xFEE
 10805                           fsr0h	equ	0xFEA
 10806                           fsr0l	equ	0xFE9
 10807                           wreg	equ	0xFE8
 10808                           postdec1	equ	0xFE5
 10809                           fsr1l	equ	0xFE1
 10810                           indf2	equ	0xFDF
 10811                           postinc2	equ	0xFDE
 10812                           postdec2	equ	0xFDD
 10813                           fsr2h	equ	0xFDA
 10814                           fsr2l	equ	0xFD9
 10815                           status	equ	0xFD8
 10816                           
 10817 ;; *************** function _delay_ms *****************
 10818 ;; Defined at:
 10819 ;;		line 12 in file "lcd_x8.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;  n               2   19[COMRAM] unsigned int 
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;  x               2   21[COMRAM] int 
 10824 ;; Return value:  Size  Location     Type
 10825 ;;                  1    wreg      void 
 10826 ;; Registers used:
 10827 ;;		wreg, status,2, status,0
 10828 ;; Tracked objects:
 10829 ;;		On entry : 0/0
 10830 ;;		On exit  : 0/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10833 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10834 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10836 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10837 ;;Total ram usage:        4 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:    2
 10840 ;; This function calls:
 10841 ;;		Nothing
 10842 ;; This function is called by:
 10843 ;;		_lcd_send_byte
 10844 ;;		_lcd_init
 10845 ;;		_lcd_putc
 10846 ;;		_main
 10847 ;; This function uses a non-reentrant model
 10848 ;;
 10849                           
 10850                           	psect	text35
 10851  002E88                     __ptext35:
 10852                           	opt stack 0
 10853  002E88                     _delay_ms:
 10854                           	opt stack 25
 10855                           
 10856                           ;lcd_x8.c: 13: int x;
 10857                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
 10858                           
 10859                           ;incstack = 0
 10860  002E88  0E00               	movlw	0
 10861  002E8A  6E17               	movwf	delay_ms@x+1,c
 10862  002E8C  0E00               	movlw	0
 10863  002E8E  6E16               	movwf	delay_ms@x,c
 10864  002E90  D007               	goto	l57
 10865  002E92                     
 10866                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
 10867  002E92  0EC8               	movlw	200
 10868  002E94                     u8237:
 10869  002E94  0004               	clrwdt	
 10870  002E96  0004               	clrwdt	
 10871  002E98  2EE8               	decfsz	wreg,f,c
 10872  002E9A  D7FC               	bra	u8237
 10873  002E9C  4A16               	infsnz	delay_ms@x,f,c
 10874  002E9E  2A17               	incf	delay_ms@x+1,f,c
 10875  002EA0                     l57:
 10876  002EA0  5016               	movf	delay_ms@x,w,c
 10877  002EA2  5C14               	subwf	delay_ms@n,w,c
 10878  002EA4  5017               	movf	delay_ms@x+1,w,c
 10879  002EA6  5815               	subwfb	delay_ms@n+1,w,c
 10880  002EA8  A0D8               	btfss	status,0,c
 10881  002EAA  0012               	return	
 10882  002EAC  D7F2               	goto	l58
 10883  002EAE                     __end_of_delay_ms:
 10884                           	opt stack 0
 10885                           tblptru	equ	0xFF8
 10886                           tblptrh	equ	0xFF7
 10887                           tblptrl	equ	0xFF6
 10888                           tablat	equ	0xFF5
 10889                           prodh	equ	0xFF4
 10890                           prodl	equ	0xFF3
 10891                           indf0	equ	0xFEF
 10892                           postinc0	equ	0xFEE
 10893                           fsr0h	equ	0xFEA
 10894                           fsr0l	equ	0xFE9
 10895                           wreg	equ	0xFE8
 10896                           postdec1	equ	0xFE5
 10897                           fsr1l	equ	0xFE1
 10898                           indf2	equ	0xFDF
 10899                           postinc2	equ	0xFDE
 10900                           postdec2	equ	0xFDD
 10901                           fsr2h	equ	0xFDA
 10902                           fsr2l	equ	0xFD9
 10903                           status	equ	0xFD8
 10904                           
 10905 ;; *************** function _init_adc_no_lib *****************
 10906 ;; Defined at:
 10907 ;;		line 11 in file "my_adc.c"
 10908 ;; Parameters:    Size  Location     Type
 10909 ;;		None
 10910 ;; Auto vars:     Size  Location     Type
 10911 ;;		None
 10912 ;; Return value:  Size  Location     Type
 10913 ;;                  1    wreg      void 
 10914 ;; Registers used:
 10915 ;;		wreg, status,2
 10916 ;; Tracked objects:
 10917 ;;		On entry : 0/0
 10918 ;;		On exit  : 0/0
 10919 ;;		Unchanged: 0/0
 10920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10925 ;;Total ram usage:        0 bytes
 10926 ;; Hardware stack levels used:    1
 10927 ;; Hardware stack levels required when called:    2
 10928 ;; This function calls:
 10929 ;;		Nothing
 10930 ;; This function is called by:
 10931 ;;		_main
 10932 ;; This function uses a non-reentrant model
 10933 ;;
 10934                           
 10935                           	psect	text36
 10936  002FDC                     __ptext36:
 10937                           	opt stack 0
 10938  002FDC                     _init_adc_no_lib:
 10939                           	opt stack 28
 10940                           
 10941                           ;my_adc.c: 14: ADCON0 = 0;
 10942                           
 10943                           ;incstack = 0
 10944  002FDC  0E00               	movlw	0
 10945  002FDE  6EC2               	movwf	4034,c	;volatile
 10946                           
 10947                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
 10948  002FE0  80C2               	bsf	4034,0,c	;volatile
 10949                           
 10950                           ;my_adc.c: 18: ADCON2 = 0b10001001;
 10951  002FE2  0E89               	movlw	137
 10952  002FE4  6EC0               	movwf	4032,c	;volatile
 10953  002FE6  0012               	return		;funcret
 10954  002FE8                     __end_of_init_adc_no_lib:
 10955                           	opt stack 0
 10956                           tblptru	equ	0xFF8
 10957                           tblptrh	equ	0xFF7
 10958                           tblptrl	equ	0xFF6
 10959                           tablat	equ	0xFF5
 10960                           prodh	equ	0xFF4
 10961                           prodl	equ	0xFF3
 10962                           indf0	equ	0xFEF
 10963                           postinc0	equ	0xFEE
 10964                           fsr0h	equ	0xFEA
 10965                           fsr0l	equ	0xFE9
 10966                           wreg	equ	0xFE8
 10967                           postdec1	equ	0xFE5
 10968                           fsr1l	equ	0xFE1
 10969                           indf2	equ	0xFDF
 10970                           postinc2	equ	0xFDE
 10971                           postdec2	equ	0xFDD
 10972                           fsr2h	equ	0xFDA
 10973                           fsr2l	equ	0xFD9
 10974                           status	equ	0xFD8
 10975                           
 10976 ;; *************** function _initTimers01 *****************
 10977 ;; Defined at:
 10978 ;;		line 166 in file "HW_CLK.c"
 10979 ;; Parameters:    Size  Location     Type
 10980 ;;		None
 10981 ;; Auto vars:     Size  Location     Type
 10982 ;;		None
 10983 ;; Return value:  Size  Location     Type
 10984 ;;                  1    wreg      void 
 10985 ;; Registers used:
 10986 ;;		wreg, status,2
 10987 ;; Tracked objects:
 10988 ;;		On entry : 0/0
 10989 ;;		On exit  : 0/0
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10996 ;;Total ram usage:        0 bytes
 10997 ;; Hardware stack levels used:    1
 10998 ;; Hardware stack levels required when called:    2
 10999 ;; This function calls:
 11000 ;;		Nothing
 11001 ;; This function is called by:
 11002 ;;		_main
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           	psect	text37
 11007  002C5E                     __ptext37:
 11008                           	opt stack 0
 11009  002C5E                     _initTimers01:
 11010                           	opt stack 28
 11011                           
 11012                           ;HW_CLK.c: 168: INTCON =0;
 11013                           
 11014                           ;incstack = 0
 11015  002C5E  0E00               	movlw	0
 11016  002C60  6EF2               	movwf	intcon,c	;volatile
 11017                           
 11018                           ;HW_CLK.c: 170: INTCON2 =0;
 11019  002C62  0E00               	movlw	0
 11020  002C64  6EF1               	movwf	intcon2,c	;volatile
 11021                           
 11022                           ;HW_CLK.c: 171: INTCON3 =0;
 11023  002C66  0E00               	movlw	0
 11024  002C68  6EF0               	movwf	intcon3,c	;volatile
 11025                           
 11026                           ;HW_CLK.c: 172: T0CON = 0;
 11027  002C6A  0E00               	movlw	0
 11028  002C6C  6ED5               	movwf	4053,c	;volatile
 11029                           
 11030                           ;HW_CLK.c: 174: INTCONbits.T0IF = 0;
 11031  002C6E  94F2               	bcf	intcon,2,c	;volatile
 11032                           
 11033                           ;HW_CLK.c: 175: T0CONbits.T0PS0 = 1;
 11034  002C70  80D5               	bsf	4053,0,c	;volatile
 11035                           
 11036                           ;HW_CLK.c: 176: T0CONbits.T0PS1 = 1;
 11037  002C72  82D5               	bsf	4053,1,c	;volatile
 11038                           
 11039                           ;HW_CLK.c: 177: T0CONbits.T0PS2 = 0;
 11040  002C74  94D5               	bcf	4053,2,c	;volatile
 11041                           
 11042                           ;HW_CLK.c: 178: TMR0H = (unsigned char) ((3036 >> 8) & 0x00FF);
 11043  002C76  0E0B               	movlw	11
 11044  002C78  6ED7               	movwf	4055,c	;volatile
 11045                           
 11046                           ;HW_CLK.c: 179: TMR0L = (unsigned char) (3036 & 0x00FF);
 11047  002C7A  0EDC               	movlw	220
 11048  002C7C  6ED6               	movwf	4054,c	;volatile
 11049                           
 11050                           ;HW_CLK.c: 180: PIE1=0;
 11051  002C7E  0E00               	movlw	0
 11052  002C80  6E9D               	movwf	3997,c	;volatile
 11053                           
 11054                           ;HW_CLK.c: 181: PIE1bits.RCIE =1;
 11055  002C82  8A9D               	bsf	3997,5,c	;volatile
 11056                           
 11057                           ;HW_CLK.c: 184: RCON = 0;
 11058  002C84  0E00               	movlw	0
 11059  002C86  6ED0               	movwf	4048,c	;volatile
 11060                           
 11061                           ;HW_CLK.c: 185: RCONbits.IPEN =0;
 11062  002C88  9ED0               	bcf	4048,7,c	;volatile
 11063                           
 11064                           ;HW_CLK.c: 186: INTCONbits.GIE = 1;
 11065  002C8A  8EF2               	bsf	intcon,7,c	;volatile
 11066                           
 11067                           ;HW_CLK.c: 187: INTCONbits.GIEL = 1;
 11068  002C8C  8CF2               	bsf	intcon,6,c	;volatile
 11069                           
 11070                           ;HW_CLK.c: 188: INTCONbits.T0IE = 1;
 11071  002C8E  8AF2               	bsf	intcon,5,c	;volatile
 11072                           
 11073                           ;HW_CLK.c: 189: INTCONbits.INT0IE= 1;
 11074  002C90  88F2               	bsf	intcon,4,c	;volatile
 11075                           
 11076                           ;HW_CLK.c: 190: INTCON2bits.INTEDG0 = 1;
 11077  002C92  8CF1               	bsf	intcon2,6,c	;volatile
 11078                           
 11079                           ;HW_CLK.c: 191: INTCON2bits.INTEDG1 = 1;
 11080  002C94  8AF1               	bsf	intcon2,5,c	;volatile
 11081                           
 11082                           ;HW_CLK.c: 192: INTCON2bits.INTEDG2 = 1;
 11083  002C96  88F1               	bsf	intcon2,4,c	;volatile
 11084                           
 11085                           ;HW_CLK.c: 193: INTCON3 = 0;
 11086  002C98  0E00               	movlw	0
 11087  002C9A  6EF0               	movwf	intcon3,c	;volatile
 11088                           
 11089                           ;HW_CLK.c: 194: INTCON3bits.INT1IE =1;
 11090  002C9C  86F0               	bsf	intcon3,3,c	;volatile
 11091                           
 11092                           ;HW_CLK.c: 195: INTCON3bits.INT2IE = 1;
 11093  002C9E  88F0               	bsf	intcon3,4,c	;volatile
 11094                           
 11095                           ;HW_CLK.c: 197: PIE2 = 0;
 11096  002CA0  0E00               	movlw	0
 11097  002CA2  6EA0               	movwf	4000,c	;volatile
 11098                           
 11099                           ;HW_CLK.c: 199: PIR2 = 0;
 11100  002CA4  0E00               	movlw	0
 11101  002CA6  6EA1               	movwf	4001,c	;volatile
 11102                           
 11103                           ;HW_CLK.c: 200: T3CON =0;
 11104  002CA8  0E00               	movlw	0
 11105  002CAA  6EB1               	movwf	4017,c	;volatile
 11106                           
 11107                           ;HW_CLK.c: 202: T0CONbits.TMR0ON = 1;
 11108  002CAC  8ED5               	bsf	4053,7,c	;volatile
 11109  002CAE  0012               	return		;funcret
 11110  002CB0                     __end_of_initTimers01:
 11111                           	opt stack 0
 11112                           tblptru	equ	0xFF8
 11113                           tblptrh	equ	0xFF7
 11114                           tblptrl	equ	0xFF6
 11115                           tablat	equ	0xFF5
 11116                           prodh	equ	0xFF4
 11117                           prodl	equ	0xFF3
 11118                           intcon	equ	0xFF2
 11119                           intcon2	equ	0xFF1
 11120                           intcon3	equ	0xFF0
 11121                           indf0	equ	0xFEF
 11122                           postinc0	equ	0xFEE
 11123                           fsr0h	equ	0xFEA
 11124                           fsr0l	equ	0xFE9
 11125                           wreg	equ	0xFE8
 11126                           postdec1	equ	0xFE5
 11127                           fsr1l	equ	0xFE1
 11128                           indf2	equ	0xFDF
 11129                           postinc2	equ	0xFDE
 11130                           postdec2	equ	0xFDD
 11131                           fsr2h	equ	0xFDA
 11132                           fsr2l	equ	0xFD9
 11133                           status	equ	0xFD8
 11134                           
 11135 ;; *************** function ___almod *****************
 11136 ;; Defined at:
 11137 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\almod.c"
 11138 ;; Parameters:    Size  Location     Type
 11139 ;;  dividend        4   19[COMRAM] long 
 11140 ;;  divisor         4   23[COMRAM] long 
 11141 ;; Auto vars:     Size  Location     Type
 11142 ;;  sign            1   28[COMRAM] unsigned char 
 11143 ;;  counter         1   27[COMRAM] unsigned char 
 11144 ;; Return value:  Size  Location     Type
 11145 ;;                  4   19[COMRAM] long 
 11146 ;; Registers used:
 11147 ;;		wreg, status,2, status,0
 11148 ;; Tracked objects:
 11149 ;;		On entry : 0/0
 11150 ;;		On exit  : 0/0
 11151 ;;		Unchanged: 0/0
 11152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11153 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11154 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11156 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11157 ;;Total ram usage:       10 bytes
 11158 ;; Hardware stack levels used:    1
 11159 ;; Hardware stack levels required when called:    2
 11160 ;; This function calls:
 11161 ;;		Nothing
 11162 ;; This function is called by:
 11163 ;;		_main
 11164 ;; This function uses a non-reentrant model
 11165 ;;
 11166                           
 11167                           	psect	text38
 11168  002674                     __ptext38:
 11169                           	opt stack 0
 11170  002674                     ___almod:
 11171                           	opt stack 28
 11172                           
 11173                           ;incstack = 0
 11174  002674  0E00               	movlw	0
 11175  002676  6E1D               	movwf	___almod@sign,c
 11176  002678  AE17               	btfss	___almod@dividend+3,7,c
 11177  00267A  D00A               	goto	l656
 11178  00267C  1E17               	comf	___almod@dividend+3,f,c
 11179  00267E  1E16               	comf	___almod@dividend+2,f,c
 11180  002680  1E15               	comf	___almod@dividend+1,f,c
 11181  002682  6C14               	negf	___almod@dividend,c
 11182  002684  0E00               	movlw	0
 11183  002686  2215               	addwfc	___almod@dividend+1,f,c
 11184  002688  2216               	addwfc	___almod@dividend+2,f,c
 11185  00268A  2217               	addwfc	___almod@dividend+3,f,c
 11186  00268C  0E01               	movlw	1
 11187  00268E  6E1D               	movwf	___almod@sign,c
 11188  002690                     l656:
 11189  002690  AE1B               	btfss	___almod@divisor+3,7,c
 11190  002692  D008               	goto	l657
 11191  002694  1E1B               	comf	___almod@divisor+3,f,c
 11192  002696  1E1A               	comf	___almod@divisor+2,f,c
 11193  002698  1E19               	comf	___almod@divisor+1,f,c
 11194  00269A  6C18               	negf	___almod@divisor,c
 11195  00269C  0E00               	movlw	0
 11196  00269E  2219               	addwfc	___almod@divisor+1,f,c
 11197  0026A0  221A               	addwfc	___almod@divisor+2,f,c
 11198  0026A2  221B               	addwfc	___almod@divisor+3,f,c
 11199  0026A4                     l657:
 11200  0026A4  5018               	movf	___almod@divisor,w,c
 11201  0026A6  1019               	iorwf	___almod@divisor+1,w,c
 11202  0026A8  101A               	iorwf	___almod@divisor+2,w,c
 11203  0026AA  101B               	iorwf	___almod@divisor+3,w,c
 11204  0026AC  B4D8               	btfsc	status,2,c
 11205  0026AE  D024               	goto	l664
 11206  0026B0  0E01               	movlw	1
 11207  0026B2  6E1C               	movwf	___almod@counter,c
 11208  0026B4  D006               	goto	l659
 11209  0026B6  90D8               	bcf	status,0,c
 11210  0026B8  3618               	rlcf	___almod@divisor,f,c
 11211  0026BA  3619               	rlcf	___almod@divisor+1,f,c
 11212  0026BC  361A               	rlcf	___almod@divisor+2,f,c
 11213  0026BE  361B               	rlcf	___almod@divisor+3,f,c
 11214  0026C0  2A1C               	incf	___almod@counter,f,c
 11215  0026C2                     l659:
 11216  0026C2  AE1B               	btfss	___almod@divisor+3,7,c
 11217  0026C4  D7F8               	goto	l660
 11218  0026C6                     u5100:
 11219  0026C6  5018               	movf	___almod@divisor,w,c
 11220  0026C8  5C14               	subwf	___almod@dividend,w,c
 11221  0026CA  5019               	movf	___almod@divisor+1,w,c
 11222  0026CC  5815               	subwfb	___almod@dividend+1,w,c
 11223  0026CE  501A               	movf	___almod@divisor+2,w,c
 11224  0026D0  5816               	subwfb	___almod@dividend+2,w,c
 11225  0026D2  501B               	movf	___almod@divisor+3,w,c
 11226  0026D4  5817               	subwfb	___almod@dividend+3,w,c
 11227  0026D6  A0D8               	btfss	status,0,c
 11228  0026D8  D008               	goto	l663
 11229  0026DA  5018               	movf	___almod@divisor,w,c
 11230  0026DC  5E14               	subwf	___almod@dividend,f,c
 11231  0026DE  5019               	movf	___almod@divisor+1,w,c
 11232  0026E0  5A15               	subwfb	___almod@dividend+1,f,c
 11233  0026E2  501A               	movf	___almod@divisor+2,w,c
 11234  0026E4  5A16               	subwfb	___almod@dividend+2,f,c
 11235  0026E6  501B               	movf	___almod@divisor+3,w,c
 11236  0026E8  5A17               	subwfb	___almod@dividend+3,f,c
 11237  0026EA                     l663:
 11238  0026EA  90D8               	bcf	status,0,c
 11239  0026EC  321B               	rrcf	___almod@divisor+3,f,c
 11240  0026EE  321A               	rrcf	___almod@divisor+2,f,c
 11241  0026F0  3219               	rrcf	___almod@divisor+1,f,c
 11242  0026F2  3218               	rrcf	___almod@divisor,f,c
 11243  0026F4  2E1C               	decfsz	___almod@counter,f,c
 11244  0026F6  D7E7               	goto	u5100
 11245  0026F8                     l664:
 11246  0026F8  501D               	movf	___almod@sign,w,c
 11247  0026FA  B4D8               	btfsc	status,2,c
 11248  0026FC  D008               	goto	l665
 11249  0026FE  1E17               	comf	___almod@dividend+3,f,c
 11250  002700  1E16               	comf	___almod@dividend+2,f,c
 11251  002702  1E15               	comf	___almod@dividend+1,f,c
 11252  002704  6C14               	negf	___almod@dividend,c
 11253  002706  0E00               	movlw	0
 11254  002708  2215               	addwfc	___almod@dividend+1,f,c
 11255  00270A  2216               	addwfc	___almod@dividend+2,f,c
 11256  00270C  2217               	addwfc	___almod@dividend+3,f,c
 11257  00270E                     l665:
 11258  00270E  C014  F014         	movff	___almod@dividend,?___almod
 11259  002712  C015  F015         	movff	___almod@dividend+1,?___almod+1
 11260  002716  C016  F016         	movff	___almod@dividend+2,?___almod+2
 11261  00271A  C017  F017         	movff	___almod@dividend+3,?___almod+3
 11262  00271E  0012               	return	
 11263  002720                     __end_of___almod:
 11264                           	opt stack 0
 11265                           tblptru	equ	0xFF8
 11266                           tblptrh	equ	0xFF7
 11267                           tblptrl	equ	0xFF6
 11268                           tablat	equ	0xFF5
 11269                           prodh	equ	0xFF4
 11270                           prodl	equ	0xFF3
 11271                           intcon	equ	0xFF2
 11272                           intcon2	equ	0xFF1
 11273                           intcon3	equ	0xFF0
 11274                           indf0	equ	0xFEF
 11275                           postinc0	equ	0xFEE
 11276                           fsr0h	equ	0xFEA
 11277                           fsr0l	equ	0xFE9
 11278                           wreg	equ	0xFE8
 11279                           postdec1	equ	0xFE5
 11280                           fsr1l	equ	0xFE1
 11281                           indf2	equ	0xFDF
 11282                           postinc2	equ	0xFDE
 11283                           postdec2	equ	0xFDD
 11284                           fsr2h	equ	0xFDA
 11285                           fsr2l	equ	0xFD9
 11286                           status	equ	0xFD8
 11287                           
 11288 ;; *************** function ___aldiv *****************
 11289 ;; Defined at:
 11290 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 11291 ;; Parameters:    Size  Location     Type
 11292 ;;  dividend        4   19[COMRAM] long 
 11293 ;;  divisor         4   23[COMRAM] long 
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;  quotient        4   29[COMRAM] long 
 11296 ;;  sign            1   28[COMRAM] unsigned char 
 11297 ;;  counter         1   27[COMRAM] unsigned char 
 11298 ;; Return value:  Size  Location     Type
 11299 ;;                  4   19[COMRAM] long 
 11300 ;; Registers used:
 11301 ;;		wreg, status,2, status,0
 11302 ;; Tracked objects:
 11303 ;;		On entry : 0/0
 11304 ;;		On exit  : 0/0
 11305 ;;		Unchanged: 0/0
 11306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11307 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11311 ;;Total ram usage:       14 bytes
 11312 ;; Hardware stack levels used:    1
 11313 ;; Hardware stack levels required when called:    2
 11314 ;; This function calls:
 11315 ;;		Nothing
 11316 ;; This function is called by:
 11317 ;;		_main
 11318 ;; This function uses a non-reentrant model
 11319 ;;
 11320                           
 11321                           	psect	text39
 11322  002436                     __ptext39:
 11323                           	opt stack 0
 11324  002436                     ___aldiv:
 11325                           	opt stack 28
 11326                           
 11327                           ;incstack = 0
 11328  002436  0E00               	movlw	0
 11329  002438  6E1D               	movwf	___aldiv@sign,c
 11330  00243A  AE1B               	btfss	___aldiv@divisor+3,7,c
 11331  00243C  D00A               	goto	l643
 11332  00243E  1E1B               	comf	___aldiv@divisor+3,f,c
 11333  002440  1E1A               	comf	___aldiv@divisor+2,f,c
 11334  002442  1E19               	comf	___aldiv@divisor+1,f,c
 11335  002444  6C18               	negf	___aldiv@divisor,c
 11336  002446  0E00               	movlw	0
 11337  002448  2219               	addwfc	___aldiv@divisor+1,f,c
 11338  00244A  221A               	addwfc	___aldiv@divisor+2,f,c
 11339  00244C  221B               	addwfc	___aldiv@divisor+3,f,c
 11340  00244E  0E01               	movlw	1
 11341  002450  6E1D               	movwf	___aldiv@sign,c
 11342  002452                     l643:
 11343  002452  AE17               	btfss	___aldiv@dividend+3,7,c
 11344  002454  D00A               	goto	l644
 11345  002456  1E17               	comf	___aldiv@dividend+3,f,c
 11346  002458  1E16               	comf	___aldiv@dividend+2,f,c
 11347  00245A  1E15               	comf	___aldiv@dividend+1,f,c
 11348  00245C  6C14               	negf	___aldiv@dividend,c
 11349  00245E  0E00               	movlw	0
 11350  002460  2215               	addwfc	___aldiv@dividend+1,f,c
 11351  002462  2216               	addwfc	___aldiv@dividend+2,f,c
 11352  002464  2217               	addwfc	___aldiv@dividend+3,f,c
 11353  002466  0E01               	movlw	1
 11354  002468  1A1D               	xorwf	___aldiv@sign,f,c
 11355  00246A                     l644:
 11356  00246A  0E00               	movlw	0
 11357  00246C  6E1E               	movwf	___aldiv@quotient,c
 11358  00246E  0E00               	movlw	0
 11359  002470  6E1F               	movwf	___aldiv@quotient+1,c
 11360  002472  0E00               	movlw	0
 11361  002474  6E20               	movwf	___aldiv@quotient+2,c
 11362  002476  0E00               	movlw	0
 11363  002478  6E21               	movwf	___aldiv@quotient+3,c
 11364  00247A  5018               	movf	___aldiv@divisor,w,c
 11365  00247C  1019               	iorwf	___aldiv@divisor+1,w,c
 11366  00247E  101A               	iorwf	___aldiv@divisor+2,w,c
 11367  002480  101B               	iorwf	___aldiv@divisor+3,w,c
 11368  002482  B4D8               	btfsc	status,2,c
 11369  002484  D02A               	goto	l651
 11370  002486  0E01               	movlw	1
 11371  002488  6E1C               	movwf	___aldiv@counter,c
 11372  00248A  D006               	goto	l646
 11373  00248C  90D8               	bcf	status,0,c
 11374  00248E  3618               	rlcf	___aldiv@divisor,f,c
 11375  002490  3619               	rlcf	___aldiv@divisor+1,f,c
 11376  002492  361A               	rlcf	___aldiv@divisor+2,f,c
 11377  002494  361B               	rlcf	___aldiv@divisor+3,f,c
 11378  002496  2A1C               	incf	___aldiv@counter,f,c
 11379  002498                     l646:
 11380  002498  AE1B               	btfss	___aldiv@divisor+3,7,c
 11381  00249A  D7F8               	goto	l647
 11382  00249C                     u5040:
 11383  00249C  90D8               	bcf	status,0,c
 11384  00249E  361E               	rlcf	___aldiv@quotient,f,c
 11385  0024A0  361F               	rlcf	___aldiv@quotient+1,f,c
 11386  0024A2  3620               	rlcf	___aldiv@quotient+2,f,c
 11387  0024A4  3621               	rlcf	___aldiv@quotient+3,f,c
 11388  0024A6  5018               	movf	___aldiv@divisor,w,c
 11389  0024A8  5C14               	subwf	___aldiv@dividend,w,c
 11390  0024AA  5019               	movf	___aldiv@divisor+1,w,c
 11391  0024AC  5815               	subwfb	___aldiv@dividend+1,w,c
 11392  0024AE  501A               	movf	___aldiv@divisor+2,w,c
 11393  0024B0  5816               	subwfb	___aldiv@dividend+2,w,c
 11394  0024B2  501B               	movf	___aldiv@divisor+3,w,c
 11395  0024B4  5817               	subwfb	___aldiv@dividend+3,w,c
 11396  0024B6  A0D8               	btfss	status,0,c
 11397  0024B8  D009               	goto	l650
 11398  0024BA  5018               	movf	___aldiv@divisor,w,c
 11399  0024BC  5E14               	subwf	___aldiv@dividend,f,c
 11400  0024BE  5019               	movf	___aldiv@divisor+1,w,c
 11401  0024C0  5A15               	subwfb	___aldiv@dividend+1,f,c
 11402  0024C2  501A               	movf	___aldiv@divisor+2,w,c
 11403  0024C4  5A16               	subwfb	___aldiv@dividend+2,f,c
 11404  0024C6  501B               	movf	___aldiv@divisor+3,w,c
 11405  0024C8  5A17               	subwfb	___aldiv@dividend+3,f,c
 11406  0024CA  801E               	bsf	___aldiv@quotient,0,c
 11407  0024CC                     l650:
 11408  0024CC  90D8               	bcf	status,0,c
 11409  0024CE  321B               	rrcf	___aldiv@divisor+3,f,c
 11410  0024D0  321A               	rrcf	___aldiv@divisor+2,f,c
 11411  0024D2  3219               	rrcf	___aldiv@divisor+1,f,c
 11412  0024D4  3218               	rrcf	___aldiv@divisor,f,c
 11413  0024D6  2E1C               	decfsz	___aldiv@counter,f,c
 11414  0024D8  D7E1               	goto	u5040
 11415  0024DA                     l651:
 11416  0024DA  501D               	movf	___aldiv@sign,w,c
 11417  0024DC  B4D8               	btfsc	status,2,c
 11418  0024DE  D008               	goto	l652
 11419  0024E0  1E21               	comf	___aldiv@quotient+3,f,c
 11420  0024E2  1E20               	comf	___aldiv@quotient+2,f,c
 11421  0024E4  1E1F               	comf	___aldiv@quotient+1,f,c
 11422  0024E6  6C1E               	negf	___aldiv@quotient,c
 11423  0024E8  0E00               	movlw	0
 11424  0024EA  221F               	addwfc	___aldiv@quotient+1,f,c
 11425  0024EC  2220               	addwfc	___aldiv@quotient+2,f,c
 11426  0024EE  2221               	addwfc	___aldiv@quotient+3,f,c
 11427  0024F0                     l652:
 11428  0024F0  C01E  F014         	movff	___aldiv@quotient,?___aldiv
 11429  0024F4  C01F  F015         	movff	___aldiv@quotient+1,?___aldiv+1
 11430  0024F8  C020  F016         	movff	___aldiv@quotient+2,?___aldiv+2
 11431  0024FC  C021  F017         	movff	___aldiv@quotient+3,?___aldiv+3
 11432  002500  0012               	return	
 11433  002502                     __end_of___aldiv:
 11434                           	opt stack 0
 11435                           tblptru	equ	0xFF8
 11436                           tblptrh	equ	0xFF7
 11437                           tblptrl	equ	0xFF6
 11438                           tablat	equ	0xFF5
 11439                           prodh	equ	0xFF4
 11440                           prodl	equ	0xFF3
 11441                           intcon	equ	0xFF2
 11442                           intcon2	equ	0xFF1
 11443                           intcon3	equ	0xFF0
 11444                           indf0	equ	0xFEF
 11445                           postinc0	equ	0xFEE
 11446                           fsr0h	equ	0xFEA
 11447                           fsr0l	equ	0xFE9
 11448                           wreg	equ	0xFE8
 11449                           postdec1	equ	0xFE5
 11450                           fsr1l	equ	0xFE1
 11451                           indf2	equ	0xFDF
 11452                           postinc2	equ	0xFDE
 11453                           postdec2	equ	0xFDD
 11454                           fsr2h	equ	0xFDA
 11455                           fsr2l	equ	0xFD9
 11456                           status	equ	0xFD8
 11457                           
 11458 ;; *************** function _highIsr *****************
 11459 ;; Defined at:
 11460 ;;		line 279 in file "HW_CLK.c"
 11461 ;; Parameters:    Size  Location     Type
 11462 ;;		None
 11463 ;; Auto vars:     Size  Location     Type
 11464 ;;		None
 11465 ;; Return value:  Size  Location     Type
 11466 ;;                  1    wreg      void 
 11467 ;; Registers used:
 11468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11469 ;; Tracked objects:
 11470 ;;		On entry : 0/0
 11471 ;;		On exit  : 0/0
 11472 ;;		Unchanged: 0/0
 11473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11476 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11477 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11478 ;;Total ram usage:       18 bytes
 11479 ;; Hardware stack levels used:    1
 11480 ;; Hardware stack levels required when called:    1
 11481 ;; This function calls:
 11482 ;;		_RX_ISR
 11483 ;;		_int0_isr
 11484 ;;		_int1_isr
 11485 ;;		_int2_isr
 11486 ;;		_timer_isr
 11487 ;; This function is called by:
 11488 ;;		Interrupt level 2
 11489 ;; This function uses a non-reentrant model
 11490 ;;
 11491                           
 11492                           	psect	intcode
 11493  000008                     __pintcode:
 11494                           	opt stack 0
 11495  000008                     _highIsr:
 11496                           	opt stack 23
 11497                           
 11498                           ;incstack = 0
 11499  000008  826A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11500  00000A  ED81  F012         	call	int_func,f	;refresh shadow registers
 11501                           tblptru	equ	0xFF8
 11502                           tblptrh	equ	0xFF7
 11503                           tblptrl	equ	0xFF6
 11504                           tablat	equ	0xFF5
 11505                           prodh	equ	0xFF4
 11506                           prodl	equ	0xFF3
 11507                           intcon	equ	0xFF2
 11508                           intcon2	equ	0xFF1
 11509                           intcon3	equ	0xFF0
 11510                           indf0	equ	0xFEF
 11511                           postinc0	equ	0xFEE
 11512                           fsr0h	equ	0xFEA
 11513                           fsr0l	equ	0xFE9
 11514                           wreg	equ	0xFE8
 11515                           postdec1	equ	0xFE5
 11516                           fsr1l	equ	0xFE1
 11517                           indf2	equ	0xFDF
 11518                           postinc2	equ	0xFDE
 11519                           postdec2	equ	0xFDD
 11520                           fsr2h	equ	0xFDA
 11521                           fsr2l	equ	0xFD9
 11522                           status	equ	0xFD8
 11523                           
 11524                           	psect	intcode_body
 11525  002502                     __pintcode_body:
 11526                           	opt stack 23
 11527  002502                     int_func:
 11528                           	opt stack 23
 11529  002502  0006               	pop		; remove dummy address from shadow register refresh
 11530  002504  CFFA F002          	movff	pclath,??_highIsr
 11531  002508  CFFB F003          	movff	pclatu,??_highIsr+1
 11532  00250C  CFE9 F004          	movff	fsr0l,??_highIsr+2
 11533  002510  CFEA F005          	movff	fsr0h,??_highIsr+3
 11534  002514  CFE1 F006          	movff	fsr1l,??_highIsr+4
 11535  002518  CFE2 F007          	movff	fsr1h,??_highIsr+5
 11536  00251C  CFD9 F008          	movff	fsr2l,??_highIsr+6
 11537  002520  CFDA F009          	movff	fsr2h,??_highIsr+7
 11538  002524  CFF3 F00A          	movff	prodl,??_highIsr+8
 11539  002528  CFF4 F00B          	movff	prodh,??_highIsr+9
 11540  00252C  CFF6 F00C          	movff	tblptrl,??_highIsr+10
 11541  002530  CFF7 F00D          	movff	tblptrh,??_highIsr+11
 11542  002534  CFF8 F00E          	movff	tblptru,??_highIsr+12
 11543  002538  CFF5 F00F          	movff	tablat,??_highIsr+13
 11544  00253C  C06A  F010         	movff	btemp,??_highIsr+14
 11545  002540  C06B  F011         	movff	btemp+1,??_highIsr+15
 11546  002544  C06C  F012         	movff	btemp+2,??_highIsr+16
 11547  002548  C06D  F013         	movff	btemp+3,??_highIsr+17
 11548                           
 11549                           ;HW_CLK.c: 281: if(INTCON3bits.INT1IF)
 11550  00254C  A0F0               	btfss	intcon3,0,c	;volatile
 11551  00254E  D003               	goto	i2l297
 11552                           
 11553                           ;HW_CLK.c: 282: {
 11554                           ;HW_CLK.c: 283: int1_isr();
 11555  002550  ECC6  F017         	call	_int1_isr	;wreg free
 11556                           
 11557                           ;HW_CLK.c: 284: }
 11558  002554  D012               	goto	i2l305
 11559  002556                     i2l297:
 11560                           
 11561                           ;HW_CLK.c: 286: else if(INTCON3bits.INT2F){
 11562  002556  A2F0               	btfss	intcon3,1,c	;volatile
 11563  002558  D003               	goto	i2l299
 11564                           
 11565                           ;HW_CLK.c: 287: int2_isr();
 11566  00255A  ECBA  F017         	call	_int2_isr	;wreg free
 11567                           
 11568                           ;HW_CLK.c: 288: }
 11569  00255E  D00D               	goto	i2l305
 11570  002560                     i2l299:
 11571                           
 11572                           ;HW_CLK.c: 292: else if(INTCONbits.TMR0IF)
 11573  002560  A4F2               	btfss	intcon,2,c	;volatile
 11574  002562  D003               	goto	i2l301
 11575                           
 11576                           ;HW_CLK.c: 293: {
 11577                           ;HW_CLK.c: 294: timer_isr();
 11578  002564  EC7C  F016         	call	_timer_isr	;wreg free
 11579                           
 11580                           ;HW_CLK.c: 295: }
 11581  002568  D008               	goto	i2l305
 11582  00256A                     i2l301:
 11583                           
 11584                           ;HW_CLK.c: 296: else if(PIR1bits.RCIF)
 11585  00256A  AA9E               	btfss	3998,5,c	;volatile
 11586  00256C  D003               	goto	i2l303
 11587                           
 11588                           ;HW_CLK.c: 297: {
 11589                           ;HW_CLK.c: 298: RX_ISR();
 11590  00256E  EC9C  F014         	call	_RX_ISR	;wreg free
 11591                           
 11592                           ;HW_CLK.c: 299: }
 11593  002572  D003               	goto	i2l305
 11594  002574                     i2l303:
 11595                           
 11596                           ;HW_CLK.c: 300: else if(INTCONbits.INT0IF)
 11597  002574  B2F2               	btfsc	intcon,1,c	;volatile
 11598                           
 11599                           ;HW_CLK.c: 302: {
 11600                           ;HW_CLK.c: 303: int0_isr();
 11601  002576  ECD2  F017         	call	_int0_isr	;wreg free
 11602  00257A                     i2l305:
 11603  00257A  C013  F06D         	movff	??_highIsr+17,btemp+3
 11604  00257E  C012  F06C         	movff	??_highIsr+16,btemp+2
 11605  002582  C011  F06B         	movff	??_highIsr+15,btemp+1
 11606  002586  C010  F06A         	movff	??_highIsr+14,btemp
 11607  00258A  C00F  FFF5         	movff	??_highIsr+13,tablat
 11608  00258E  C00E  FFF8         	movff	??_highIsr+12,tblptru
 11609  002592  C00D  FFF7         	movff	??_highIsr+11,tblptrh
 11610  002596  C00C  FFF6         	movff	??_highIsr+10,tblptrl
 11611  00259A  C00B  FFF4         	movff	??_highIsr+9,prodh
 11612  00259E  C00A  FFF3         	movff	??_highIsr+8,prodl
 11613  0025A2  C009  FFDA         	movff	??_highIsr+7,fsr2h
 11614  0025A6  C008  FFD9         	movff	??_highIsr+6,fsr2l
 11615  0025AA  C007  FFE2         	movff	??_highIsr+5,fsr1h
 11616  0025AE  C006  FFE1         	movff	??_highIsr+4,fsr1l
 11617  0025B2  C005  FFEA         	movff	??_highIsr+3,fsr0h
 11618  0025B6  C004  FFE9         	movff	??_highIsr+2,fsr0l
 11619  0025BA  C003  FFFB         	movff	??_highIsr+1,pclatu
 11620  0025BE  C002  FFFA         	movff	??_highIsr,pclath
 11621  0025C2  926A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11622  0025C4  0011               	retfie		f
 11623  0025C6                     __end_of_highIsr:
 11624                           	opt stack 0
 11625                           pclatu	equ	0xFFB
 11626                           pclath	equ	0xFFA
 11627                           tblptru	equ	0xFF8
 11628                           tblptrh	equ	0xFF7
 11629                           tblptrl	equ	0xFF6
 11630                           tablat	equ	0xFF5
 11631                           prodh	equ	0xFF4
 11632                           prodl	equ	0xFF3
 11633                           intcon	equ	0xFF2
 11634                           intcon2	equ	0xFF1
 11635                           intcon3	equ	0xFF0
 11636                           indf0	equ	0xFEF
 11637                           postinc0	equ	0xFEE
 11638                           fsr0h	equ	0xFEA
 11639                           fsr0l	equ	0xFE9
 11640                           wreg	equ	0xFE8
 11641                           postdec1	equ	0xFE5
 11642                           fsr1h	equ	0xFE2
 11643                           fsr1l	equ	0xFE1
 11644                           indf2	equ	0xFDF
 11645                           postinc2	equ	0xFDE
 11646                           postdec2	equ	0xFDD
 11647                           fsr2h	equ	0xFDA
 11648                           fsr2l	equ	0xFD9
 11649                           status	equ	0xFD8
 11650                           
 11651 ;; *************** function _timer_isr *****************
 11652 ;; Defined at:
 11653 ;;		line 266 in file "HW_CLK.c"
 11654 ;; Parameters:    Size  Location     Type
 11655 ;;		None
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;		None
 11658 ;; Return value:  Size  Location     Type
 11659 ;;                  1    wreg      void 
 11660 ;; Registers used:
 11661 ;;		wreg, status,2, status,0
 11662 ;; Tracked objects:
 11663 ;;		On entry : 0/0
 11664 ;;		On exit  : 0/0
 11665 ;;		Unchanged: 0/0
 11666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11671 ;;Total ram usage:        0 bytes
 11672 ;; Hardware stack levels used:    1
 11673 ;; This function calls:
 11674 ;;		Nothing
 11675 ;; This function is called by:
 11676 ;;		_highIsr
 11677 ;; This function uses a non-reentrant model
 11678 ;;
 11679                           
 11680                           	psect	text41
 11681  002CF8                     __ptext41:
 11682                           	opt stack 0
 11683  002CF8                     _timer_isr:
 11684                           	opt stack 23
 11685                           
 11686                           ;HW_CLK.c: 268: if(state != SET_CLOCK){
 11687                           
 11688                           ;incstack = 0
 11689  002CF8  0101               	movlb	1	; () banked
 11690  002CFA  055A               	decf	_state& (0+255),w,b
 11691  002CFC  B4D8               	btfsc	status,2,c
 11692  002CFE  D019               	goto	i2l291
 11693                           
 11694                           ; BSR set to: 1
 11695                           ;HW_CLK.c: 269: Clock++;
 11696  002D00  0E01               	movlw	1
 11697  002D02  2751               	addwf	_Clock& (0+255),f,b
 11698  002D04  0E00               	movlw	0
 11699  002D06  2352               	addwfc	(_Clock+1)& (0+255),f,b
 11700  002D08  2353               	addwfc	(_Clock+2)& (0+255),f,b
 11701  002D0A  2354               	addwfc	(_Clock+3)& (0+255),f,b
 11702                           
 11703                           ;HW_CLK.c: 270: if (Clock >= 24*3600) Clock = 0;
 11704  002D0C  BF54               	btfsc	(_Clock+3)& (0+255),7,b
 11705  002D0E  D011               	goto	i2l291
 11706  002D10  5154               	movf	(_Clock+3)& (0+255),w,b
 11707  002D12  1153               	iorwf	(_Clock+2)& (0+255),w,b
 11708  002D14  E106               	bnz	i2u424_40
 11709  002D16  0E80               	movlw	128
 11710  002D18  5D51               	subwf	_Clock& (0+255),w,b
 11711  002D1A  0E51               	movlw	81
 11712  002D1C  5952               	subwfb	(_Clock+1)& (0+255),w,b
 11713  002D1E  A0D8               	btfss	status,0,c
 11714  002D20  D008               	goto	i2l291
 11715  002D22                     i2u424_40:
 11716                           
 11717                           ; BSR set to: 1
 11718  002D22  0E00               	movlw	0
 11719  002D24  6F51               	movwf	_Clock& (0+255),b
 11720  002D26  0E00               	movlw	0
 11721  002D28  6F52               	movwf	(_Clock+1)& (0+255),b
 11722  002D2A  0E00               	movlw	0
 11723  002D2C  6F53               	movwf	(_Clock+2)& (0+255),b
 11724  002D2E  0E00               	movlw	0
 11725  002D30  6F54               	movwf	(_Clock+3)& (0+255),b
 11726  002D32                     i2l291:
 11727                           
 11728                           ; BSR set to: 1
 11729                           ;HW_CLK.c: 271: }
 11730                           ;HW_CLK.c: 272: TMR0H = (unsigned char) ((3036 >> 8) & 0x00FF);
 11731                           
 11732                           ; BSR set to: 1
 11733  002D32  0E0B               	movlw	11
 11734  002D34  6ED7               	movwf	4055,c	;volatile
 11735                           
 11736                           ;HW_CLK.c: 273: TMR0L = (unsigned char) (3036 & 0x00FF);
 11737  002D36  0EDC               	movlw	220
 11738  002D38  6ED6               	movwf	4054,c	;volatile
 11739                           
 11740                           ; BSR set to: 1
 11741                           ;HW_CLK.c: 275: INTCONbits.T0IF = 0;
 11742  002D3A  94F2               	bcf	intcon,2,c	;volatile
 11743                           
 11744                           ; BSR set to: 1
 11745  002D3C  0012               	return		;funcret
 11746  002D3E                     __end_of_timer_isr:
 11747                           	opt stack 0
 11748                           pclatu	equ	0xFFB
 11749                           pclath	equ	0xFFA
 11750                           tblptru	equ	0xFF8
 11751                           tblptrh	equ	0xFF7
 11752                           tblptrl	equ	0xFF6
 11753                           tablat	equ	0xFF5
 11754                           prodh	equ	0xFF4
 11755                           prodl	equ	0xFF3
 11756                           intcon	equ	0xFF2
 11757                           intcon2	equ	0xFF1
 11758                           intcon3	equ	0xFF0
 11759                           indf0	equ	0xFEF
 11760                           postinc0	equ	0xFEE
 11761                           fsr0h	equ	0xFEA
 11762                           fsr0l	equ	0xFE9
 11763                           wreg	equ	0xFE8
 11764                           postdec1	equ	0xFE5
 11765                           fsr1h	equ	0xFE2
 11766                           fsr1l	equ	0xFE1
 11767                           indf2	equ	0xFDF
 11768                           postinc2	equ	0xFDE
 11769                           postdec2	equ	0xFDD
 11770                           fsr2h	equ	0xFDA
 11771                           fsr2l	equ	0xFD9
 11772                           status	equ	0xFD8
 11773                           
 11774 ;; *************** function _int2_isr *****************
 11775 ;; Defined at:
 11776 ;;		line 256 in file "HW_CLK.c"
 11777 ;; Parameters:    Size  Location     Type
 11778 ;;		None
 11779 ;; Auto vars:     Size  Location     Type
 11780 ;;		None
 11781 ;; Return value:  Size  Location     Type
 11782 ;;                  1    wreg      void 
 11783 ;; Registers used:
 11784 ;;		wreg, status,2, status,0
 11785 ;; Tracked objects:
 11786 ;;		On entry : 0/0
 11787 ;;		On exit  : 0/0
 11788 ;;		Unchanged: 0/0
 11789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11794 ;;Total ram usage:        0 bytes
 11795 ;; Hardware stack levels used:    1
 11796 ;; This function calls:
 11797 ;;		Nothing
 11798 ;; This function is called by:
 11799 ;;		_highIsr
 11800 ;; This function uses a non-reentrant model
 11801 ;;
 11802                           
 11803                           	psect	text42
 11804  002F74                     __ptext42:
 11805                           	opt stack 0
 11806  002F74                     _int2_isr:
 11807                           	opt stack 23
 11808                           
 11809                           ;HW_CLK.c: 258: INTCON3bits.INT2IF =0;
 11810                           
 11811                           ; BSR set to: 1
 11812                           ;incstack = 0
 11813  002F74  92F0               	bcf	intcon3,1,c	;volatile
 11814                           
 11815                           ;HW_CLK.c: 259: if(!Flags.b2){
 11816  002F76  0101               	movlb	1	; () banked
 11817  002F78  B557               	btfsc	_Flags& (0+255),2,b
 11818  002F7A  0012               	return	
 11819                           
 11820                           ; BSR set to: 1
 11821                           ;HW_CLK.c: 260: IncMode++;
 11822  002F7C  2B59               	incf	_IncMode& (0+255),f,b
 11823                           
 11824                           ; BSR set to: 1
 11825                           ;HW_CLK.c: 261: if(IncMode >= INC_NONE ) IncMode = INC_SEC;
 11826  002F7E  0E02               	movlw	2
 11827  002F80  6559               	cpfsgt	_IncMode& (0+255),b
 11828  002F82  D002               	goto	i2l286
 11829                           
 11830                           ; BSR set to: 1
 11831  002F84  0E00               	movlw	0
 11832  002F86  6F59               	movwf	_IncMode& (0+255),b
 11833  002F88                     i2l286:
 11834                           
 11835                           ; BSR set to: 1
 11836                           ;HW_CLK.c: 263: Flags.b2 =1;
 11837                           
 11838                           ; BSR set to: 1
 11839  002F88  8557               	bsf	_Flags& (0+255),2,b
 11840  002F8A  0012               	return	
 11841  002F8C                     __end_of_int2_isr:
 11842                           	opt stack 0
 11843                           pclatu	equ	0xFFB
 11844                           pclath	equ	0xFFA
 11845                           tblptru	equ	0xFF8
 11846                           tblptrh	equ	0xFF7
 11847                           tblptrl	equ	0xFF6
 11848                           tablat	equ	0xFF5
 11849                           prodh	equ	0xFF4
 11850                           prodl	equ	0xFF3
 11851                           intcon	equ	0xFF2
 11852                           intcon2	equ	0xFF1
 11853                           intcon3	equ	0xFF0
 11854                           indf0	equ	0xFEF
 11855                           postinc0	equ	0xFEE
 11856                           fsr0h	equ	0xFEA
 11857                           fsr0l	equ	0xFE9
 11858                           wreg	equ	0xFE8
 11859                           postdec1	equ	0xFE5
 11860                           fsr1h	equ	0xFE2
 11861                           fsr1l	equ	0xFE1
 11862                           indf2	equ	0xFDF
 11863                           postinc2	equ	0xFDE
 11864                           postdec2	equ	0xFDD
 11865                           fsr2h	equ	0xFDA
 11866                           fsr2l	equ	0xFD9
 11867                           status	equ	0xFD8
 11868                           
 11869 ;; *************** function _int1_isr *****************
 11870 ;; Defined at:
 11871 ;;		line 236 in file "HW_CLK.c"
 11872 ;; Parameters:    Size  Location     Type
 11873 ;;		None
 11874 ;; Auto vars:     Size  Location     Type
 11875 ;;		None
 11876 ;; Return value:  Size  Location     Type
 11877 ;;                  1    wreg      void 
 11878 ;; Registers used:
 11879 ;;		wreg, status,2, status,0
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11889 ;;Total ram usage:        0 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; This function calls:
 11892 ;;		Nothing
 11893 ;; This function is called by:
 11894 ;;		_highIsr
 11895 ;; This function uses a non-reentrant model
 11896 ;;
 11897                           
 11898                           	psect	text43
 11899  002F8C                     __ptext43:
 11900                           	opt stack 0
 11901  002F8C                     _int1_isr:
 11902                           	opt stack 23
 11903                           
 11904                           ;HW_CLK.c: 238: if(!Flags.b1){
 11905                           
 11906                           ; BSR set to: 1
 11907                           ;incstack = 0
 11908  002F8C  0101               	movlb	1	; () banked
 11909  002F8E  B357               	btfsc	_Flags& (0+255),1,b
 11910  002F90  D007               	goto	i2l275
 11911                           
 11912                           ; BSR set to: 1
 11913                           ;HW_CLK.c: 239: state++;
 11914  002F92  2B5A               	incf	_state& (0+255),f,b
 11915                           
 11916                           ; BSR set to: 1
 11917                           ;HW_CLK.c: 240: if(state >= s_NONE) state = IDLE;
 11918  002F94  0E01               	movlw	1
 11919  002F96  655A               	cpfsgt	_state& (0+255),b
 11920  002F98  D002               	goto	i2l276
 11921                           
 11922                           ; BSR set to: 1
 11923  002F9A  0E00               	movlw	0
 11924  002F9C  6F5A               	movwf	_state& (0+255),b
 11925  002F9E                     i2l276:
 11926                           
 11927                           ; BSR set to: 1
 11928                           ;HW_CLK.c: 241: Flags.b1 =1;
 11929                           
 11930                           ; BSR set to: 1
 11931  002F9E  8357               	bsf	_Flags& (0+255),1,b
 11932  002FA0                     i2l275:
 11933                           
 11934                           ; BSR set to: 1
 11935                           ;HW_CLK.c: 242: }
 11936                           ;HW_CLK.c: 243: INTCON3bits.INT1IF =0;
 11937                           
 11938                           ; BSR set to: 1
 11939  002FA0  90F0               	bcf	intcon3,0,c	;volatile
 11940                           
 11941                           ; BSR set to: 1
 11942  002FA2  0012               	return		;funcret
 11943  002FA4                     __end_of_int1_isr:
 11944                           	opt stack 0
 11945                           pclatu	equ	0xFFB
 11946                           pclath	equ	0xFFA
 11947                           tblptru	equ	0xFF8
 11948                           tblptrh	equ	0xFF7
 11949                           tblptrl	equ	0xFF6
 11950                           tablat	equ	0xFF5
 11951                           prodh	equ	0xFF4
 11952                           prodl	equ	0xFF3
 11953                           intcon	equ	0xFF2
 11954                           intcon2	equ	0xFF1
 11955                           intcon3	equ	0xFF0
 11956                           indf0	equ	0xFEF
 11957                           postinc0	equ	0xFEE
 11958                           fsr0h	equ	0xFEA
 11959                           fsr0l	equ	0xFE9
 11960                           wreg	equ	0xFE8
 11961                           postdec1	equ	0xFE5
 11962                           fsr1h	equ	0xFE2
 11963                           fsr1l	equ	0xFE1
 11964                           indf2	equ	0xFDF
 11965                           postinc2	equ	0xFDE
 11966                           postdec2	equ	0xFDD
 11967                           fsr2h	equ	0xFDA
 11968                           fsr2l	equ	0xFD9
 11969                           status	equ	0xFD8
 11970                           
 11971 ;; *************** function _int0_isr *****************
 11972 ;; Defined at:
 11973 ;;		line 245 in file "HW_CLK.c"
 11974 ;; Parameters:    Size  Location     Type
 11975 ;;		None
 11976 ;; Auto vars:     Size  Location     Type
 11977 ;;		None
 11978 ;; Return value:  Size  Location     Type
 11979 ;;                  1    wreg      void 
 11980 ;; Registers used:
 11981 ;;		wreg, status,2, status,0
 11982 ;; Tracked objects:
 11983 ;;		On entry : 0/0
 11984 ;;		On exit  : 0/0
 11985 ;;		Unchanged: 0/0
 11986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11991 ;;Total ram usage:        0 bytes
 11992 ;; Hardware stack levels used:    1
 11993 ;; This function calls:
 11994 ;;		Nothing
 11995 ;; This function is called by:
 11996 ;;		_highIsr
 11997 ;; This function uses a non-reentrant model
 11998 ;;
 11999                           
 12000                           	psect	text44
 12001  002FA4                     __ptext44:
 12002                           	opt stack 0
 12003  002FA4                     _int0_isr:
 12004                           	opt stack 23
 12005                           
 12006                           ;HW_CLK.c: 247: if(!Flags.b0){
 12007                           
 12008                           ; BSR set to: 1
 12009                           ;incstack = 0
 12010  002FA4  0101               	movlb	1	; () banked
 12011  002FA6  B157               	btfsc	_Flags& (0+255),0,b
 12012  002FA8  D007               	goto	i2l280
 12013                           
 12014                           ; BSR set to: 1
 12015                           ;HW_CLK.c: 248: state_L4++;
 12016  002FAA  2B58               	incf	_state_L4& (0+255),f,b
 12017                           
 12018                           ; BSR set to: 1
 12019                           ;HW_CLK.c: 251: if(state_L4 >= DISP_NONE) state_L4 = DISP_AI01;
 12020  002FAC  0E01               	movlw	1
 12021  002FAE  6558               	cpfsgt	_state_L4& (0+255),b
 12022  002FB0  D002               	goto	i2l281
 12023                           
 12024                           ; BSR set to: 1
 12025  002FB2  0E00               	movlw	0
 12026  002FB4  6F58               	movwf	_state_L4& (0+255),b
 12027  002FB6                     i2l281:
 12028                           
 12029                           ; BSR set to: 1
 12030                           ;HW_CLK.c: 252: Flags.b0 =1;
 12031                           
 12032                           ; BSR set to: 1
 12033  002FB6  8157               	bsf	_Flags& (0+255),0,b
 12034  002FB8                     i2l280:
 12035                           
 12036                           ; BSR set to: 1
 12037                           ;HW_CLK.c: 253: }
 12038                           ;HW_CLK.c: 254: INTCONbits.INT0IF =0;
 12039                           
 12040                           ; BSR set to: 1
 12041  002FB8  92F2               	bcf	intcon,1,c	;volatile
 12042                           
 12043                           ; BSR set to: 1
 12044  002FBA  0012               	return		;funcret
 12045  002FBC                     __end_of_int0_isr:
 12046                           	opt stack 0
 12047                           pclatu	equ	0xFFB
 12048                           pclath	equ	0xFFA
 12049                           tblptru	equ	0xFF8
 12050                           tblptrh	equ	0xFF7
 12051                           tblptrl	equ	0xFF6
 12052                           tablat	equ	0xFF5
 12053                           prodh	equ	0xFF4
 12054                           prodl	equ	0xFF3
 12055                           intcon	equ	0xFF2
 12056                           intcon2	equ	0xFF1
 12057                           intcon3	equ	0xFF0
 12058                           indf0	equ	0xFEF
 12059                           postinc0	equ	0xFEE
 12060                           fsr0h	equ	0xFEA
 12061                           fsr0l	equ	0xFE9
 12062                           wreg	equ	0xFE8
 12063                           postdec1	equ	0xFE5
 12064                           fsr1h	equ	0xFE2
 12065                           fsr1l	equ	0xFE1
 12066                           indf2	equ	0xFDF
 12067                           postinc2	equ	0xFDE
 12068                           postdec2	equ	0xFDD
 12069                           fsr2h	equ	0xFDA
 12070                           fsr2l	equ	0xFD9
 12071                           status	equ	0xFD8
 12072                           
 12073 ;; *************** function _RX_ISR *****************
 12074 ;; Defined at:
 12075 ;;		line 205 in file "HW_CLK.c"
 12076 ;; Parameters:    Size  Location     Type
 12077 ;;		None
 12078 ;; Auto vars:     Size  Location     Type
 12079 ;;		None
 12080 ;; Return value:  Size  Location     Type
 12081 ;;                  1    wreg      void 
 12082 ;; Registers used:
 12083 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12084 ;; Tracked objects:
 12085 ;;		On entry : 0/0
 12086 ;;		On exit  : 0/0
 12087 ;;		Unchanged: 0/0
 12088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12091 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12092 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12093 ;;Total ram usage:        1 bytes
 12094 ;; Hardware stack levels used:    1
 12095 ;; This function calls:
 12096 ;;		Nothing
 12097 ;; This function is called by:
 12098 ;;		_highIsr
 12099 ;; This function uses a non-reentrant model
 12100 ;;
 12101                           
 12102                           	psect	text45
 12103  002938                     __ptext45:
 12104                           	opt stack 0
 12105  002938                     _RX_ISR:
 12106                           	opt stack 23
 12107                           
 12108                           ;HW_CLK.c: 208: ch=RCREG;
 12109                           
 12110                           ; BSR set to: 1
 12111                           ;incstack = 0
 12112  002938  CFAE F069          	movff	4014,_ch	;volatile
 12113                           
 12114                           ;HW_CLK.c: 209: if (ready)return;
 12115  00293C  0101               	movlb	1	; () banked
 12116  00293E  5156               	movf	_ready& (0+255),w,b
 12117  002940  A4D8               	btfss	status,2,c
 12118  002942  0012               	return	
 12119                           
 12120                           ; BSR set to: 1
 12121                           ;HW_CLK.c: 211: if(ch == '<')
 12122                           
 12123                           ; BSR set to: 1
 12124                           
 12125                           ; BSR set to: 1
 12126  002944  0E3C               	movlw	60
 12127  002946  1869               	xorwf	_ch,w,c
 12128  002948  A4D8               	btfss	status,2,c
 12129  00294A  D00F               	goto	i2l268
 12130                           
 12131                           ; BSR set to: 1
 12132                           ;HW_CLK.c: 214: {
 12133                           ;HW_CLK.c: 215: index=0;
 12134  00294C  0E00               	movlw	0
 12135  00294E  6E66               	movwf	_index+1,c
 12136  002950  0E00               	movlw	0
 12137  002952  6E65               	movwf	_index,c
 12138                           
 12139                           ; BSR set to: 1
 12140                           ;HW_CLK.c: 216: array[index++]=ch;
 12141  002954  0E5B               	movlw	low _array
 12142  002956  2465               	addwf	_index,w,c
 12143  002958  6ED9               	movwf	fsr2l,c
 12144  00295A  0E01               	movlw	high _array
 12145  00295C  2066               	addwfc	_index+1,w,c
 12146  00295E  6EDA               	movwf	fsr2h,c
 12147  002960  C069  FFDF         	movff	_ch,indf2
 12148                           
 12149                           ; BSR set to: 1
 12150  002964  4A65               	infsnz	_index,f,c
 12151  002966  2A66               	incf	_index+1,f,c
 12152                           
 12153                           ;HW_CLK.c: 217: }
 12154  002968  0012               	return	
 12155  00296A                     i2l268:
 12156                           
 12157                           ; BSR set to: 1
 12158                           ;HW_CLK.c: 219: else if(index < max)
 12159                           
 12160                           ; BSR set to: 1
 12161  00296A  505F               	movf	_max,w,c
 12162  00296C  5C65               	subwf	_index,w,c
 12163  00296E  5066               	movf	_index+1,w,c
 12164  002970  0A80               	xorlw	128
 12165  002972  6E01               	movwf	??_RX_ISR& (0+255),c
 12166  002974  5060               	movf	_max+1,w,c
 12167  002976  0A80               	xorlw	128
 12168  002978  5801               	subwfb	??_RX_ISR& (0+255),w,c
 12169  00297A  B0D8               	btfsc	status,0,c
 12170  00297C  0012               	return	
 12171                           
 12172                           ; BSR set to: 1
 12173                           ;HW_CLK.c: 220: {
 12174                           ;HW_CLK.c: 221: if(array[0]!='<') return;
 12175  00297E  0E3C               	movlw	60
 12176  002980  195B               	xorwf	_array& (0+255),w,b
 12177  002982  A4D8               	btfss	status,2,c
 12178  002984  0012               	return	
 12179                           
 12180                           ; BSR set to: 1
 12181                           ;HW_CLK.c: 222: array[index++]=ch;
 12182                           
 12183                           ; BSR set to: 1
 12184                           
 12185                           ; BSR set to: 1
 12186  002986  0E5B               	movlw	low _array
 12187  002988  2465               	addwf	_index,w,c
 12188  00298A  6ED9               	movwf	fsr2l,c
 12189  00298C  0E01               	movlw	high _array
 12190  00298E  2066               	addwfc	_index+1,w,c
 12191  002990  6EDA               	movwf	fsr2h,c
 12192  002992  C069  FFDF         	movff	_ch,indf2
 12193                           
 12194                           ; BSR set to: 1
 12195  002996  4A65               	infsnz	_index,f,c
 12196  002998  2A66               	incf	_index+1,f,c
 12197                           
 12198                           ; BSR set to: 1
 12199                           ;HW_CLK.c: 224: if(ch =='>')
 12200  00299A  0E3E               	movlw	62
 12201  00299C  1869               	xorwf	_ch,w,c
 12202  00299E  A4D8               	btfss	status,2,c
 12203  0029A0  0012               	return	
 12204                           
 12205                           ; BSR set to: 1
 12206                           ;HW_CLK.c: 225: {
 12207                           ;HW_CLK.c: 226: ready =1;
 12208  0029A2  0E01               	movlw	1
 12209  0029A4  6F56               	movwf	_ready& (0+255),b
 12210                           
 12211                           ; BSR set to: 1
 12212                           ;HW_CLK.c: 227: array[index]=0;
 12213  0029A6  0E5B               	movlw	low _array
 12214  0029A8  2465               	addwf	_index,w,c
 12215  0029AA  6ED9               	movwf	fsr2l,c
 12216  0029AC  0E01               	movlw	high _array
 12217  0029AE  2066               	addwfc	_index+1,w,c
 12218  0029B0  6EDA               	movwf	fsr2h,c
 12219  0029B2  0E00               	movlw	0
 12220  0029B4  6EDF               	movwf	indf2,c
 12221                           
 12222                           ; BSR set to: 1
 12223                           
 12224                           ; BSR set to: 1
 12225  0029B6  0012               	return	
 12226  0029B8                     __end_of_RX_ISR:
 12227                           	opt stack 0
 12228                           pclatu	equ	0xFFB
 12229                           pclath	equ	0xFFA
 12230                           tblptru	equ	0xFF8
 12231                           tblptrh	equ	0xFF7
 12232                           tblptrl	equ	0xFF6
 12233                           tablat	equ	0xFF5
 12234                           prodh	equ	0xFF4
 12235                           prodl	equ	0xFF3
 12236                           intcon	equ	0xFF2
 12237                           intcon2	equ	0xFF1
 12238                           intcon3	equ	0xFF0
 12239                           indf0	equ	0xFEF
 12240                           postinc0	equ	0xFEE
 12241                           fsr0h	equ	0xFEA
 12242                           fsr0l	equ	0xFE9
 12243                           wreg	equ	0xFE8
 12244                           postdec1	equ	0xFE5
 12245                           fsr1h	equ	0xFE2
 12246                           fsr1l	equ	0xFE1
 12247                           indf2	equ	0xFDF
 12248                           postinc2	equ	0xFDE
 12249                           postdec2	equ	0xFDD
 12250                           fsr2h	equ	0xFDA
 12251                           fsr2l	equ	0xFD9
 12252                           status	equ	0xFD8
 12253                           pclatu	equ	0xFFB
 12254                           pclath	equ	0xFFA
 12255                           tblptru	equ	0xFF8
 12256                           tblptrh	equ	0xFF7
 12257                           tblptrl	equ	0xFF6
 12258                           tablat	equ	0xFF5
 12259                           prodh	equ	0xFF4
 12260                           prodl	equ	0xFF3
 12261                           intcon	equ	0xFF2
 12262                           intcon2	equ	0xFF1
 12263                           intcon3	equ	0xFF0
 12264                           indf0	equ	0xFEF
 12265                           postinc0	equ	0xFEE
 12266                           fsr0h	equ	0xFEA
 12267                           fsr0l	equ	0xFE9
 12268                           wreg	equ	0xFE8
 12269                           postdec1	equ	0xFE5
 12270                           fsr1h	equ	0xFE2
 12271                           fsr1l	equ	0xFE1
 12272                           indf2	equ	0xFDF
 12273                           postinc2	equ	0xFDE
 12274                           postdec2	equ	0xFDD
 12275                           fsr2h	equ	0xFDA
 12276                           fsr2l	equ	0xFD9
 12277                           status	equ	0xFD8
 12278                           
 12279                           	psect	rparam
 12280  0000                     pclatu	equ	0xFFB
 12281                           pclath	equ	0xFFA
 12282                           tblptru	equ	0xFF8
 12283                           tblptrh	equ	0xFF7
 12284                           tblptrl	equ	0xFF6
 12285                           tablat	equ	0xFF5
 12286                           prodh	equ	0xFF4
 12287                           prodl	equ	0xFF3
 12288                           intcon	equ	0xFF2
 12289                           intcon2	equ	0xFF1
 12290                           intcon3	equ	0xFF0
 12291                           indf0	equ	0xFEF
 12292                           postinc0	equ	0xFEE
 12293                           fsr0h	equ	0xFEA
 12294                           fsr0l	equ	0xFE9
 12295                           wreg	equ	0xFE8
 12296                           postdec1	equ	0xFE5
 12297                           fsr1h	equ	0xFE2
 12298                           fsr1l	equ	0xFE1
 12299                           indf2	equ	0xFDF
 12300                           postinc2	equ	0xFDE
 12301                           postdec2	equ	0xFDD
 12302                           fsr2h	equ	0xFDA
 12303                           fsr2l	equ	0xFD9
 12304                           status	equ	0xFD8
 12305                           
 12306                           	psect	temp
 12307  00006A                     btemp:
 12308                           	opt stack 0
 12309  00006A                     	ds	1
 12310  0000                     int$flags	set	btemp
 12311  0000                     wtemp6	set	btemp+1
 12312                           pclatu	equ	0xFFB
 12313                           pclath	equ	0xFFA
 12314                           tblptru	equ	0xFF8
 12315                           tblptrh	equ	0xFF7
 12316                           tblptrl	equ	0xFF6
 12317                           tablat	equ	0xFF5
 12318                           prodh	equ	0xFF4
 12319                           prodl	equ	0xFF3
 12320                           intcon	equ	0xFF2
 12321                           intcon2	equ	0xFF1
 12322                           intcon3	equ	0xFF0
 12323                           indf0	equ	0xFEF
 12324                           postinc0	equ	0xFEE
 12325                           fsr0h	equ	0xFEA
 12326                           fsr0l	equ	0xFE9
 12327                           wreg	equ	0xFE8
 12328                           postdec1	equ	0xFE5
 12329                           fsr1h	equ	0xFE2
 12330                           fsr1l	equ	0xFE1
 12331                           indf2	equ	0xFDF
 12332                           postinc2	equ	0xFDE
 12333                           postdec2	equ	0xFDD
 12334                           fsr2h	equ	0xFDA
 12335                           fsr2l	equ	0xFD9
 12336                           status	equ	0xFD8


Data Sizes:
    Strings     302
    Constant    118
    Data        31
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     85     105
    BANK0           128     79      83
    BANK1           256     81     123
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    main$1908	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[3]), STR_2(CODE[4]), STR_1(CODE[4]), 

    main$1907	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_5(CODE[8]), STR_4(CODE[7]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_41(CODE[7]), STR_40(CODE[10]), STR_35(CODE[4]), STR_34(CODE[3]), 
		 -> STR_33(CODE[4]), STR_32(CODE[3]), STR_5(CODE[8]), STR_4(CODE[7]), 
		 -> STR_3(CODE[3]), STR_2(CODE[4]), STR_1(CODE[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_39(CODE[6]), STR_38(CODE[22]), STR_37(CODE[14]), STR_36(CODE[16]), 
		 -> STR_31(CODE[15]), STR_30(CODE[21]), STR_9(CODE[8]), STR_8(CODE[8]), 
		 -> STR_7(CODE[8]), STR_6(CODE[22]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer(BANK1[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    main$1235	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_33(CODE[4]), STR_32(CODE[3]), 

    main$1234	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_35(CODE[4]), STR_34(CODE[3]), 

    StateStr	PTR unsigned char [2] size(2) Largest target is 8
		 -> STR_5(CODE[8]), STR_4(CODE[7]), 

    IncStr	PTR unsigned char [3] size(2) Largest target is 4
		 -> STR_3(CODE[3]), STR_2(CODE[4]), STR_1(CODE[4]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer(BANK1[32]), array(BANK1[16]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 32
		 -> STR_29(CODE[8]), STR_28(CODE[7]), STR_27(CODE[8]), STR_26(CODE[7]), 
		 -> STR_25(CODE[8]), STR_24(CODE[7]), STR_23(CODE[8]), STR_22(CODE[7]), 
		 -> STR_21(CODE[8]), STR_20(CODE[7]), STR_19(CODE[8]), STR_18(CODE[7]), 
		 -> STR_17(CODE[8]), STR_16(CODE[7]), STR_15(CODE[8]), STR_14(CODE[7]), 
		 -> STR_13(CODE[5]), STR_12(CODE[4]), STR_11(CODE[5]), STR_10(CODE[4]), 
		 -> main@Buffer(BANK1[32]), 


Critical Paths under _main in COMRAM

    _sprintf->_fround
    _sprintf->_scale
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->_read_adc_voltage
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftadd->_fround
    _send_string_no_lib->_send_byte_no_lib
    _read_adc_voltage->___ftdiv
    ___wmul->___awdiv
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _highIsr in COMRAM

    _highIsr->_RX_ISR

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                91    91      0  107950
                                             73 BANK0      6     6      0
                                              0 BANK1     81    81      0
                            ___aldiv
                            ___almod
                            ___awdiv
                            ___awmod
                            ___ftmul
                           _delay_ms
                       _initTimers01
                    _init_adc_no_lib
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_putc
                           _lcd_puts
                   _read_adc_voltage
                 _send_string_no_lib
                         _setupPorts
                        _setupSerial
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             49    36     13   67950
                                             25 BANK0     48    35     13
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   15730
                                             82 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   15451
                                             82 COMRAM     3     0      3
                                              0 BANK0      7     7      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6461
                                             67 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
                   _read_adc_voltage (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2233
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2425
                                             25 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                             19 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                             19 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3145
                                             27 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             32 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                             19 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     641
                                              4 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5094
                                             19 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4678
                                              7 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                             19 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                             19 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _setupSerial                                          1     1      0       2
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_string_no_lib                                   2     0      2    1891
                                             20 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (2) _send_byte_no_lib                                     1     1      0      22
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                     9     6      3   10995
                                             58 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      45
                                             19 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3982
                                             33 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3693
                                             43 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3176
                                             39 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2953
                                             19 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    4426
                                             33 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    4001
                                             32 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           3     2      1    1915
                                             29 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    2224
                                             29 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1    1388
                                             27 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (4) _lcd_send_nibble                                      2     2      0      68
                                             25 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (5) _delay_cycles                                         6     6      0      46
                                             19 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             4     2      2     654
                                             19 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimers01                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     448
                                             19 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     452
                                             19 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _highIsr                                             18    18      0       0
                                              1 COMRAM    18    18      0
                             _RX_ISR
                           _int0_isr
                           _int1_isr
                           _int2_isr
                          _timer_isr
 ---------------------------------------------------------------------------------
 (8) _timer_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _int2_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _int1_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _int0_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _RX_ISR                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   ___almod
   ___awdiv
     ___awmod (ARG)
   ___awmod
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _read_adc_voltage (ARG)
       ___awtoft
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_raw_no_lib
   _delay_ms
   _initTimers01
   _init_adc_no_lib
   _lcd_gotoxy
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_puts
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
   _read_adc_voltage
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _read_adc_raw_no_lib
   _send_string_no_lib
     _send_byte_no_lib
   _setupPorts
   _setupSerial
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_voltage (ARG)
             ___awtoft
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_voltage (ARG)
         ___awtoft
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_raw_no_lib
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_voltage (ARG)
               ___awtoft
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _read_adc_raw_no_lib
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_voltage (ARG)
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_voltage (ARG)
             ___awtoft
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _read_adc_raw_no_lib
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_voltage (ARG)
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _read_adc_voltage (ARG)
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _read_adc_raw_no_lib
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _highIsr (ROOT)
   _RX_ISR
   _int0_isr
   _int1_isr
   _int2_isr
   _timer_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     51      7B       7       48.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     4F      53       5       64.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     55      69       1       83.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     137      34        0.0%
DATA                 0      0     137       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Dec 28 16:29:47 2023

           ?_read_adc_voltage 003B                             _H 005D            ??_read_adc_voltage 003E  
                          l43 2BDE                            l44 2BB4                            l37 2FD2  
                          l38 2FD0                            l63 2E46                            l64 2E40  
                          l72 2CEA                            l57 2EA0                            l58 2E92  
                          l84 2D96                            l77 2B10                            l85 2D84  
                          l93 2C48                            l86 2DB0                            l94 2C0C  
                          l79 2B38                            l87 2D88                            l88 2D8C  
                          l96 2C24                            l89 2D90                            l97 2C30  
                          l98 2C3C                ?_lcd_send_byte 001C                  ___awdiv@sign 001F  
                          _ch 0069           ___wmul@multiplicand 0024                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                   __CFG_OSC$XT 000000                  ___ftadd@exp1 0092  
                ___ftadd@exp2 0091                   __CFG_LVP$ON 000000                  ___ftadd@sign 0090  
                 __CFG_WDT$ON 000000                           l102 2F0A                           l103 2EF8  
                         l311 0D12                           l128 2DD8                           l320 0E04  
                         l313 0D88                           l402 1362                           l322 10C0  
                         l323 10A8                           l331 0ED6                           l315 0E4C  
                         l500 0278                           l420 165C                           l412 14E8  
                         l340 0FEC                           l332 0F04                           l324 0E5E  
                         l316 0E34                           l405 13CC                           l341 0FF8  
                         l333 0F10                           l325 0E8C                           l317 0DA4  
                         l510 044C                           l406 143C                           l342 1026  
                         l334 0F3E                           l503 097A                           l511 048C  
                         l415 1566                           l343 1032                           l335 0F4A  
                         l319 0DD4                           l512 0552                           l504 02EC  
                         l416 15AE                           l408 14D2                           l344 1060  
                         l336 0F78                           l328 0E9A                           l441 1C3A  
                         l521 05B8                           l505 032E                           l417 15FC  
                         l361 1154                           l345 106C                           l337 0F84  
                         l329 0EC8                           l530 066E                           l418 161A  
                         l362 1144                           l346 109A                           l338 0FB2  
                         l451 1884                           l515 04FA                           l507 03C0  
                         l419 1648                           l371 117A                           l363 113C  
                         l355 111A                           l339 0FBE                           l444 1D14  
                         l452 19F2                           l508 0426                           l380 11F2  
                         l356 110A                           l541 0798                           l525 062A  
                         l461 005C                           l381 11EA                           l373 11C8  
                         l365 1140                           l357 1102                           l349 10E0  
                         l454 1AB2                           l550 0942                           l542 0782  
                         l534 06B0                           l526 0644                           l462 004E  
                         l374 11B8                           l447 18B0                           l551 092C  
                         l535 069A                           l527 0694                           l471 0176  
                         l383 11EE                           l375 11B0                           l367 118E  
                         l359 1106                           l800 2140                           l448 17C4  
                         l544 07BC                           l480 02D8                           l472 015E  
                         l464 0054                           l392 1266                           l368 117E  
                         l561 0A2A                           l545 07C0                           l529 0684  
                         l473 0124                           l393 125E                           l385 123C  
                         l377 11B4                           l369 1176                           l650 24CC  
                         l570 0B0A                           l546 07E2                           l538 0778  
                         l490 0218                           l458 0020                           l394 1274  
                         l386 122C                           l651 24DA                           l643 2452  
                         l571 0AEA                           l563 0A4A                           l547 0920  
                         l539 06DE                           l483 0188                           l459 003C  
                         l395 1262                           l387 1224                           l379 1202  
                         l652 24F0                           l644 246A                           l660 26B6  
                         l820 25E4                           l580 0BE2                           l564 0A6C  
                         l556 09B4                           l548 0832                           l476 029C  
                         l492 022E                           l484 01B0                           l581 0B54  
                         l557 09CC                           l493 021E                           l485 01BE  
                         l469 009C                           l389 1228                           l646 2498  
                         l822 2622                           l566 0A8E                           l486 01BA  
                         l398 1288                           l647 248C                           l663 26EA  
                         l823 260C                           l903 2024                           l567 0A96  
                         l495 0260                           l479 0184                           l664 26F8  
                         l656 2690                           l904 2018                           l568 0ABA  
                         l496 0240                           l488 01FA                           l665 270E  
                         l657 26A4                           l825 264A                           l921 2306  
                         l569 0AC2                           l489 0210                           l826 2640  
                         l850 1DB0                           l762 2812                           l922 2316  
                         l659 26C2                           l819 25EE                           l763 281C  
                         l755 27C4                           l771 29EE                           l915 2284  
                         l499 0288                           l908 2750                           l932 2D56  
                         l764 282A                           l756 27D4                           l772 29E6  
                         l909 2780                           l917 22AC                           l926 2EC4  
                         l854 1DDA                           l790 20BA                           l758 27F2  
                         l918 22DE                           l783 2E10                           l791 20EA  
                         l759 27EA                           l775 2A06                           l919 22EE  
                         l951 2F52                           l864 1E36                           l944 222E  
                         l936 2192                           l776 2A10                           l768 29CC  
                         l873 1E74                           l865 1E2C                           l945 2222  
                         l793 2128                           l777 2A1E                           l769 29D8  
                         l874 1E6A                           l938 220A                           l794 2118  
                         l883 2378                           l859 1E40                           l947 224A  
                         l939 21FA                           l787 205A                           l891 1F36  
                         l876 1E98                           l885 23A0                           l877 1EB4  
                         l981 2918                           l789 2078                           l893 1F62  
                         l886 23DE                           l878 1EE4                           l982 2926  
                         l894 1F9C                           l887 2404                           l991 2A6E  
                         l799 214C                           l895 1FC4                           l992 2A7C  
                         l977 28E4                           l897 2000                           l978 28D8  
                         l898 1FF0                           l987 2A46                           l988 2A3A  
                         l998 2B68                           l999 2B5C                  __CFG_CPB$OFF 000000  
                __CFG_CPD$OFF 000000                           _lcd 000F83                           _max 005F  
                ___awmod@sign 0019                           prod 000FF3     read_adc_voltage@raw_value 0042  
                         wreg 000FE8                   main@channel 0150                   lcd_gotoxy@x 001F  
                 lcd_gotoxy@y 001E                  ___ftdiv@cntr 0035                  ___ftdiv@sign 003A  
                        l3048 27AC                          l5410 048C                          l5500 0782  
                        l5342 0240                          l5352 0278                          l5336 021E  
                        l5418 04D4                          l3780 2B08                          l5438 05BC  
                        l3794 2B30                          l5642 0B54                          l5570 09D0  
                        l5546 095A                          l5466 066E                          l5652 0C02  
                        l5476 069A                          l5646 0BDE                          l5948 1280  
                        STR_1 FFF1                          STR_2 FFF5                          STR_3 FFFC  
                        STR_4 FFE0                          STR_5 FF99                          STR_6 FED1  
                        STR_7 FF81                          STR_8 FF89                          STR_9 FF91  
                        u3025 2CBA                          u3026 2CBC                          u4010 2A4A  
                        u4040 2BD6                          u4050 2C00                          u5100 26C6  
                        u4047 2BCC                          _PIE1 000F9D                          u5040 249C  
                        u4080 2B26                          _PIE2 000FA0                          u4057 2BF6  
                        u6020 2654                          u3700 202A                          u3621 1F1A  
                        u6120 1DCC                          u3641 1F46                          u6051 1D6E  
                        u6220 1E7C                          u7100 07B6                          u6061 1D82  
                        u6150 1E0A                          u6090 1DA2                          u3770 2152  
                        u6410 29F2                          u7220 0A0E                          u7060 06BE  
                        u8100 1352                          u6261 226C                          u6190 1E48  
                        u6350 27F6                          u7150 095A                          u6511 2360  
                        u6600 21B0                          u7400 0C02                          u6281 2294  
                        u7410 0C20                          u7090 07A6                          _PIR2 000FA1  
                        u6531 2388                          u3980 28E8                          u7420 0C3C  
                        u6700 00FE                          u6605 21A8                          u7350 0B14  
                        u8070 12BC                          u7430 0C66                          u6640 2234  
                        u7360 0B32                          u7600 0F1C                          u7440 0C7E  
                        u8227 2CE2                          u7700 103E                          u7620 0F56  
                        u7540 0E6A                          u8237 2E94                          u6581 2176  
                        u6910 045E                          u7438 0C6A                          u6920 049E  
                        u7720 1078                          u7640 0F90                          u7608 0F20  
                        u7560 0EA6                          u7448 0C82                          _RCON 000FD0  
                        u5980 25D6                          u7708 1042                          u7660 0FCA  
                        u7628 0F5A                          u7580 0EE2                          u7548 0E6E  
                        u6950 04D4                          u6870 0366                          u7728 107C  
                        u7680 1004                          u7648 0F94                          u7568 0EAA  
                        u6875 035C                          u7668 0FCE                          u7588 0EE6  
                        u6990 05FA                          u7688 1008              ?_lcd_send_nibble 0001  
                        _main 0C4A                  ___ftpack@arg 0014              _send_byte_no_lib 2FCC  
                ___ftpack@exp 0017                          fsr0h 000FEA                          fsr1h 000FE2  
                        indf0 000FEF                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 006A                          prodh 000FF4                          prodl 000FF3  
                        start 000E                 __CFG_IESO$OFF 000000                   main@voltage 0120  
                _sprintf$1912 00AC                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 0051  
                ___param_bank 000000                  ___ftmul@sign 0052                    _EnableHeat 0155  
                ___fttol@exp1 0092                  ___fttol@lval 008E          __end_of_delay_cycles 2E62  
             __end_of___aldiv 2502               __end_of___almod 2720                         ?_main 0001  
             __end_of___awdiv 2834               __end_of___ftadd 1F0A                         STR_10 FFAB  
                       STR_11 FF4C                         STR_12 FFAB                         STR_20 FFBD  
                       STR_13 FF4C                         STR_21 FF61                         STR_22 FFC4  
                       STR_14 FFA8                         STR_30 FEFD                         STR_23 FF69  
                       STR_15 FF49                         STR_31 FF22                         STR_32 FFF9  
                       STR_24 FFCB                         STR_16 FFAF                         STR_40 FF3F  
                       STR_33 FFED                         STR_41 FFA1                         STR_25 FF71  
                       STR_17 FF51                         STR_34 FFF9                         STR_26 FFD2  
                       STR_18 FFB6                         STR_27 FF69                         STR_35 FFED  
                       STR_19 FF59                         STR_28 FFD9                         STR_36 FF12  
             __end_of___awmod 2A28                         STR_29 FF79                         STR_37 FF31  
                       STR_38 FEE7                         STR_39 FFE7               __end_of___ftdiv 2436  
             __end_of___ftneg 2ED2               __end_of___lldiv 2938               __end_of___ftmul 2350  
                       _T0CON 000FD5               ___awdiv@divisor 001C               __end_of___llmod 2A8E  
             __end_of___ftsub 2D80               __end_of___fttol 225C                         _T3CON 000FB1  
                       i2l301 256A                         i2l303 2574                         i2l305 257A  
                       i2l280 2FB8                         i2l281 2FB6                         i2l275 2FA0  
                       i2l291 2D32                         i2l268 296A                         i2l276 2F9E  
                       i2l286 2F88                         i2l297 2556                         i2l299 2560  
             ___awdiv@counter 001E                         _RCREG 000FAE                         _RCSTA 000FAB  
                       _TMR0H 000FD7                         _TMR0L 000FD6                         _SPBRG 000FAF  
     read_adc_voltage@channel 0041                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
                       _TXREG 000FAD                         _TXSTA 000FAC                 __CFG_PWRT$OFF 000000  
                       _Clock 0151                         _Flags 0157                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
                ___lltoft@exp 0024                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
             __end_of_highIsr 25C6                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                 ___awtoft@sign 002B  
             __end_of_dpowers FE83                         _array 015B                         _index 0065  
                       _scale 1676                         _ready 0156               __end_of_isdigit 2F5A  
             _init_adc_no_lib 2FDC                 ___ftpack@sign 0018                         _state 015A  
                       main@T 0123                         main@t 0145                         pclath 000FFA  
                       tablat 000FF5                         status 000FD8       read_adc_voltage@voltage 003E  
                       wtemp6 006B               __end_of_sprintf 0C4A                __CFG_PBADEN$ON 000000  
             __initialization 2834                  __end_of_main 1676               ??_lcd_send_byte 001D  
                      ??_main 00C9                 ___fttol@sign1 008D                 __activetblptr 000003  
               ?_initTimers01 0001          __size_of__tdiv_to_l_ 0132                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0              ___llmod@dividend 0021  
                      ?_scale 0053                        _ADRESH 000FC4                        _ADRESL 000FC3  
            ___awdiv@dividend 001A              __end_of___awtoft 2E34              __end_of___ftpack 2674  
            __end_of___lltoft 2BB2                        _INTCON 000FF2                        _SPBRGH 000FB0  
                      _RX_ISR 2938                        _HeatON 0068              __end_of_delay_ms 2EAE  
                      _IncVal 016B                        _IncStr 0171                __CFG_XINST$OFF 000000  
            __end_of__powers_ FEAA              __end_of_int0_isr 2FBC              __end_of_lcd_init 2B56  
            __end_of_int1_isr 2FA4              __end_of_int2_isr 2F8C              __end_of_lcd_putc 2C5E  
            __end_of_lcd_puts 2F1A                        ___ftge 2720                     ??___aldiv 001C  
                   ??___almod 001C                        ___wmul 2E62                     ??___awdiv 001E  
                   ??___ftadd 008D                __CFG_STVREN$ON 000000                     ??___awmod 0018  
                 _CookingTime 0063                     ??___ftdiv 0032                     ??___ftneg 0017  
                   ??___lldiv 001C                     ??___ftmul 004A                     ??___llmod 0029  
                   ??___ftsub 0056                     ??___fttol 0088                        _fround 1ADE  
                      clear_0 289A                        clear_1 28A6              ___awdiv@quotient 0020  
             ___awmod@divisor 0016               ___awmod@counter 0018                        main@AN 0147  
                   ??_highIsr 0002                   _MaxCookTime 0059                        main@hr 013F  
       ___ftmul@f3_as_product 004E                ??_initTimers01 0014       __end_of_init_adc_no_lib 2FE8  
                __pdataCOMRAM 0056                     ??_isdigit 0014                  __mediumconst FE5A  
         send_string_no_lib@p 0015                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8            _send_string_no_lib 2BB2                  ?_setupSerial 0001  
                   ??_sprintf 00A6                    __accesstop 0080       __end_of__initialization 28AC  
         ?_send_string_no_lib 0015                    ___ftadd@f1 0087                    ___ftadd@f2 008A  
                  ___ftge@ff1 0014                    ___ftge@ff2 0017                 ___rparam_used 000001  
                  ___ftdiv@f1 002C                    ___ftdiv@f2 002F                    ___ftdiv@f3 0036  
                  ___ftneg@f1 0014                    ___awtoft@c 0028                    ___ftmul@f1 0044  
                  ___ftmul@f2 0047                    ___ftsub@f1 0093                    ___ftsub@f2 0096  
                  ___fttol@f1 0084                __pcstackCOMRAM 0001         __size_of_delay_cycles 002E  
                __pidataBANK0 2FF3                  __pidataBANK1 2FBC                    ___lltoft@c 001C  
               __end_of_scale 1ADE          ??_send_string_no_lib 0017      __end_of_send_byte_no_lib 2FDC  
                  __div_to_l_ 203C     __size_of_read_adc_voltage 0066             lcd_gotoxy@address 0020  
             __div_to_l_@exp1 001F               __div_to_l_@cntr 001E                       ??_scale 0056  
             __div_to_l_@quot 001A                  sprintf@width 00C6                    __pbssBANK1 0151  
 __end_of_read_adc_raw_no_lib 2DFC                  _delay_cycles 2E34                       ?_RX_ISR 0001  
               __div_to_l_@f1 0014                 __div_to_l_@f2 0017                lcd_send_byte@n 001C  
                     ?___ftge 0014                       ?___wmul 0022              lcd_send_nibble@n 001B  
                     ?_fround 0053                     ?___awtoft 0028                     ?___ftpack 0014  
            main@displayClock 013E                     ?___lltoft 001C              ?_init_adc_no_lib 0001  
                     _INTCON2 000FF1                       _INTCON3 000FF0            __size_of_timer_isr 0046  
                   ?_delay_ms 0014                    _lcd_gotoxy 2D80                     ?_int0_isr 0001  
                   ?_lcd_init 0001                     ?_int1_isr 0001                     ?_int2_isr 0001  
                   ?_lcd_putc 0001                     ?_lcd_puts 0022                       _IncMode 0159  
                     _MaxHour 005B               __size_of_RX_ISR 0080          __end_of_initTimers01 2CB0  
           __end_of__npowers_ FED1                       __Hparam 0000                    _scale$1911 0080  
                     __Lparam 0000      __size_of_lcd_send_nibble 0022                       ___aldiv 2436  
                     ___almod 2674               __size_of___ftge 0090                       ___awdiv 27B0  
                     ___ftadd 1D5C                       ___awmod 29B8                       ___ftdiv 2350  
                     ___ftneg 2EAE                       ___lldiv 28B6               __size_of___wmul 0026  
                     ___ftmul 225C                       ___llmod 2A28                       ___ftsub 2D3E  
                     ___fttol 2164                       __pcinit 2834                    ??___awtoft 002B  
                  ??___ftpack 0019               __size_of_fround 027E                       __ramtop 1000  
                  ??___lltoft 0020                       __ptext0 0C4A                       __ptext1 0012  
                     __ptext2 1676                       __ptext3 2F3C                       __ptext4 1ADE  
                     __ptext5 225C                       __ptext6 29B8                       __ptext7 27B0  
                     __ptext8 1F0A                       __ptext9 203C                       _highIsr 0008  
                   _T0CONbits 000FD5                   ?__div_to_l_ 0014                       _dpowers FE5B  
                     _isdigit 2F3C              ___awmod@dividend 0014              ___aldiv@dividend 0014  
                  ??_delay_ms 0016                       _sprintf 0012                       main@min 0141  
                     main@sec 0143                    ??_int0_isr 0001                    ??_lcd_init 001E  
                  ??_int1_isr 0001                    ??_int2_isr 0001                __pintcode_body 2502  
                  ??_lcd_putc 0021                    ??_lcd_puts 0024          end_of_initialization 28AC  
        __size_of_setupSerial 0024                       int_func 2502          lcd_send_byte@cm_data 001D  
             ___lldiv@divisor 0018             __end_of_timer_isr 2D3E               ___lldiv@counter 0020  
                   _RCSTAbits 000FAB              ___aldiv@quotient 001E                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
              __tdiv_to_l_@f1 0014                __tdiv_to_l_@f2 0017         __end_of_lcd_send_byte 2CF8  
            setupSerial@dummy 0014                 ??__tdiv_to_l_ 001A                     _PORTBbits 000F81  
                   _PORTCbits 000F82                     _PORTDbits 000F83                     _PORTEbits 000F84  
                  _setupPorts 2F5A                   _StopCooking 0067              _read_adc_voltage 2A8E  
                 ?_lcd_gotoxy 001E                    main@Buffer 0100               _LCD_INIT_STRING 00CF  
                 ___ftdiv@exp 0039                     _TXSTAbits 000FAC                    main@readd0 012A  
                  main@readd1 012C                    main@readd2 012E                    main@readd3 0130  
                  main@readd4 0132                    main@readd5 0134                    main@readd6 0136  
                  main@readd7 0138           __size_of__div_to_l_ 0128                __end_of_RX_ISR 29B8  
                 ___ftmul@exp 004D             send_byte_no_lib@c 0014                __end_of___ftge 27B0  
              __end_of___wmul 2E88                   _BAUDCONbits 000FB8                 __pidataCOMRAM 2FE8  
               delay_cycles@n 0017                 delay_cycles@x 0018             ??_lcd_send_nibble 001A  
              __end_of_fround 1D5C                     _CountBeep 0061             ?_send_byte_no_lib 0001  
         start_initialization 2834            ??_send_byte_no_lib 0014           __end_of__tdiv_to_l_ 203C  
       __size_of_initTimers01 0052               ___llmod@divisor 0025                      ??_RX_ISR 0001  
             ___llmod@counter 0029                      ??___ftge 001A           __size_of_lcd_gotoxy 0042  
                    ??___wmul 0026                   __pdataBANK0 00CF                   __pdataBANK1 016B  
read_adc_raw_no_lib@raw_value 0018              __CFG_LPT1OSC$OFF 000000                      ??_fround 0056  
               sprintf@tmpval 00B5   __size_of_send_string_no_lib 0056                   ?_setupPorts 0001  
                  fround@prec 0086             __size_of___awtoft 0038             __size_of___ftpack 00AE  
           __size_of___lltoft 005C                  _initTimers01 2C5E                   __pbssCOMRAM 0061  
               __pcstackBANK0 0080                 __pcstackBANK1 0100                  _isdigit$1523 0015  
           __size_of_delay_ms 0026             __size_of_int0_isr 0018             __size_of_lcd_init 0062  
           __size_of_int1_isr 0018             __size_of_int2_isr 0018                   sprintf@flag 00C2  
           __size_of_lcd_putc 0056             __size_of_lcd_puts 0024                   sprintf@fval 00BF  
                 sprintf@prec 00C4                     _main$1234 013A                     _main$1235 013C  
           __CFG_CCP2MX$PORTC 000000                     __pintcode 0008  __size_of_read_adc_raw_no_lib 003A  
               __pmediumconst FE5A                      ?___aldiv 0014                      ?___almod 0014  
                    ?___awdiv 001A                      ?___ftadd 0087                      ?___awmod 0014  
                    ?___ftdiv 002C                      ?___ftneg 0014                      ?___lldiv 0014  
                    ?___ftmul 0044                      ?___llmod 0021                      ?___ftsub 0093  
                   __npowers_ FEAA                      ?___fttol 0084              ___almod@dividend 0014  
                 __tdiv_to_l_ 1F0A                      ?_highIsr 0001                  ??__div_to_l_ 001A  
                    ?_isdigit 0001                      ?_sprintf 0099                __size_of_scale 0468  
    __size_of_init_adc_no_lib 000C               ___aldiv@divisor 0018               ___aldiv@counter 001C  
              ___wmul@product 0026                     delay_ms@n 0014                     delay_ms@x 0016  
                    _PIE1bits 000F9D           __size_of_setupPorts 001A                      i2u424_40 2D22  
                    _PIR1bits 000F9E            __end_of__div_to_l_ 2164      __end_of_read_adc_voltage 2AF4  
                    _RCONbits 000FD0              __CFG_WDTPS$32768 000000    read_adc_raw_no_lib@channel 001A  
                   _timer_isr 2CF8                    _ADCON0bits 000FC2             ___wmul@multiplier 0022  
                   lcd_init@i 001E                     main@readc 0128                     main@readh 0126  
                   lcd_putc@c 0021                     lcd_puts@s 0022                  ??_lcd_gotoxy 001F  
               ??_setupSerial 0014                   _INTCON2bits 000FF1                   _INTCON3bits 000FF0  
                   copy_data0 2848                     copy_data1 2868                     copy_data2 2888  
                    _SetPoint 0056               _lcd_send_nibble 2F1A                      __Hrparam 0000  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000            __end_of_lcd_gotoxy 2DC2  
                    _StateStr 0177                    ?_timer_isr 0001              __size_of___aldiv 00CC  
            __size_of___almod 00AC              __size_of___awdiv 0084              __size_of___ftadd 01AE  
            __size_of___awmod 0070              __size_of___ftdiv 00E6              __size_of___ftneg 0024  
            __size_of___lldiv 0082              __size_of___ftmul 00F4              __size_of___llmod 0066  
            __size_of___ftsub 0042              __size_of___fttol 00F8                      ___awtoft 2DFC  
                    ___ftpack 25C6                   _fround$1910 0080                   _fround$1909 0083  
                    ___lltoft 2B56              __size_of_highIsr 25BE                    sprintf@len 00B3  
                  sprintf@exp 00BD                    sprintf@val 00B9              __size_of_isdigit 001E  
                    _delay_ms 2E88                      __ptext10 2B56                      __ptext11 2A28  
                    __ptext20 2BB2                      __ptext12 28B6                      __ptext21 2FCC  
                    __ptext13 2164                      __ptext30 2D80                      __ptext22 2A8E  
                    __ptext14 2D3E                      __ptext31 2AF4                      __ptext23 2DC2  
                    __ptext15 1D5C                      __ptext32 2CB0                      __ptext24 2E62  
                    __ptext16 2EAE                      __ptext41 2CF8                      __ptext33 2F1A  
                    __ptext25 2350                      __ptext17 2720                      __ptext42 2F74  
                    __ptext34 2E34                      __ptext26 2DFC                      __ptext18 2ED2  
                    __ptext43 2F8C                      __ptext35 2E88                      __ptext27 25C6  
                    __ptext19 2F5A                      __ptext44 2FA4                      __ptext36 2FDC  
                    __ptext28 2EF6                      __ptext45 2938                      __ptext37 2C5E  
                    __ptext29 2C08                      __ptext38 2674                      __ptext39 2436  
                    __powers_ FE83                      _int0_isr 2FA4                      _lcd_init 2AF4  
                    _int1_isr 2F8C                      _int2_isr 2F74                      _lcd_putc 2C08  
                    _lcd_puts 2EF6               ___almod@divisor 0018              __size_of_sprintf 0C38  
             ___almod@counter 001C        __size_of_lcd_send_byte 0048                 ?_delay_cycles 0001  
               __size_of_main 0A2C     __size_of_send_byte_no_lib 0010           __end_of_setupSerial 2EF6  
           ??_init_adc_no_lib 0014                      int$flags 006A                      _state_L4 0158  
                ??_setupPorts 0014                    _INTCONbits 000FF2                      isdigit@c 0016  
         _read_adc_raw_no_lib 2DC2                      scale@scl 0083                      intlevel2 0000  
                   sprintf@ap 00B1                     sprintf@cp 00AF       __end_of_lcd_send_nibble 2F3C  
            __tdiv_to_l_@exp1 0022              __tdiv_to_l_@cntr 0021                     sprintf@sp 0099  
              ??_delay_cycles 0014              __tdiv_to_l_@quot 001D              ___lldiv@dividend 0014  
          __end_of_setupPorts 2F74          ?_read_adc_raw_no_lib 0014                   ??_timer_isr 0001  
  __end_of_send_string_no_lib 2C08                 _lcd_send_byte 2CB0                  ?__tdiv_to_l_ 0014  
                    sprintf@c 00C8                      sprintf@f 009B              ___lldiv@quotient 001C  
                ___aldiv@sign 001D                   _setupSerial 2ED2                  ___almod@sign 001D  
       ??_read_adc_raw_no_lib 0016  
